// Property Sync - Complete Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Plan {
  FREE         // 1 client, 20 properties
  TIER_1       // $15 - 3 clients, 45 properties  
  TIER_2       // $25 - 5 clients, 70 properties
  ENTERPRISE   // Custom pricing
}

enum FeedbackType {
  love     
  like     
  dislike  
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
  TRIAL
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  isActive    Boolean  @default(true)
  
  // Email verification system
  emailVerified Boolean @default(false)
  verificationToken String? @unique
  verificationExpiry DateTime?
  
  // Password reset system (for future)
  resetToken String? @unique
  resetExpiry DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  profile     Profile?
  clients     Client[]
  timelines   Timeline[]
  propertyBatches PropertyBatch[]
  mlsConnection MLSConnection?
  agentConversations Conversation[] @relation("AgentConversations")
  agentConversationsV2 PropertyConversation[] @relation("AgentConversationsV2")

  @@map("users")
}

model Profile {
  id           String  @id @default(cuid())
  firstName    String
  lastName     String
  company      String? // Brokerage
  phone        String?
  website      String?
  licenseNumber String? // Real estate license
  
  // Profile enhancements
  avatar       String?    // Profile photo URL
  bio          String?    // Professional description
  timezone     String?    // User timezone
  specialties  String?    // Real estate specialties (JSON string)
  yearsExperience Int?    // Years in real estate
  notifications Json?     // Email/SMS preferences
  onboardingComplete Boolean @default(false)

  // Email design and preferences
  emailTemplateStyle String? @default("modern") // "modern" | "classical"
  notificationEmail Boolean @default(true)
  notificationDesktop Boolean @default(true) 
  notificationFeedback Boolean @default(true)
  notificationNewProperties Boolean @default(true)
  // Client Activity Notifications
  notificationClientViews Boolean @default(true) // Timeline and property views
  notificationClientLogin Boolean @default(false) // Client login events
  notificationEmailOpens Boolean @default(true) // Email engagement tracking
  notificationInactiveClients Boolean @default(false) // Inactive client alerts
  theme String @default("dark") // "dark" | "light" | "system"
  soundEnabled Boolean @default(true)
  
  // Branding (Pro+ feature)
  logo         String? // URL to logo image
  companyLogo  String? // URL to company logo image
  brandColor   String? @default("#0ea5e9") // Hex color code

  // ðŸ†• ADD EMAIL TEMPLATE PREFERENCE
  preferredEmailTemplate String? @default("modern") // 'modern' or 'classical'
  
  // Subscription management
  plan         Plan    @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  clientLimit  Int     @default(1) // Based on plan: FREE=1, TIER_1=3, TIER_2=5
  propertyLimit Int    @default(20) // Properties total: FREE=20, TIER_1=45, TIER_2=70
  
  // Stripe integration
  stripeCustomerId   String?
  subscriptionId     String?
  subscriptionItemId String?
  billingCycleStart  DateTime?
  billingCycleEnd    DateTime?
  
  // Usage tracking
  currentMonthProperties Int @default(0)
  lastUsageReset DateTime @default(now())
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Client {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  spouseEmail String?
  phone       String?
  notes       String?
  isActive    Boolean  @default(true)
  
  // Engagement analytics
  totalViews       Int @default(0)
  avgResponseTime  Int @default(0) // in hours
  feedbackRate     Float @default(0.0) // percentage
  lastActivity     DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  agentId     String
  agent       User       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  timelines   Timeline[]
  feedback    Feedback[]
  propertyBatches PropertyBatch[]
  clientConversations Conversation[] @relation("ClientConversations")
  clientConversationsV2 PropertyConversation[] @relation("ClientConversationsV2")

  @@map("clients")
}

model Timeline {
  id          String   @id @default(cuid())
  title       String
  description String?
  shareToken  String   @unique @default(cuid()) // For shareable links
  isActive    Boolean  @default(true)
  
  // View tracking & analytics
  totalViews  Int      @default(0)
  lastViewed  DateTime?
  viewHistory Json?    // Track view timestamps
  
  // Email tracking for enhanced email system
  initialEmailSent       Boolean @default(false)
  lastEmailSent          DateTime?
  lastEmailPropertyCount Int @default(0)
  
  // Agent access token
  agentToken  String?  @unique
  tokenExpiry DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  agentId     String
  agent       User       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  clientId    String
  client      Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  properties  Property[]
  clientAuth  ClientAuth[]
  analytics   ClientAnalytics[]
  propertyBatches PropertyBatch[]
  conversations Conversation[] @relation("TimelineConversations")
  conversationsV2 PropertyConversation[] @relation("TimelineConversationsV2")

  @@map("timelines")
}

model Property {
  id              String   @id @default(cuid())
  mlsId           String?  // MLS listing ID
  address         String
  city            String?
  state           String?
  zipCode         String?
  price           Int      // Store in cents
  bedrooms        Int?
  bathrooms       Float?
  squareFootage   Int?
  propertyType    String?  // House, Condo, Townhome
  description     String?  // Property description
  imageUrls       String   @default("") // JSON string of image URLs
  listingUrl      String?  // MLS link
  
  // NEW: MLS Parser Integration Fields
  mlsSource       String?   // 'flexmls', 'mls_pin', etc.
  originalMlsUrl  String?   // Original URL used for parsing
  parsedData      Json?     // Raw parsed data from MLS parser
  parseTimestamp  DateTime? // When this property was parsed
  imageCount      Int       @default(0) // Number of images parsed
  parseErrors     String   @default("") // JSON string of parse errors
  
  // NEW: Enhanced Duplicate Detection
  addressNormalized String? // Normalized address for similarity matching
  priceRange       String?  // Price category for grouping
  
  // NEW: Batch Processing Fields
  batchId         String?   // Links to PropertyBatch
  importStatus    String    @default("completed") // 'pending', 'completed', 'failed'
  
  // NEW: Progressive Loading Fields
  isQuickParsed   Boolean   @default(false) // Basic info loaded quickly
  isFullyParsed   Boolean   @default(true) // All details loaded
  loadingProgress Int       @default(100) // Percentage of data loaded (0-100)
  
  // Agent management
  agentNotes      String?
  isHighlighted   Boolean  @default(false)
  
  // Timeline positioning & status
  position        Int      @default(0) // Order in timeline
  isViewed        Boolean  @default(false) // Client viewed
  viewedAt        DateTime?
  
  // Bulk operations
  isQueued        Boolean  @default(false)
  queuedForEmail  Boolean  @default(false)
  emailSent       Boolean  @default(false)
  emailSentAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  timelineId      String
  timeline        Timeline   @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  feedback        Feedback[]
  conversations   Conversation[] @relation("PropertyConversations")
  conversationV2  PropertyConversation? @relation("PropertyConversationV2")
  batchProperty   BatchProperty? // Link to batch queue item

  @@map("properties")
}

model Feedback {
  id          String       @id @default(cuid())
  feedback    FeedbackType 
  notes       String?
  clientName  String       
  clientEmail String       
  
  // Links to Client table for upsert logic
  clientId    String
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Enhanced engagement tracking
  viewedAt    DateTime     @default(now())
  respondedAt DateTime?
  responseTime Int?        
  ipAddress   String?      
  userAgent   String?      
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  propertyId  String
  property    Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Unique constraint for upsert logic
  @@unique([propertyId, clientId], name: "propertyId_clientId")
  @@map("feedback")
}

// Usage tracking for analytics
model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // 'property_created', 'client_created', 'email_sent'
  metadata  Json?    // Additional data
  createdAt DateTime @default(now())
  
  @@map("usage_logs")
}
 
// TrackEvent table for analytics
model TrackEvent {
  id        String   @id @default(cuid())
  clientId  String
  eventType String   // 'property_feedback', 'timeline_email_sent', etc.
  metadata  Json?    // Flexible storage for event data
  timestamp DateTime @default(now())
  
  @@index([clientId, eventType])
  @@index([timestamp])
  @@map("track_events")
}

// Email templates for different plans
model EmailTemplate {
  id          String  @id @default(cuid())
  name        String
  subject     String
  htmlContent String
  textContent String?
  isDefault   Boolean @default(false)
  planAccess  String  @default("") // JSON string of plan access
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("email_templates")
}

model ClientAuth {
  id            String   @id @default(cuid())
  clientName    String   // firstName from client login  
  phoneLastFour String   // last 4 digits for simple auth
  timelineId    String   // connects to existing Timeline
  sessionToken  String   @unique @default(cuid())
  lastAccess    DateTime @default(now())
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  
  // Relation to existing Timeline model
  timeline      Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  
  @@index([sessionToken])
  @@index([timelineId])
  @@map("client_auth")
}

model ClientAnalytics {
  id         String   @id @default(cuid())
  timelineId String   // connects to existing Timeline
  eventType  String   // 'timeline_view', 'property_view', 'feedback_submit', 'email_open'
  propertyId String?  // optional, for property-specific events
  metadata   Json?    // flexible data storage (IP, user agent, etc.)
  timestamp  DateTime @default(now())
  
  // Relation to existing Timeline model  
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  
  @@index([timelineId, eventType])
  @@index([timestamp])
  @@map("client_analytics")
}

// NEW: PropertyBatch model for queue management
model PropertyBatch {
  id            String   @id @default(cuid())
  agentId       String
  clientId      String  
  timelineId    String
  status        String   @default("pending") // 'pending', 'processing', 'completed', 'failed'
  totalProperties Int    @default(0)
  successCount  Int      @default(0)
  failureCount  Int      @default(0)
  errors        Json?    // Array of error objects
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  agent         User       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  client        Client     @relation(fields: [clientId], references: [id], onDelete: Cascade) 
  timeline      Timeline   @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  batchProperties BatchProperty[]
  
  @@index([agentId, status])
  @@index([timelineId])
  @@map("property_batches")
}

// NEW: BatchProperty model for individual queue items
model BatchProperty {
  id          String   @id @default(cuid())
  batchId     String
  mlsUrl      String
  parseStatus String   @default("pending") // 'pending', 'quick_parsing', 'quick_parsed', 'full_parsing', 'parsed', 'failed', 'imported'
  parsedData  Json?    // Parsed property data
  quickData   Json?    // Quick parsed data (basic info)
  parseError  String?
  propertyId  String?  @unique // Links to created Property
  position    Int      @default(0)
  loadingProgress Int  @default(0) // Percentage of parsing completed (0-100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  batch       PropertyBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  property    Property?     @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  
  @@index([batchId, position])
  @@map("batch_properties")
}

// NEW: MLS Connection model for Spark API integration
model MLSConnection {
  id          String   @id @default(cuid())
  userId      String   @unique // One MLS connection per user
  
  // MLS Details
  mlsName     String   // e.g., "Greater Louisville AOR" 
  mlsRegion   String   // e.g., "Kentucky"
  
  // Spark API Integration
  sparkUserId String?  // User ID from Spark/Flexmls
  accessToken String?  // OAuth access token
  refreshToken String? // OAuth refresh token
  tokenExpiry DateTime?
  
  // Connection Status
  isActive    Boolean  @default(false)
  lastSync    DateTime?
  syncStatus  String   @default("never") // 'never', 'syncing', 'success', 'failed'
  syncError   String?
  
  // Connection Metadata
  connectionData Json? // Store additional MLS-specific data
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isActive])
  @@map("mls_connections")
}

// NEW: Messaging System Models
model Conversation {
  id              String   @id @default(cuid())
  agentId         String
  clientId        String
  timelineId      String
  propertyId      String?  // Optional property ID for property-specific conversations

  // Conversation metadata
  isActive        Boolean  @default(true)
  lastMessageAt   DateTime @default(now())
  agentUnreadCount Int     @default(0)
  clientUnreadCount Int    @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  agent           User     @relation("AgentConversations", fields: [agentId], references: [id], onDelete: Cascade)
  client          Client   @relation("ClientConversations", fields: [clientId], references: [id], onDelete: Cascade)
  timeline        Timeline @relation("TimelineConversations", fields: [timelineId], references: [id], onDelete: Cascade)
  property        Property? @relation("PropertyConversations", fields: [propertyId], references: [id], onDelete: Cascade)
  messages        Message[]

  @@unique([agentId, clientId, timelineId, propertyId])
  @@index([agentId])
  @@index([clientId])
  @@index([timelineId])
  @@index([propertyId])
  @@map("conversations")
}

model Message {
  id              String   @id @default(cuid())
  conversationId  String
  senderId        String   // Either agentId or clientId
  senderType      String   // 'agent' or 'client'
  content         String

  // Message metadata
  isRead          Boolean  @default(false)
  readAt          DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

// ðŸ†• MESSAGING SYSTEM V2 - NEW MODELS FOR PROPERTY-SPECIFIC CONVERSATIONS

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  NEW_MESSAGE
  PROPERTY_VIEWED
  PROPERTY_FEEDBACK
  TIMELINE_SHARED
}

enum UserType {
  AGENT
  CLIENT
}

// NEW MODEL: PropertyConversation (1:1 with Property)
model PropertyConversation {
  id                String    @id @default(cuid())
  propertyId        String    @unique  // ONE conversation per property - FIXES THE ISOLATION ISSUE
  timelineId        String
  agentId          String
  clientId         String
  status           ConversationStatus @default(ACTIVE)
  unreadAgentCount Int       @default(0)
  unreadClientCount Int      @default(0)
  lastMessageAt    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  property         Property   @relation("PropertyConversationV2", fields: [propertyId], references: [id], onDelete: Cascade)
  timeline         Timeline   @relation("TimelineConversationsV2", fields: [timelineId], references: [id], onDelete: Cascade)
  agent           User       @relation("AgentConversationsV2", fields: [agentId], references: [id])
  client          Client     @relation("ClientConversationsV2", fields: [clientId], references: [id])
  messages        MessageV2[]
  notifications   NotificationV2[]

  @@index([agentId, status])
  @@index([clientId, status])
  @@index([timelineId])
  @@map("property_conversations")
}

// NEW MODEL: MessageV2 (scoped to PropertyConversation)
model MessageV2 {
  id                    String    @id @default(cuid())
  conversationId        String
  senderId              String
  senderType            UserType  // AGENT | CLIENT
  content               String
  type                  MessageType @default(TEXT)
  isRead                Boolean   @default(false)
  readAt                DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  conversation          PropertyConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@map("messages_v2")
}

// NEW MODEL: NotificationV2 (property-specific notifications)
model NotificationV2 {
  id                String    @id @default(cuid())
  conversationId    String
  recipientId       String
  type              NotificationType
  title             String
  message           String
  isRead            Boolean   @default(false)
  readAt            DateTime?
  createdAt         DateTime  @default(now())

  // Relations
  conversation      PropertyConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([recipientId, isRead])
  @@index([conversationId])
  @@map("notifications_v2")
}