// MESSAGING SYSTEM V2 - SCHEMA CHANGES ONLY
// This shows the NEW models we'll add (keeping all existing models)

// NEW ENUMS for V2
enum ConversationStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  NEW_MESSAGE
  PROPERTY_VIEWED
  PROPERTY_FEEDBACK
  TIMELINE_SHARED
}

enum UserType {
  AGENT
  CLIENT
}

// NEW MODEL: PropertyConversation (1:1 with Property)
model PropertyConversation {
  id                String    @id @default(cuid())
  propertyId        String    @unique  // ONE conversation per property
  timelineId        String
  agentId          String
  clientId         String
  status           ConversationStatus @default(ACTIVE)
  unreadAgentCount Int       @default(0)
  unreadClientCount Int      @default(0)
  lastMessageAt    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  property         Property   @relation("PropertyConversationV2", fields: [propertyId], references: [id], onDelete: Cascade)
  timeline         Timeline   @relation("TimelineConversationsV2", fields: [timelineId], references: [id], onDelete: Cascade)
  agent           User       @relation("AgentConversationsV2", fields: [agentId], references: [id])
  client          Client     @relation("ClientConversationsV2", fields: [clientId], references: [id])
  messages        MessageV2[]
  notifications   NotificationV2[]

  @@index([agentId, status])
  @@index([clientId, status])
  @@index([timelineId])
  @@map("property_conversations")
}

// NEW MODEL: MessageV2 (scoped to PropertyConversation)
model MessageV2 {
  id                    String    @id @default(cuid())
  conversationId        String
  senderId              String
  senderType            UserType  // AGENT | CLIENT
  content               String
  type                  MessageType @default(TEXT)
  isRead                Boolean   @default(false)
  readAt                DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  conversation          PropertyConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@map("messages_v2")
}

// NEW MODEL: NotificationV2 (property-specific notifications)
model NotificationV2 {
  id                String    @id @default(cuid())
  conversationId    String
  recipientId       String
  type              NotificationType
  title             String
  message           String
  isRead            Boolean   @default(false)
  readAt            DateTime?
  createdAt         DateTime  @default(now())

  // Relations
  conversation      PropertyConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([recipientId, isRead])
  @@index([conversationId])
  @@map("notifications_v2")
}

// UPDATE: Add V2 relations to existing models
// These will be added to the existing models:

// Add to User model:
// agentConversationsV2 PropertyConversation[] @relation("AgentConversationsV2")

// Add to Client model:
// clientConversationsV2 PropertyConversation[] @relation("ClientConversationsV2")

// Add to Timeline model:
// conversationsV2 PropertyConversation[] @relation("TimelineConversationsV2")

// Add to Property model:
// conversationV2 PropertyConversation? @relation("PropertyConversationV2")