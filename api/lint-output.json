
> api@0.0.3 lint
> eslint "{src,apps,libs,test}/**/*.ts" --fix --format json

[{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\agent\\agent.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\agent\\agent.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\agent\\agent.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\analytics\\analytics.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\analytics\\analytics.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\analytics\\analytics.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .remoteAddress on an `error` typed value.","line":27,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access ['user-agent'] on an `error` typed value.","line":29,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":29,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { TrackEventDto } from './dto/track-event.dto';\nimport { AnalyticsResponseDto } from './dto/analytics-response.dto';\n\n@Injectable()\nexport class AnalyticsService {\n  constructor(private prisma: PrismaService) {}\n\n  // Track client events (called from client timeline)\n  async trackEvent(\n    shareToken: string,\n    trackEventDto: TrackEventDto,\n    request?: Express.Request,\n  ) {\n    // Verify timeline exists\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    // Extract IP and user agent for analytics\n    const ipAddress: string | undefined =\n      (request?.ip as string) || (request?.socket?.remoteAddress as string);\n    const userAgent: string | undefined =\n      (request?.headers?.['user-agent'] as string) || undefined;\n\n    // Create analytics record\n    const analyticsRecord = await this.prisma.clientAnalytics.create({\n      data: {\n        timelineId: timeline.id,\n        eventType: trackEventDto.eventType,\n        propertyId: trackEventDto.propertyId || null,\n        metadata: {\n          ...trackEventDto.metadata,\n          ipAddress,\n          userAgent,\n        },\n        timestamp: new Date(),\n      },\n    });\n\n    // Update timeline view count if it's a timeline view\n    if (trackEventDto.eventType === 'timeline_view') {\n      await this.prisma.timeline.update({\n        where: { id: timeline.id },\n        data: {\n          totalViews: { increment: 1 },\n          lastViewed: new Date(),\n        },\n      });\n    }\n\n    // Update property view count if it's a property view\n    if (\n      trackEventDto.eventType === 'property_view' &&\n      trackEventDto.propertyId\n    ) {\n      await this.prisma.property.update({\n        where: { id: trackEventDto.propertyId },\n        data: {\n          isViewed: true,\n          viewedAt: new Date(),\n        },\n      });\n    }\n\n    return analyticsRecord;\n  }\n\n  // Get recent activity for agent dashboard (REST polling)\n  async getAgentRecentActivity(\n    agentId: string,\n    since?: Date,\n  ): Promise<AnalyticsResponseDto[]> {\n    const sinceDate = since || new Date(Date.now() - 300000); // Last 5 minutes by default\n\n    const recentActivity = await this.prisma.clientAnalytics.findMany({\n      where: {\n        timeline: {\n          agentId,\n        },\n        timestamp: {\n          gte: sinceDate,\n        },\n      },\n      include: {\n        timeline: {\n          include: {\n            client: true,\n          },\n        },\n      },\n      orderBy: {\n        timestamp: 'desc',\n      },\n      take: 50, // Limit for performance\n    });\n\n    return recentActivity.map(this.formatAnalyticsResponse);\n  }\n\n  // Get specific client activity\n  async getClientActivity(\n    agentId: string,\n    clientId: string,\n    limit = 20,\n  ): Promise<AnalyticsResponseDto[]> {\n    const timeline = await this.prisma.timeline.findFirst({\n      where: {\n        clientId,\n        agentId,\n      },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Client timeline not found');\n    }\n\n    const activity = await this.prisma.clientAnalytics.findMany({\n      where: {\n        timelineId: timeline.id,\n      },\n      include: {\n        timeline: {\n          include: {\n            client: true,\n          },\n        },\n      },\n      orderBy: {\n        timestamp: 'desc',\n      },\n      take: limit,\n    });\n\n    return activity.map(this.formatAnalyticsResponse);\n  }\n\n  // Get dashboard stats for Mission Control\n  async getDashboardStats(agentId: string) {\n    // Get all timelines for this agent\n    const timelines = await this.prisma.timeline.findMany({\n      where: { agentId },\n      include: {\n        client: true,\n        _count: {\n          select: {\n            properties: true,\n            analytics: true,\n          },\n        },\n      },\n    });\n\n    // Get recent activity (last 24 hours)\n    const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    const recentActivity = await this.prisma.clientAnalytics.count({\n      where: {\n        timeline: {\n          agentId,\n        },\n        timestamp: {\n          gte: last24Hours,\n        },\n      },\n    });\n\n    // Get feedback stats\n    const feedbackStats = await this.prisma.feedback.groupBy({\n      by: ['feedback'],\n      where: {\n        property: {\n          timeline: {\n            agentId,\n          },\n        },\n        createdAt: {\n          gte: last24Hours,\n        },\n      },\n      _count: {\n        feedback: true,\n      },\n    });\n\n    return {\n      totalClients: timelines.length,\n      totalProperties: timelines.reduce(\n        (sum, t) => sum + t._count.properties,\n        0,\n      ),\n      totalViews: timelines.reduce((sum, t) => sum + t.totalViews, 0),\n      recentActivity,\n      feedbackStats: {\n        love:\n          feedbackStats.find((f) => f.feedback === 'love')?._count.feedback ||\n          0,\n        like:\n          feedbackStats.find((f) => f.feedback === 'like')?._count.feedback ||\n          0,\n        dislike:\n          feedbackStats.find((f) => f.feedback === 'dislike')?._count\n            .feedback || 0,\n      },\n      activeTimelines: timelines.filter(\n        (t) => t.lastViewed && t.lastViewed > last24Hours,\n      ).length,\n    };\n  }\n\n  // Get timeline stats for client view\n  async getTimelineStats(shareToken: string) {\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: {\n        _count: {\n          select: {\n            properties: true,\n            analytics: true,\n          },\n        },\n      },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    return {\n      totalViews: timeline.totalViews,\n      totalProperties: timeline._count.properties,\n      lastViewed: timeline.lastViewed,\n    };\n  }\n\n  // Helper method to format analytics response\n  private formatAnalyticsResponse = (analytics: {\n    id: string;\n    eventType: string;\n    propertyId: string | null;\n    timestamp: Date;\n    metadata: Record<string, unknown>;\n    timeline?: {\n      client?: {\n        firstName: string;\n        lastName: string;\n      } | null;\n    } | null;\n  }): AnalyticsResponseDto => {\n    return {\n      id: analytics.id,\n      eventType: analytics.eventType,\n      propertyId: analytics.propertyId,\n      timestamp: analytics.timestamp,\n      clientName: analytics.timeline?.client\n        ? `${analytics.timeline.client.firstName} ${analytics.timeline.client.lastName}`\n        : 'Unknown Client',\n      metadata: analytics.metadata,\n    };\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\analytics\\dto\\analytics-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\analytics\\dto\\track-event.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\app.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\app.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\app.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\auth.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoginDto' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Request,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { Public } from '../common/decorators/public.decorator';\n\ninterface RequestWithUser extends Express.Request {\n  user: {\n    id: string;\n    sub: string;\n    email: string;\n  };\n}\n\n@Controller('api/v1/auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @Public()\n  @Post('verify-email')\n  async verifyEmail(@Body('token') token: string) {\n    return this.authService.verifyEmail(token);\n  }\n\n  @Public()\n  @Get('verify-email/:token')\n  async verifyEmailByUrl(@Param('token') token: string) {\n    return this.authService.verifyEmail(token);\n  }\n\n  @Public()\n  @Post('resend-verification')\n  async resendVerification(@Body('email') email: string) {\n    return this.authService.resendVerification(email);\n  }\n\n  @Public()\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(@Request() req: RequestWithUser) {\n    try {\n      return this.authService.login(req.user);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  @Public()\n  @Post('refresh')\n  async refresh(@Body('refreshToken') refreshToken: string) {\n    return this.authService.refreshToken(refreshToken);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    return req.user;\n  }\n\n  // Profile updates moved to UsersController to avoid conflicts\n\n  @UseGuards(JwtAuthGuard)\n  @Patch('preferences')\n  async updatePreferences(\n    @Request() req: RequestWithUser,\n    @Body() preferences: Record<string, unknown>,\n  ) {\n    const userId = req.user.sub;\n    return this.authService.updateUserPreferences(userId, preferences);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  logout() {\n    return { message: 'Logged out successfully' };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\auth.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\auth.service.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'login' has no 'await' expression.","line":100,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":100,"endColumn":14,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3187,3379],"text":"login(user: {\n    id: string;\n    email: string;\n    emailVerified: boolean;\n    profile?: { firstName?: string; lastName?: string; plan?: string } | null;\n  }): AuthResponseDto"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_password' is assigned a value but never used.","line":169,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_preferences' is defined but never used.","line":187,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":235,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":235,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":236,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":236,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sub on an `any` value.","line":236,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":238,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nTODO: Email Authentication Roadmap\n- [x] Basic email verification with nodemailer\n- [ ] SMS verification via Twilio (future)\n- [ ] Magic link authentication (future)\n- [ ] Google OAuth integration (future)\n- [ ] Microsoft OAuth integration (future)\n- [ ] MLS/Realtor database verification (future)\n- [ ] NAR (National Association of Realtors) integration (future)\n- [ ] State licensing board API verification (future)\n- [ ] Real estate company email domain verification (future)\n*/\n\nimport {\n  Injectable,\n  UnauthorizedException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from '../users/users.service';\nimport { EmailService } from '../email/email.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { AuthResponseDto } from './dto/auth-response.dto';\nimport { UpdateProfileDto } from '../users/dto/update-profile.dto';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private emailService: EmailService,\n  ) {}\n\n  async register(\n    registerDto: RegisterDto,\n  ): Promise<{ message: string; userId: string }> {\n    // Check if user already exists\n    const existingUser = await this.usersService.findByEmail(registerDto.email);\n    if (existingUser) {\n      throw new ConflictException('Email already registered');\n    }\n\n    // Generate verification token\n    const verificationToken = crypto.randomBytes(32).toString('hex');\n    const verificationExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n    // Create user with verification data\n    const user = await this.usersService.createWithVerification(registerDto, {\n      verificationToken,\n      verificationExpiry,\n    });\n\n    // Send verification email\n    await this.emailService.sendVerificationEmail(\n      user.email,\n      user.profile?.firstName || registerDto.firstName, // Fix: handle null profile\n      verificationToken,\n    );\n\n    return {\n      message:\n        'Registration successful! Please check your email to verify your account.',\n      userId: user.id,\n    };\n  }\n\n  async verifyEmail(token: string): Promise<AuthResponseDto> {\n    const user = await this.usersService.findByVerificationToken(token);\n\n    if (!user) {\n      throw new BadRequestException('Invalid verification token');\n    }\n\n    if (!user.verificationExpiry || user.verificationExpiry < new Date()) {\n      // Fix: handle null\n      throw new BadRequestException('Verification token has expired');\n    }\n\n    if (user.emailVerified) {\n      throw new BadRequestException('Email already verified');\n    }\n\n    // Mark email as verified\n    const verifiedUser = await this.usersService.markEmailAsVerified(user.id);\n\n    // Send welcome email\n    await this.emailService.sendWelcomeEmail(\n      verifiedUser.email,\n      verifiedUser.profile?.firstName || 'Agent', // Fix: handle null profile\n    );\n\n    // Return auth tokens for immediate login\n    return this.generateTokens(verifiedUser);\n  }\n\n  async login(user: {\n    id: string;\n    email: string;\n    emailVerified: boolean;\n    profile?: { firstName?: string; lastName?: string; plan?: string } | null;\n  }): Promise<AuthResponseDto> {\n    if (!user.emailVerified) {\n      throw new UnauthorizedException(\n        'Please verify your email before logging in',\n      );\n    }\n\n    return this.generateTokens(user);\n  }\n\n  async resendVerification(email: string): Promise<{ message: string }> {\n    const user = await this.usersService.findByEmail(email);\n\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (user.emailVerified) {\n      throw new BadRequestException('Email is already verified');\n    }\n\n    // Generate new verification token\n    const verificationToken = crypto.randomBytes(32).toString('hex');\n    const verificationExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n    await this.usersService.updateVerificationToken(user.id, {\n      verificationToken,\n      verificationExpiry,\n    });\n\n    // Send new verification email\n    await this.emailService.sendVerificationEmail(\n      user.email,\n      user.profile?.firstName || 'Agent', // Fix: handle null profile\n      verificationToken,\n    );\n\n    return {\n      message: 'Verification email sent! Please check your inbox.',\n    };\n  }\n\n  async validateUser(\n    email: string,\n    password: string,\n  ): Promise<{\n    id: string;\n    email: string;\n    emailVerified: boolean;\n    profile?: { firstName?: string; lastName?: string; plan?: string } | null;\n  } | null> {\n    try {\n      console.log('Validating user:', email);\n      const user = await this.usersService.findByEmail(email);\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (user) {\n        const isValidPassword = await this.usersService.validatePassword(\n          password,\n          user.password,\n        );\n        console.log('Password valid:', isValidPassword);\n\n        if (isValidPassword) {\n          const { password: _password, ...result } = user;\n          return result;\n        }\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error in validateUser:', error);\n      return null;\n    }\n  }\n\n  async updateProfile(userId: string, updateData: UpdateProfileDto) {\n    return this.usersService.updateProfile(userId, updateData);\n  }\n\n  async updateUserPreferences(\n    userId: string,\n    _preferences: Record<string, unknown>,\n  ) {\n    return this.usersService.updateProfile(userId, {\n      //emailTemplateStyle: preferences.emailTemplateStyle\n    });\n  }\n\n  private generateTokens(user: {\n    id: string;\n    email: string;\n    emailVerified: boolean;\n    profile?: { firstName?: string; lastName?: string; plan?: string } | null;\n  }): AuthResponseDto {\n    const payload = {\n      email: user.email,\n      sub: user.id,\n      firstName: user.profile?.firstName,\n      lastName: user.profile?.lastName,\n      emailVerified: user.emailVerified,\n    };\n\n    const accessToken = this.jwtService.sign(payload, {\n      expiresIn: this.configService.get<string>('JWT_ACCESS_TOKEN_EXPIRY'),\n    });\n\n    const refreshToken = this.jwtService.sign(payload, {\n      expiresIn: this.configService.get<string>('JWT_REFRESH_TOKEN_EXPIRY'),\n    });\n\n    return {\n      accessToken,\n      refreshToken,\n      tokenType: 'Bearer',\n      expiresIn:\n        this.configService.get<string>('JWT_ACCESS_TOKEN_EXPIRY') || '15m', // Fix: handle undefined\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.profile?.firstName || '',\n        lastName: user.profile?.lastName || '',\n        plan: user.profile?.plan || 'FREE',\n        emailVerified: user.emailVerified,\n      },\n    };\n  }\n\n  async refreshToken(token: string): Promise<AuthResponseDto> {\n    try {\n      const payload = this.jwtService.verify(token);\n      const user = await this.usersService.findById(payload.sub);\n      return this.generateTokens(user);\n    } catch (error) {\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\current-user.decorator.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":5,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":5,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":6,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":6,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":6,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":6,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const CurrentUser = createParamDecorator(\n  (_data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\dto\\auth-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\dto\\login.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\dto\\register.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\dto\\update-preferences.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\dto\\update-profile.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\guards\\jwt-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\guards\\local-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\jwt-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\public.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\strategies\\jwt.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\auth\\strategies\\local.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\clients\\clients.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\clients\\clients.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\clients\\clients.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ForbiddenException' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":211,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":211,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access ._count on an `any` value.","line":211,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":212,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":214,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":213,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":213,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .properties on an `any` value.","line":213,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":213,"column":43,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":213,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .feedback on an `any` value.","line":213,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .feedback on an `any` value.","line":213,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":214,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":214,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":215,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":215,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalViews on an `any` value.","line":215,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastActivity on an `any` value.","line":227,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":229,"column":34,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":229,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastActivity on an `any` value.","line":229,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":245,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":245,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `any` value.","line":245,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":245,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":246,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":246,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `any` value.","line":246,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":249,"column":44,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":249,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .shareToken on an `any` value.","line":249,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":253,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":253,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":253,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":253,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `any` value.","line":256,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `any` value.","line":256,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":257,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":257,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":257,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":257,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":258,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":258,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `any` value.","line":258,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":258,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":259,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":259,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar on an `any` value.","line":259,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":260,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":260,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access ._count on an `any` value.","line":260,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":260,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":261,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":261,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":261,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":261,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastActivity on an `any` value.","line":261,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":261,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toISOString on an `any` value.","line":261,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":264,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":264,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":264,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":264,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":264,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":267,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":267,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .spouseEmail on an `any` value.","line":267,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":267,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":268,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":268,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":271,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":271,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":271,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":271,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastActivity on an `any` value.","line":271,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":274,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":274,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `any` value.","line":274,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":274,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":275,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":275,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `any` value.","line":275,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":275,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":276,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":276,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `any` value.","line":276,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":277,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":277,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isActive on an `any` value.","line":277,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":277,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":278,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":278,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":278,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":278,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatedAt on an `any` value.","line":278,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":283,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":283,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":283,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":284,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":284,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .shareToken on an `any` value.","line":284,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":284,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":285,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":285,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isActive on an `any` value.","line":285,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":288,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":288,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalViews on an `any` value.","line":288,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":288,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":289,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":289,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":289,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":289,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastViewed on an `any` value.","line":289,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":289,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":290,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":290,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access ._count on an `any` value.","line":290,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":43}],"suppressedMessages":[],"errorCount":67,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  NotFoundException,\n  ForbiddenException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { UsersService } from '../users/users.service';\nimport { AppConfigService } from '../config/app.config';\nimport { CreateClientDto } from './dto/create-client.dto';\nimport { UpdateClientDto } from './dto/update-client.dto';\nimport { ClientResponseDto } from './dto/client-response.dto';\n\n@Injectable()\nexport class ClientsService {\n  constructor(\n    private prisma: PrismaService,\n    private usersService: UsersService,\n    private appConfig: AppConfigService,\n  ) {}\n\n  // 🆕 UPDATED CREATE METHOD - FRONTEND COMPATIBLE\n  async create(\n    agentId: string,\n    createClientDto: CreateClientDto,\n  ): Promise<ClientResponseDto> {\n    // Check plan limits before creating client\n    const canAdd = await this.usersService.checkCanAddClients(agentId, 1);\n    if (!canAdd.canAdd) {\n      throw new BadRequestException(canAdd.reason);\n    }\n\n    const agent = await this.prisma.user.findUnique({\n      where: { id: agentId },\n      include: { profile: true },\n    });\n\n    if (!agent) {\n      throw new NotFoundException('Agent not found');\n    }\n\n    // 🆕 PARSE NAME FROM FRONTEND\n    const { firstName, lastName } = this.parseClientName(createClientDto);\n\n    const result = await this.prisma.$transaction(async (tx) => {\n      // 1. Create the client\n      const client = await tx.client.create({\n        data: {\n          firstName,\n          lastName,\n          email: createClientDto.email,\n          spouseEmail: createClientDto.spouseEmail, // 🆕 SPOUSE EMAIL\n          phone: createClientDto.phone,\n          notes: createClientDto.notes,\n          agentId,\n        },\n      });\n\n      // 2. Auto-create timeline for this client\n      const timeline = await tx.timeline.create({\n        data: {\n          title: `${client.firstName} ${client.lastName}'s Properties`,\n          description: `Property timeline for ${client.firstName} ${client.lastName}`,\n          agentId,\n          clientId: client.id,\n        },\n      });\n\n      return { client, timeline };\n    });\n\n    return this.formatClientResponse(result.client, result.timeline);\n  }\n\n  // 🆕 UPDATED FINDALL METHOD\n  async findAll(agentId: string): Promise<ClientResponseDto[]> {\n    const clients = await this.prisma.client.findMany({\n      where: {\n        agentId,\n        isActive: true,\n      },\n      include: {\n        timelines: {\n          include: {\n            _count: {\n              select: { properties: true },\n            },\n            properties: {\n              include: {\n                feedback: true,\n              },\n            },\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    });\n\n    return clients.map((client) => {\n      const timeline = client.timelines[0]; // Each client has one timeline\n      return this.formatClientResponse(client, timeline);\n    });\n  }\n\n  async findOne(agentId: string, clientId: string): Promise<ClientResponseDto> {\n    const client = await this.prisma.client.findFirst({\n      where: {\n        id: clientId,\n        agentId, // Ensure agent owns this client\n      },\n      include: {\n        timelines: {\n          include: {\n            _count: {\n              select: { properties: true },\n            },\n          },\n        },\n      },\n    });\n\n    if (!client) {\n      throw new NotFoundException('Client not found');\n    }\n\n    const timeline = client.timelines[0];\n    return this.formatClientResponse(client, timeline);\n  }\n\n  async update(\n    agentId: string,\n    clientId: string,\n    updateClientDto: UpdateClientDto,\n  ): Promise<ClientResponseDto> {\n    // Verify ownership\n    const existingClient = await this.prisma.client.findFirst({\n      where: { id: clientId, agentId },\n    });\n\n    if (!existingClient) {\n      throw new NotFoundException('Client not found');\n    }\n\n    const updatedClient = await this.prisma.client.update({\n      where: { id: clientId },\n      data: updateClientDto,\n      include: {\n        timelines: {\n          include: {\n            _count: {\n              select: { properties: true },\n            },\n          },\n        },\n      },\n    });\n\n    const timeline = updatedClient.timelines[0];\n    return this.formatClientResponse(updatedClient, timeline);\n  }\n\n  async remove(\n    agentId: string,\n    clientId: string,\n  ): Promise<{ message: string }> {\n    // Verify ownership\n    const existingClient = await this.prisma.client.findFirst({\n      where: { id: clientId, agentId },\n    });\n\n    if (!existingClient) {\n      throw new NotFoundException('Client not found');\n    }\n\n    // Soft delete (set isActive to false)\n    await this.prisma.client.update({\n      where: { id: clientId },\n      data: { isActive: false },\n    });\n\n    return { message: 'Client deleted successfully' };\n  }\n\n  // 🔧 PRIVATE HELPER METHODS\n\n  // Helper method to parse name from frontend\n  private parseClientName(createClientDto: CreateClientDto) {\n    // If frontend sends combined name, split it\n    if (\n      createClientDto.name &&\n      !createClientDto.firstName &&\n      !createClientDto.lastName\n    ) {\n      const nameParts = createClientDto.name.trim().split(' ');\n      return {\n        firstName: nameParts[0] || '',\n        lastName: nameParts.slice(1).join(' ') || '',\n      };\n    }\n\n    // Otherwise use provided firstName/lastName\n    return {\n      firstName: createClientDto.firstName,\n      lastName: createClientDto.lastName,\n    };\n  }\n\n  // 🆕 UPDATED FORMAT METHOD - FRONTEND COMPATIBLE\n  private formatClientResponse(client: any, timeline?: any): ClientResponseDto {\n    // Calculate real engagement metrics\n    const totalProperties = timeline?._count?.properties || 0;\n    const propertiesWithFeedback =\n      timeline?.properties?.filter((p) => p.feedback && p.feedback.length > 0)\n        .length || 0;\n    const timelineViews = timeline?.totalViews || 0;\n\n    // Calculate actual feedback rate as percentage\n    const realFeedbackRate =\n      totalProperties > 0\n        ? (propertiesWithFeedback / totalProperties) * 100\n        : 0;\n\n    // Simple engagement score: just use feedback rate (0-100%)\n    const engagementScore = Math.round(realFeedbackRate);\n\n    // Determine status based on activity and engagement\n    const daysSinceLastActivity = client.lastActivity\n      ? Math.floor(\n          (Date.now() - new Date(client.lastActivity).getTime()) /\n            (1000 * 60 * 60 * 24),\n        )\n      : 999;\n\n    let status: 'active' | 'warm' | 'cold';\n    if (daysSinceLastActivity <= 7 && engagementScore >= 60) {\n      status = 'active';\n    } else if (daysSinceLastActivity <= 30 && engagementScore >= 30) {\n      status = 'warm';\n    } else {\n      status = 'cold';\n    }\n\n    // Generate client login code and share URL\n    const clientLoginCode = this.generateClientLoginCode(\n      client.firstName,\n      client.phone,\n    );\n    const shareUrl = timeline\n      ? this.appConfig.getTimelineShareUrl(timeline.shareToken, clientLoginCode)\n      : '';\n\n    return {\n      id: client.id,\n\n      // 🆕 FRONTEND-COMPATIBLE FIELDS\n      name: `${client.firstName} ${client.lastName}`.trim(),\n      email: client.email,\n      phone: client.phone || undefined,\n      avatar: client.avatar || undefined,\n      propertiesViewed: timeline?._count?.properties || 0,\n      lastActive: (client.lastActivity || client.createdAt).toISOString(),\n      engagementScore,\n      status,\n      createdAt: client.createdAt.toISOString(),\n\n      // 🆕 ENHANCED FIELDS - Using real calculated values\n      spouseEmail: client.spouseEmail || undefined,\n      totalViews: timelineViews, // Use timeline views instead of client views\n      avgResponseTime: 0, // TODO: Calculate real avg response time\n      feedbackRate: realFeedbackRate, // Use calculated percentage\n      lastActivity: client.lastActivity?.toISOString(),\n\n      // 🆕 BACKEND FIELDS\n      firstName: client.firstName,\n      lastName: client.lastName,\n      notes: client.notes || undefined,\n      isActive: client.isActive,\n      updatedAt: client.updatedAt.toISOString(),\n\n      // 🆕 TIMELINE DATA\n      timeline: timeline\n        ? {\n            id: timeline.id,\n            shareToken: timeline.shareToken,\n            isPublic: timeline.isActive,\n            shareUrl,\n            clientLoginCode,\n            totalViews: timeline.totalViews,\n            lastViewed: timeline.lastViewed?.toISOString(),\n            propertyCount: timeline._count?.properties || 0,\n          }\n        : undefined,\n    };\n  }\n\n  // Helper method to generate simple client login code\n  private generateClientLoginCode(firstName: string, phone?: string): string {\n    const cleanFirstName = firstName.replace(/[^a-zA-Z]/g, '').toLowerCase();\n\n    if (!phone) {\n      // If no phone, use first name + random 4 digits\n      const randomDigits = Math.floor(1000 + Math.random() * 9000);\n      return `${cleanFirstName}${randomDigits}`;\n    }\n\n    // Extract last 4 digits from phone\n    const digits = phone.replace(/[^\\d]/g, '');\n    const lastFourDigits = digits.slice(-4) || '0000';\n\n    return `${cleanFirstName}${lastFourDigits}`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\clients\\dto\\client-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\clients\\dto\\create-client.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\clients\\dto\\update-client.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\common\\decorators\\public.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\common\\filters\\http-exception.filter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\config\\app.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\config\\config.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\email\\email.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\email\\email.service.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":66,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":66,"endColumn":34,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1677,1677],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1677,1677],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":156,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":166,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":202,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":233,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":267,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":267,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":321,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":321,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":376,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":388,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":388,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":388,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":388,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":388,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":388,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":389,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":389,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `any` value.","line":389,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":389,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":393,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":393,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":393,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":393,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":394,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":394,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":394,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":394,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":395,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":395,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":395,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":395,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":404,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":404,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":404,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":404,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":405,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":405,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":405,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":405,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":406,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":406,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":413,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":413,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":413,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":413,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":414,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":414,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":414,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":414,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":415,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":415,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":415,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":415,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":416,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":416,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":417,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":417,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":423,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":423,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":451,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":451,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `SESTransport.SentMessageInfo | SMTPTransport.SentMessageInfo`.","line":456,"column":40,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":456,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":462,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":462,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messageId on an `any` value.","line":462,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":462,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":469,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":469,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":469,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":469,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":487,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":487,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":490,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":490,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messageId on an `any` value.","line":490,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":490,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":514,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":514,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":517,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":517,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messageId on an `any` value.","line":517,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":517,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":538,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":538,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":541,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":541,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messageId on an `any` value.","line":541,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":541,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":569,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":569,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `SESTransport.SentMessageInfo | SMTPTransport.SentMessageInfo`.","line":574,"column":40,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":574,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":580,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":580,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messageId on an `any` value.","line":580,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":580,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":607,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":607,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `SESTransport.SentMessageInfo | SMTPTransport.SentMessageInfo`.","line":612,"column":40,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":612,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":618,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":618,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messageId on an `any` value.","line":618,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":618,"endColumn":34}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ResendProvider } from './resend.provider';\nimport { EmailTemplateService } from './template.service';\nimport * as nodemailer from 'nodemailer';\n\nexport interface TimelineEmailData {\n  clientEmail: string;\n  clientName: string;\n  clientPhone?: string;\n  agentName: string;\n  agentCompany: string;\n  agentEmail?: string;\n  agentPhone?: string;\n  timelineUrl: string;\n  propertyCount: number;\n  spouseEmail?: string;\n  agentPhoto?: string;\n  companyLogo?: string;\n  brandColor?: string;\n  templateStyle?: 'modern' | 'classical';\n  emailType?: 'initial' | 'reminder';\n}\n\nexport interface PropertyNotificationData {\n  clientEmail: string;\n  clientName: string;\n  agentName: string;\n  propertyAddress: string;\n  propertyPrice: number;\n  propertyDescription: string;\n  propertyImageUrl: string;\n  timelineUrl: string;\n  spouseEmail?: string;\n}\n\nexport interface FeedbackReminderData {\n  clientEmail: string;\n  clientName: string;\n  agentName: string;\n  pendingPropertiesCount: number;\n  timelineUrl: string;\n  daysSinceLastActivity: number;\n}\n\nexport interface BatchImportNotificationData {\n  clientEmail: string;\n  clientName: string;\n  agentName: string;\n  propertyCount: number;\n  timelineUrl: string;\n  spouseEmail?: string;\n  propertyAddresses: string[];\n}\n\n@Injectable()\nexport class EmailService {\n  private readonly logger = new Logger(EmailService.name);\n  private transporter: nodemailer.Transporter;\n\n  constructor(\n    private configService: ConfigService,\n    private resendProvider: ResendProvider,\n    private templateService: EmailTemplateService,\n  ) {\n    this.initializeTransporter();\n  }\n\n  private async initializeTransporter() {\n    if (process.env.NODE_ENV === 'production') {\n      // Production email setup\n      this.transporter = nodemailer.createTransport({\n        host: this.configService.get('SMTP_HOST'),\n        port: 587,\n        secure: false,\n        auth: {\n          user: this.configService.get('SMTP_USER'),\n          pass: this.configService.get('SMTP_PASS'),\n        },\n      });\n    } else {\n      // Development: Use Ethereal Email (fake SMTP for testing)\n      const testAccount = await nodemailer.createTestAccount();\n\n      this.transporter = nodemailer.createTransport({\n        host: 'smtp.ethereal.email',\n        port: 587,\n        secure: false,\n        auth: {\n          user: testAccount.user,\n          pass: testAccount.pass,\n        },\n      });\n    }\n  }\n\n  // ENHANCED: Timeline Email with Resend Primary + Nodemailer Fallback\n  async sendTimelineEmail(data: TimelineEmailData): Promise<{\n    success: boolean;\n    messageId?: string;\n    provider?: string;\n    error?: string;\n  }> {\n    this.logger.log(\n      `Sending timeline email to ${data.clientEmail} via ${data.agentName}`,\n    );\n\n    // Try Resend first\n    try {\n      const resendResult = await this.resendProvider.sendTimelineEmail({\n        to: data.clientEmail,\n        clientName: data.clientName,\n        clientPhone: data.clientPhone,\n        agentName: data.agentName,\n        agentCompany: data.agentCompany,\n        agentEmail: data.agentEmail,\n        agentPhone: data.agentPhone,\n        timelineUrl: data.timelineUrl,\n        propertyCount: data.propertyCount,\n        spouseEmail: data.spouseEmail,\n        agentPhoto: data.agentPhoto,\n        brandColor: data.brandColor || '#3b82f6',\n        templateStyle: data.templateStyle || 'modern',\n      });\n\n      if (resendResult.error) {\n        this.logger.error(\n          `Resend email failed: ${JSON.stringify(resendResult.error)}`,\n        );\n\n        // Special handling for configuration errors\n        if (resendResult.error.includes('RESEND_API_KEY')) {\n          return {\n            success: false,\n            error: `Configuration Error: ${resendResult.error}`,\n          };\n        }\n\n        return {\n          success: false,\n          error: JSON.stringify(resendResult.error),\n        };\n      }\n\n      if ('data' in resendResult && resendResult.data?.id) {\n        this.logger.log(\n          `Timeline email sent successfully via Resend: ${resendResult.data.id}`,\n        );\n        return {\n          success: true,\n          messageId: resendResult.data.id,\n          provider: 'resend',\n        };\n      }\n    } catch (error) {\n      this.logger.warn(`Resend failed for timeline email: ${error.message}`);\n\n      // Check if we should fallback (network, rate limit, auth errors)\n      if (this.shouldFallbackToNodemailer(error)) {\n        this.logger.log('Attempting nodemailer fallback for timeline email...');\n        return await this.sendTimelineEmailViaNodemailer(data);\n      } else {\n        // If it's a non-recoverable error, don't fallback\n        return {\n          success: false,\n          error: `Resend failed: ${error.message}`,\n        };\n      }\n    }\n\n    // If Resend didn't return data but didn't throw, try fallback\n    this.logger.warn(\n      'Resend returned no data, attempting nodemailer fallback...',\n    );\n    return await this.sendTimelineEmailViaNodemailer(data);\n  }\n\n  // NEW: Property Update Notification\n  async sendPropertyNotification(\n    data: PropertyNotificationData,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    this.logger.log(\n      `Sending property notification to ${data.clientEmail} for ${data.propertyAddress}`,\n    );\n\n    try {\n      const resendResult =\n        await this.resendProvider.sendPropertyNotification(data);\n\n      if (resendResult.data?.id) {\n        this.logger.log(\n          `Property notification sent via Resend: ${resendResult.data.id}`,\n        );\n        return {\n          success: true,\n          messageId: resendResult.data.id,\n          provider: 'resend',\n        };\n      }\n    } catch (error) {\n      this.logger.warn(\n        `Resend failed for property notification: ${error.message}`,\n      );\n\n      if (this.shouldFallbackToNodemailer(error)) {\n        return await this.sendPropertyNotificationViaNodemailer(data);\n      }\n    }\n\n    return { success: false };\n  }\n\n  // NEW: Feedback Reminder Email\n  async sendFeedbackReminder(\n    data: FeedbackReminderData,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    this.logger.log(`Sending feedback reminder to ${data.clientEmail}`);\n\n    try {\n      const resendResult = await this.resendProvider.sendFeedbackReminder(data);\n\n      if (resendResult.data?.id) {\n        this.logger.log(\n          `Feedback reminder sent via Resend: ${resendResult.data.id}`,\n        );\n        return {\n          success: true,\n          messageId: resendResult.data.id,\n          provider: 'resend',\n        };\n      }\n    } catch (error) {\n      this.logger.warn(`Resend failed for feedback reminder: ${error.message}`);\n\n      if (this.shouldFallbackToNodemailer(error)) {\n        return await this.sendFeedbackReminderViaNodemailer(data);\n      }\n    }\n\n    return { success: false };\n  }\n\n  // NEW: Batch Import Notification Email\n  async sendBatchImportNotification(\n    data: BatchImportNotificationData,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    this.logger.log(\n      `Sending batch import notification to ${data.clientEmail} for ${data.propertyCount} properties`,\n    );\n\n    try {\n      const resendResult =\n        await this.resendProvider.sendBatchImportNotification(data);\n\n      if (resendResult.data?.id) {\n        this.logger.log(\n          `Batch import notification sent via Resend: ${resendResult.data.id}`,\n        );\n        return {\n          success: true,\n          messageId: resendResult.data.id,\n          provider: 'resend',\n        };\n      }\n    } catch (error) {\n      this.logger.warn(\n        `Resend failed for batch import notification: ${error.message}`,\n      );\n\n      if (this.shouldFallbackToNodemailer(error)) {\n        return await this.sendBatchImportNotificationViaNodemailer(data);\n      }\n    }\n\n    return { success: false };\n  }\n\n  // ENHANCED: Verification Email with Fallback\n  async sendVerificationEmail(\n    email: string,\n    firstName: string,\n    verificationToken: string,\n  ): Promise<{\n    success: boolean;\n    messageId?: string;\n    provider?: string;\n    error?: string;\n  }> {\n    this.logger.log(`Sending verification email to ${email}`);\n\n    // Try Resend first\n    try {\n      const resendResult = await this.resendProvider.sendVerificationEmail(\n        email,\n        firstName,\n        verificationToken,\n      );\n\n      if (resendResult.error) {\n        this.logger.error(\n          `Resend verification email failed: ${JSON.stringify(resendResult.error)}`,\n        );\n        return {\n          success: false,\n          error: JSON.stringify(resendResult.error),\n        };\n      }\n\n      if ('data' in resendResult && resendResult.data?.id) {\n        this.logger.log(\n          `Verification email sent via Resend: ${resendResult.data.id}`,\n        );\n        return {\n          success: true,\n          messageId: resendResult.data.id,\n          provider: 'resend',\n        };\n      }\n    } catch (error) {\n      this.logger.warn(\n        `Resend failed for verification email: ${error.message}`,\n      );\n\n      if (this.shouldFallbackToNodemailer(error)) {\n        return await this.sendVerificationEmailViaNodemailer(\n          email,\n          firstName,\n          verificationToken,\n        );\n      }\n    }\n\n    return { success: false };\n  }\n\n  // ENHANCED: Welcome Email with Fallback\n  async sendWelcomeEmail(\n    email: string,\n    firstName: string,\n  ): Promise<{\n    success: boolean;\n    messageId?: string;\n    provider?: string;\n    error?: string;\n  }> {\n    this.logger.log(`Sending welcome email to ${email}`);\n\n    // Try Resend first\n    try {\n      const resendResult = await this.resendProvider.sendWelcomeEmail(\n        email,\n        firstName,\n      );\n\n      if (resendResult.error) {\n        this.logger.error(\n          `Resend welcome email failed: ${JSON.stringify(resendResult.error)}`,\n        );\n        return {\n          success: false,\n          error: JSON.stringify(resendResult.error),\n        };\n      }\n\n      if ('data' in resendResult && resendResult.data?.id) {\n        this.logger.log(\n          `Welcome email sent via Resend: ${resendResult.data.id}`,\n        );\n        return {\n          success: true,\n          messageId: resendResult.data.id,\n          provider: 'resend',\n        };\n      }\n    } catch (error) {\n      this.logger.warn(`Resend failed for welcome email: ${error.message}`);\n\n      if (this.shouldFallbackToNodemailer(error)) {\n        return await this.sendWelcomeEmailViaNodemailer(email, firstName);\n      }\n    }\n\n    return { success: false };\n  }\n\n  // PRIVATE: Fallback Logic\n  private shouldFallbackToNodemailer(error: any): boolean {\n    const errorMessage = error?.message?.toLowerCase() || '';\n    const errorCode = error?.code;\n\n    // Network errors\n    if (\n      errorMessage.includes('network') ||\n      errorMessage.includes('timeout') ||\n      errorMessage.includes('connection') ||\n      errorCode === 'ENOTFOUND' ||\n      errorCode === 'ECONNREFUSED'\n    ) {\n      return true;\n    }\n\n    // Rate limiting\n    if (\n      errorMessage.includes('rate limit') ||\n      errorMessage.includes('too many requests') ||\n      error?.statusCode === 429\n    ) {\n      return true;\n    }\n\n    // Authentication issues\n    if (\n      errorMessage.includes('unauthorized') ||\n      errorMessage.includes('invalid api key') ||\n      errorMessage.includes('authentication') ||\n      error?.statusCode === 401 ||\n      error?.statusCode === 403\n    ) {\n      return true;\n    }\n\n    // Service unavailable\n    if (error?.statusCode >= 500) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE: Nodemailer Fallback Methods\n  private async sendTimelineEmailViaNodemailer(\n    data: TimelineEmailData,\n  ): Promise<{\n    success: boolean;\n    messageId?: string;\n    provider?: string;\n    error?: string;\n  }> {\n    try {\n      const mailOptions = {\n        from:\n          process.env.NODE_ENV === 'development'\n            ? 'Property Sync <onboarding@resend.dev>'\n            : 'Property Sync <noreply@property-sync.com>',\n        to: data.clientEmail,\n        subject: `Your Property Timeline from ${data.agentName}`,\n        html: this.generateTimelineEmailHtmlNodemailer(data),\n        text: this.generateTimelineEmailTextNodemailer(data),\n      };\n\n      const info = await this.transporter.sendMail(mailOptions);\n\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.log(\n          'Nodemailer Preview URL: %s',\n          nodemailer.getTestMessageUrl(info),\n        );\n      }\n\n      return {\n        success: true,\n        messageId: info.messageId,\n        provider: 'nodemailer',\n      };\n    } catch (error) {\n      this.logger.error('Nodemailer fallback failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        provider: 'nodemailer',\n      };\n    }\n  }\n\n  private async sendPropertyNotificationViaNodemailer(\n    data: PropertyNotificationData,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    try {\n      const mailOptions = {\n        from: '\"Property Sync\" <noreply@propertysync.com>',\n        to: data.clientEmail,\n        subject: `New Property Added: ${data.propertyAddress}`,\n        html: this.generatePropertyNotificationHtml(data),\n        text: `New Property Added!\\n\\n${data.agentName} has added a new property to your timeline:\\n\\n${data.propertyAddress}\\nPrice: $${data.propertyPrice.toLocaleString()}\\n\\n${data.propertyDescription}\\n\\nView your timeline: ${data.timelineUrl}`,\n      };\n\n      const info = await this.transporter.sendMail(mailOptions);\n      return {\n        success: true,\n        messageId: info.messageId,\n        provider: 'nodemailer',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Property notification nodemailer fallback failed:',\n        error,\n      );\n      return { success: false };\n    }\n  }\n\n  private async sendFeedbackReminderViaNodemailer(\n    data: FeedbackReminderData,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    try {\n      const mailOptions = {\n        from: '\"Property Sync\" <noreply@propertysync.com>',\n        to: data.clientEmail,\n        subject: `Feedback Requested: ${data.pendingPropertiesCount} Properties Await Your Response`,\n        html: this.generateFeedbackReminderHtml(data),\n        text: `Hi ${data.clientName}!\\n\\nYou have ${data.pendingPropertiesCount} properties waiting for your feedback from ${data.agentName}.\\n\\nIt's been ${data.daysSinceLastActivity} days since your last activity. Your input helps us find you the perfect home!\\n\\nView your timeline: ${data.timelineUrl}`,\n      };\n\n      const info = await this.transporter.sendMail(mailOptions);\n      return {\n        success: true,\n        messageId: info.messageId,\n        provider: 'nodemailer',\n      };\n    } catch (error) {\n      this.logger.error('Feedback reminder nodemailer fallback failed:', error);\n      return { success: false };\n    }\n  }\n\n  private async sendBatchImportNotificationViaNodemailer(\n    data: BatchImportNotificationData,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    try {\n      const mailOptions = {\n        from: '\"Property Sync\" <noreply@propertysync.com>',\n        to: data.clientEmail,\n        subject: `${data.propertyCount} New Properties Added to Your Timeline`,\n        html: this.generateBatchImportNotificationHtml(data),\n        text: `Hi ${data.clientName}!\\n\\n${data.agentName} has added ${data.propertyCount} new properties to your timeline:\\n\\n${data.propertyAddresses.map((addr, i) => `${i + 1}. ${addr}`).join('\\n')}\\n\\nView your updated timeline: ${data.timelineUrl}`,\n      };\n\n      const info = await this.transporter.sendMail(mailOptions);\n      return {\n        success: true,\n        messageId: info.messageId,\n        provider: 'nodemailer',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Batch import notification nodemailer fallback failed:',\n        error,\n      );\n      return { success: false };\n    }\n  }\n\n  private async sendVerificationEmailViaNodemailer(\n    email: string,\n    firstName: string,\n    verificationToken: string,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    const verificationUrl = `${this.configService.get('FRONTEND_URL') || 'http://localhost:3000'}/verify-email?token=${verificationToken}`;\n\n    const mailOptions = {\n      from: '\"Property Sync\" <noreply@propertysync.com>',\n      to: email,\n      subject: 'Welcome to Property Sync - Verify Your Email',\n      html: this.getVerificationEmailTemplate(firstName, verificationUrl),\n      text: `Hi ${firstName},\\n\\nWelcome to Property Sync! Please verify your email address by clicking the link below:\\n${verificationUrl}\\n\\nThis link will expire in 24 hours.\\n\\nBest regards,\\nThe Property Sync Team`,\n    };\n\n    try {\n      const info = await this.transporter.sendMail(mailOptions);\n\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.log(\n          'Verification Email Preview URL: %s',\n          nodemailer.getTestMessageUrl(info),\n        );\n      }\n\n      return {\n        success: true,\n        messageId: info.messageId,\n        provider: 'nodemailer',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Verification email nodemailer fallback failed:',\n        error,\n      );\n      return { success: false };\n    }\n  }\n\n  private async sendWelcomeEmailViaNodemailer(\n    email: string,\n    firstName: string,\n  ): Promise<{ success: boolean; messageId?: string; provider?: string }> {\n    const dashboardUrl = `${this.configService.get('FRONTEND_URL') || 'http://localhost:3000'}/dashboard`;\n\n    const mailOptions = {\n      from: '\"Property Sync\" <noreply@propertysync.com>',\n      to: email,\n      subject: '🎉 Welcome to Property Sync - Your Account is Ready!',\n      html: this.getWelcomeEmailTemplate(firstName, dashboardUrl),\n      text: `Hi ${firstName},\\n\\nYour Property Sync account is now verified and ready to use!\\n\\nGet started: ${dashboardUrl}\\n\\nBest regards,\\nThe Property Sync Team`,\n    };\n\n    try {\n      const info = await this.transporter.sendMail(mailOptions);\n\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.log(\n          'Welcome Email Preview URL: %s',\n          nodemailer.getTestMessageUrl(info),\n        );\n      }\n\n      return {\n        success: true,\n        messageId: info.messageId,\n        provider: 'nodemailer',\n      };\n    } catch (error) {\n      this.logger.error('Welcome email nodemailer fallback failed:', error);\n      return { success: false };\n    }\n  }\n\n  // PRIVATE: HTML Template Generators (Nodemailer versions)\n  private generateTimelineEmailHtmlNodemailer(data: TimelineEmailData): string {\n    const templateStyle = data.templateStyle || 'modern';\n    const emailType = data.emailType || 'initial';\n\n    // Use shared template service for consistent templates\n    return this.templateService.getTimelineTemplate(\n      {\n        to: data.clientEmail,\n        clientName: data.clientName,\n        clientPhone: data.clientPhone,\n        agentName: data.agentName,\n        agentCompany: data.agentCompany,\n        agentEmail: data.agentEmail,\n        agentPhone: data.agentPhone,\n        timelineUrl: data.timelineUrl,\n        propertyCount: data.propertyCount,\n        spouseEmail: data.spouseEmail,\n        agentPhoto: data.agentPhoto,\n        brandColor: data.brandColor,\n        templateStyle: templateStyle,\n      },\n      emailType,\n      templateStyle,\n    );\n  }\n\n  private generateTimelineEmailTextNodemailer(data: TimelineEmailData): string {\n    return `\n      Hi ${data.clientName}!\n\n      ${data.agentName} from ${data.agentCompany} has created a personalized property timeline just for you.\n\n      I've carefully selected ${data.propertyCount} properties that match your criteria.\n\n      View Your Properties: ${data.timelineUrl}\n\n      How it works:\n      - Browse each property at your own pace\n      - Leave feedback using the Love, Let's Talk, or Not for Me buttons\n      - Add your personal notes\n\n      Best regards,\n      ${data.agentName}\n      ${data.agentCompany}\n\n      Powered by Property Sync\n    `.trim();\n  }\n\n  private generatePropertyNotificationHtml(\n    data: PropertyNotificationData,\n  ): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head><meta charset=\"utf-8\"><title>New Property Added</title></head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n  <div style=\"text-align: center; padding: 30px 0; border-bottom: 3px solid #3b82f6;\">\n    <h1 style=\"color: #1e293b; margin: 0;\">New Property Added!</h1>\n    <p style=\"color: #64748b; margin: 10px 0 0 0;\">From ${data.agentName}</p>\n  </div>\n  \n  <div style=\"padding: 40px 20px;\">\n    <h2 style=\"color: #1e293b;\">Hi ${data.clientName}! 🏡</h2>\n    <p>I've added a new property to your timeline that I think you'll love:</p>\n    \n    <div style=\"background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 12px; padding: 20px; margin: 20px 0;\">\n      <img src=\"${data.propertyImageUrl}\" alt=\"${data.propertyAddress}\" style=\"width: 100%; height: 200px; object-fit: cover; border-radius: 8px; margin-bottom: 15px;\">\n      <h3 style=\"margin: 0 0 10px 0; color: #1e293b;\">${data.propertyAddress}</h3>\n      <p style=\"font-size: 24px; font-weight: bold; color: #059669; margin: 0 0 10px 0;\">$${data.propertyPrice.toLocaleString()}</p>\n      <p style=\"color: #64748b; margin: 0;\">${data.propertyDescription}</p>\n    </div>\n    \n    <div style=\"background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%); padding: 30px; border-radius: 12px; text-align: center; margin: 30px 0;\">\n      <h3 style=\"color: white; margin: 0 0 20px 0;\">View Your Timeline</h3>\n      <a href=\"${data.timelineUrl}\" style=\"display: inline-block; background: white; color: #3b82f6; padding: 15px 30px; border-radius: 8px; text-decoration: none; font-weight: bold;\">See All Properties →</a>\n    </div>\n  </div>\n</body>\n</html>`;\n  }\n\n  private generateFeedbackReminderHtml(data: FeedbackReminderData): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head><meta charset=\"utf-8\"><title>Feedback Requested</title></head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n  <div style=\"text-align: center; padding: 30px 0; border-bottom: 3px solid #f59e0b;\">\n    <h1 style=\"color: #1e293b; margin: 0;\">Your Feedback Awaited</h1>\n    <p style=\"color: #64748b; margin: 10px 0 0 0;\">From ${data.agentName}</p>\n  </div>\n  \n  <div style=\"padding: 40px 20px;\">\n    <h2 style=\"color: #1e293b;\">Hi ${data.clientName}! 💭</h2>\n    <p>You have <strong>${data.pendingPropertiesCount} properties</strong> waiting for your feedback.</p>\n    <p>It's been ${data.daysSinceLastActivity} days since your last activity. Your input helps me find you the perfect home!</p>\n    \n    <div style=\"background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%); padding: 30px; border-radius: 12px; text-align: center; margin: 30px 0;\">\n      <h3 style=\"color: white; margin: 0 0 20px 0;\">Share Your Thoughts</h3>\n      <a href=\"${data.timelineUrl}\" style=\"display: inline-block; background: white; color: #f59e0b; padding: 15px 30px; border-radius: 8px; text-decoration: none; font-weight: bold;\">Review Properties →</a>\n    </div>\n    \n    <div style=\"background: #fef3c7; padding: 20px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n      <p style=\"margin: 0; color: #92400e;\"><strong>Quick Reminder:</strong> Use the ❤️ Love, 💬 Let's Talk, or ❌ Not for Me buttons to let me know your thoughts on each property.</p>\n    </div>\n  </div>\n</body>\n</html>`;\n  }\n\n  private generateBatchImportNotificationHtml(\n    data: BatchImportNotificationData,\n  ): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head><meta charset=\"utf-8\"><title>New Properties Added</title></head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n  <div style=\"text-align: center; padding: 30px 0; border-bottom: 3px solid #22c55e;\">\n    <h1 style=\"color: #1e293b; margin: 0;\">${data.propertyCount} New Properties Added!</h1>\n    <p style=\"color: #64748b; margin: 10px 0 0 0;\">From ${data.agentName}</p>\n  </div>\n  \n  <div style=\"padding: 40px 20px;\">\n    <h2 style=\"color: #1e293b;\">Hi ${data.clientName}! 🏡</h2>\n    <p>Great news! I've added <strong>${data.propertyCount} new properties</strong> to your timeline that I think you'll love:</p>\n    \n    <div style=\"background: #f0fdf4; border: 1px solid #22c55e; border-radius: 12px; padding: 20px; margin: 20px 0;\">\n      <h3 style=\"margin: 0 0 15px 0; color: #1e293b;\">New Property Addresses:</h3>\n      <ul style=\"margin: 0; padding-left: 20px; color: #374151;\">\n        ${data.propertyAddresses.map((address) => `<li style=\"margin: 5px 0;\">${address}</li>`).join('')}\n      </ul>\n    </div>\n    \n    <div style=\"background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); padding: 30px; border-radius: 12px; text-align: center; margin: 30px 0;\">\n      <h3 style=\"color: white; margin: 0 0 20px 0;\">View Your Updated Timeline</h3>\n      <a href=\"${data.timelineUrl}\" style=\"display: inline-block; background: white; color: #22c55e; padding: 15px 30px; border-radius: 8px; text-decoration: none; font-weight: bold;\">See All Properties →</a>\n    </div>\n    \n    <div style=\"background: #ecfdf5; padding: 20px; border-radius: 8px; border-left: 4px solid #22c55e;\">\n      <p style=\"margin: 0; color: #166534;\"><strong>Next Steps:</strong> Browse each property and share your thoughts using the ❤️ Love, 💬 Let's Talk, or ❌ Not for Me buttons. Your feedback helps me find you the perfect home!</p>\n    </div>\n  </div>\n</body>\n</html>`;\n  }\n\n  // REMOVED: Duplicate timeline template methods (getModernTimelineTemplate, getClassicalTimelineTemplate)\n  // Now using shared EmailTemplateService for consistent templates across all providers\n\n  // Existing template methods remain the same\n  private getVerificationEmailTemplate(\n    firstName: string,\n    verificationUrl: string,\n  ): string {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email - Property Sync</title>\n      </head>\n      <body style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"text-align: center; padding: 40px 0; background: linear-gradient(135deg, #0ea5e9, #3b82f6); border-radius: 10px; margin-bottom: 30px;\">\n          <h1 style=\"color: white; margin: 0; font-size: 2.5em; font-weight: 900;\">Property Sync</h1>\n          <p style=\"color: #e0f2fe; margin: 10px 0 0 0; font-size: 1.1em;\">Mission Control for Real Estate</p>\n        </div>\n        \n        <div style=\"padding: 30px; background: #f8fafc; border-radius: 10px; border-left: 5px solid #0ea5e9;\">\n          <h2 style=\"color: #0ea5e9; margin-top: 0;\">Welcome aboard, ${firstName}!</h2>\n          <p style=\"font-size: 1.1em; margin: 20px 0;\">You're just one click away from accessing your Mission Control dashboard for real estate client management.</p>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${verificationUrl}\" style=\"background: #0ea5e9; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 1.1em; display: inline-block; box-shadow: 0 4px 6px rgba(14, 165, 233, 0.3);\">\n              Verify Email Address\n            </a>\n          </div>\n          \n          <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #334155; margin-top: 0;\">What's Next?</h3>\n            <ul style=\"color: #64748b; padding-left: 20px;\">\n              <li>Set up your agent profile and branding</li>\n              <li>Create your first client timeline</li>\n              <li>Add properties and share with clients</li>\n              <li>Watch the feedback roll in!</li>\n            </ul>\n          </div>\n          \n          <p style=\"color: #64748b; font-size: 0.9em; margin-top: 30px;\">\n            This verification link expires in 24 hours. If you didn't create this account, you can safely ignore this email.\n          </p>\n        </div>\n        \n        <div style=\"text-align: center; margin-top: 30px; padding: 20px; color: #94a3b8; font-size: 0.9em;\">\n          <p>Need help? Contact us at support@property-sync.com</p>\n          <p style=\"margin: 5px 0;\">Property Sync - Making Real Estate Simple</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private getWelcomeEmailTemplate(\n    firstName: string,\n    dashboardUrl: string,\n  ): string {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Welcome to Property Sync!</title>\n      </head>\n      <body style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"text-align: center; padding: 40px 0; background: linear-gradient(135deg, #10b981, #059669); border-radius: 10px; margin-bottom: 30px;\">\n          <h1 style=\"color: white; margin: 0; font-size: 2.5em;\">🎉</h1>\n          <h2 style=\"color: white; margin: 10px 0; font-size: 1.8em;\">You're All Set!</h2>\n        </div>\n        \n        <div style=\"padding: 30px; background: #f0fdf4; border-radius: 10px; border-left: 5px solid #10b981;\">\n          <h2 style=\"color: #059669; margin-top: 0;\">Welcome to Property Sync, ${firstName}!</h2>\n          <p style=\"font-size: 1.1em;\">Your email has been verified and your account is ready to go. Time to revolutionize how you manage your real estate clients!</p>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${dashboardUrl}\" style=\"background: #10b981; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 1.1em; display: inline-block; box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);\">\n              Launch Mission Control\n            </a>\n          </div>\n          \n          <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #334155; margin-top: 0;\">Quick Start Guide:</h3>\n            <ol style=\"color: #64748b; padding-left: 20px;\">\n              <li><strong>Customize your profile</strong> - Add your branding and company info</li>\n              <li><strong>Create your first client</strong> - We'll automatically generate their timeline</li>\n              <li><strong>Add properties</strong> - Upload property details and images</li>\n              <li><strong>Share the timeline</strong> - Send the simple login link to your client</li>\n              <li><strong>Get feedback</strong> - Watch as clients love, like, or pass on properties</li>\n            </ol>\n          </div>\n        </div>\n        \n        <div style=\"text-align: center; margin-top: 30px; padding: 20px; color: #94a3b8; font-size: 0.9em;\">\n          <p>Questions? We're here to help at support@property-sync.com</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\email\\resend.provider.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":254,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":330,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":330,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":330,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":330,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":333,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":333,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":333,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":384,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":384,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":384,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":384,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":387,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":387,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":387,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":442,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":442,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":442,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":442,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":445,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":445,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":445,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":445,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":489,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":489,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":489,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":489,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":492,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":492,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":492,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":492,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":797,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":797,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":797,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":797,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":800,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":800,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":800,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":800,"endColumn":37}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Replace your existing resend.provider.ts with this fixed version\n\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Resend } from 'resend';\nimport { EmailTemplateService } from './template.service';\n\nexport interface TimelineEmailData {\n  to: string;\n  clientName: string;\n  clientPhone?: string;\n  agentName: string;\n  agentCompany: string;\n  agentEmail?: string;\n  agentPhone?: string;\n  timelineUrl: string;\n  propertyCount: number;\n  spouseEmail?: string;\n  agentPhoto?: string;\n  companyLogo?: string;\n  brandColor?: string;\n  templateStyle?: 'modern' | 'classical';\n  emailType?: 'initial' | 'reminder';\n}\n\nexport interface PropertyNotificationData {\n  clientEmail: string;\n  clientName: string;\n  agentName: string;\n  propertyAddress: string;\n  propertyPrice: number;\n  propertyDescription: string;\n  propertyImageUrl: string;\n  timelineUrl: string;\n  spouseEmail?: string;\n}\n\nexport interface FeedbackReminderData {\n  clientEmail: string;\n  clientName: string;\n  agentName: string;\n  pendingPropertiesCount: number;\n  timelineUrl: string;\n  daysSinceLastActivity: number;\n}\n\nexport interface BatchImportNotificationData {\n  clientEmail: string;\n  clientName: string;\n  agentName: string;\n  propertyCount: number;\n  timelineUrl: string;\n  spouseEmail?: string;\n  propertyAddresses: string[];\n}\n\n@Injectable()\nexport class ResendProvider {\n  private readonly logger = new Logger(ResendProvider.name);\n  private resend: Resend | null;\n  private fromEmail: string;\n  private isDevelopment: boolean;\n\n  constructor(\n    private configService: ConfigService,\n    private templateService: EmailTemplateService,\n  ) {\n    const apiKey = this.configService.get<string>('RESEND_API_KEY');\n    this.isDevelopment = process.env.NODE_ENV === 'development';\n\n    // Enhanced logging for debugging\n    this.logger.log(`Environment: ${process.env.NODE_ENV || 'not set'}`);\n    this.logger.log(`API Key present: ${!!apiKey}`);\n    this.logger.log(`API Key length: ${apiKey?.length || 0}`);\n\n    if (!apiKey) {\n      this.logger.error(\n        'RESEND_API_KEY not found - email functionality disabled',\n      );\n      this.resend = null;\n      this.fromEmail = '';\n      return;\n    }\n\n    try {\n      this.resend = new Resend(apiKey);\n      this.fromEmail = this.isDevelopment\n        ? 'Property Sync <onboarding@resend.dev>'\n        : 'Property Sync <noreply@property-sync.com>';\n      this.logger.log('Resend client initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize Resend client:', error);\n      this.resend = null;\n      this.fromEmail = '';\n    }\n\n    if (this.isDevelopment) {\n      this.logger.warn(\n        'DEVELOPMENT MODE: Emails will be redirected to Resend test addresses',\n      );\n      this.logger.log(\n        'Test addresses will simulate real delivery without domain verification',\n      );\n    }\n  }\n\n  // FIXED: Redirect to test addresses in development\n  private redirectEmailForDevelopment(\n    originalEmail: string,\n    emailType: string = 'delivered',\n  ): string {\n    if (!this.isDevelopment) {\n      return originalEmail;\n    }\n\n    // Create a labeled test address for tracking\n    const emailPrefix = originalEmail\n      .split('@')[0]\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, '');\n    const testAddress = `${emailType}+${emailPrefix}@resend.dev`;\n\n    this.logger.warn(\n      `DEV MODE: Redirecting ${originalEmail} -> ${testAddress}`,\n    );\n    return testAddress;\n  }\n\n  async sendTimelineEmail(data: TimelineEmailData) {\n    if (!this.resend) {\n      this.logger.error(\n        'CRITICAL: RESEND_API_KEY not configured on Railway - cannot send emails',\n      );\n      this.logger.error(\n        'Please add RESEND_API_KEY environment variable to Railway deployment',\n      );\n      return {\n        success: false,\n        error:\n          'RESEND_API_KEY environment variable not configured on Railway deployment',\n      };\n    }\n    // Redirect emails in development mode\n    const redirectedTo = this.redirectEmailForDevelopment(data.to, 'delivered');\n    const redirectedSpouseEmail = data.spouseEmail\n      ? this.redirectEmailForDevelopment(data.spouseEmail, 'delivered')\n      : undefined;\n\n    this.logger.log(`Sending timeline email via Resend to ${redirectedTo}`);\n\n    const htmlContent = this.generateTimelineEmailHtml({\n      ...data,\n      to: redirectedTo,\n      spouseEmail: redirectedSpouseEmail,\n      // Add development indicator to content\n      clientName: this.isDevelopment\n        ? `${data.clientName} [DEV TEST]`\n        : data.clientName,\n    });\n\n    const textContent = this.generateTimelineEmailText({\n      ...data,\n      to: redirectedTo,\n      spouseEmail: redirectedSpouseEmail,\n      clientName: this.isDevelopment\n        ? `${data.clientName} [DEV TEST]`\n        : data.clientName,\n    });\n\n    try {\n      if (!this.resend) {\n        this.logger.error('Resend service not configured - cannot send email');\n        throw new Error('Resend service not configured');\n      }\n\n      this.logger.log('Attempting to send email via Resend API...');\n      this.logger.log(`From: ${this.fromEmail}`);\n      this.logger.log(`To: ${redirectedTo}`);\n\n      const result = await this.resend.emails.send({\n        from: this.fromEmail,\n        to: redirectedTo,\n        subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}🏠 ${data.propertyCount} Properties Selected for You - ${data.agentName}`,\n        html: htmlContent,\n        text: textContent,\n        headers: {\n          'X-Entity-Ref-ID': `timeline-${Date.now()}`,\n          ...(this.isDevelopment && { 'X-Original-Recipient': data.to }),\n        },\n      });\n\n      this.logger.log('Resend API response received');\n      this.logger.log(`Result type: ${typeof result}`);\n      this.logger.log(`Has error: ${!!result.error}`);\n      this.logger.log(`Has data: ${!!result.data}`);\n\n      if (result.error) {\n        this.logger.error(\n          'Resend API returned error:',\n          JSON.stringify(result.error, null, 2),\n        );\n        throw new Error(`Resend API error: ${JSON.stringify(result.error)}`);\n      }\n\n      if (result.data?.id) {\n        this.logger.log(\n          `Timeline email sent successfully via Resend: ${result.data.id}`,\n        );\n\n        if (this.isDevelopment) {\n          this.logger.log(`Original recipient: ${data.to}`);\n          this.logger.log(\n            'Check Resend dashboard at https://resend.com/emails for delivery status',\n          );\n        }\n\n        // Send to spouse if provided\n        if (redirectedSpouseEmail) {\n          if (!this.resend) {\n            throw new Error('Resend service not configured');\n          }\n          const spouseResult = await this.resend.emails.send({\n            from: this.fromEmail,\n            to: redirectedSpouseEmail,\n            subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}Property Timeline for ${data.clientName} from ${data.agentName}`,\n            html: htmlContent.replace(\n              new RegExp(data.clientName, 'g'),\n              `${data.clientName} and you`,\n            ),\n            text: textContent.replace(\n              new RegExp(data.clientName, 'g'),\n              `${data.clientName} and you`,\n            ),\n            headers: {\n              'X-Entity-Ref-ID': `timeline-spouse-${Date.now()}`,\n              ...(this.isDevelopment && {\n                'X-Original-Recipient': data.spouseEmail,\n              }),\n            },\n          });\n\n          if (spouseResult.data?.id) {\n            this.logger.log(\n              `Spouse timeline email sent successfully via Resend: ${spouseResult.data.id}`,\n            );\n          }\n        }\n      } else {\n        throw new Error('Resend returned no message ID');\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.error('Resend timeline email failed:', error.message);\n      throw error;\n    }\n  }\n\n  async sendPropertyNotification(data: PropertyNotificationData) {\n    // Redirect emails in development mode\n    const redirectedEmail = this.redirectEmailForDevelopment(\n      data.clientEmail,\n      'delivered',\n    );\n    const redirectedSpouseEmail = data.spouseEmail\n      ? this.redirectEmailForDevelopment(data.spouseEmail, 'delivered')\n      : undefined;\n\n    this.logger.log(\n      `Sending property notification via Resend to ${redirectedEmail}`,\n    );\n\n    const modifiedData = {\n      ...data,\n      clientEmail: redirectedEmail,\n      spouseEmail: redirectedSpouseEmail,\n      clientName: this.isDevelopment\n        ? `${data.clientName} [DEV TEST]`\n        : data.clientName,\n    };\n\n    const htmlContent = this.generatePropertyNotificationHtml(modifiedData);\n    const textContent = `New Property Added!\\n\\n${data.agentName} has added a new property to your timeline:\\n\\n${data.propertyAddress}\\nPrice: $${data.propertyPrice.toLocaleString()}\\n\\n${data.propertyDescription}\\n\\nView your timeline: ${data.timelineUrl}`;\n\n    try {\n      if (!this.resend) {\n        throw new Error('Resend service not configured');\n      }\n      const result = await this.resend.emails.send({\n        from: this.fromEmail,\n        to: redirectedEmail,\n        subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}New Property Added: ${data.propertyAddress}`,\n        html: htmlContent,\n        text: textContent,\n        headers: {\n          'X-Entity-Ref-ID': `property-notification-${Date.now()}`,\n          ...(this.isDevelopment && {\n            'X-Original-Recipient': data.clientEmail,\n          }),\n        },\n      });\n\n      this.logger.log(\n        `Property notification sent successfully via Resend: ${result.data?.id}`,\n      );\n\n      // Send to spouse if provided\n      if (redirectedSpouseEmail && this.resend) {\n        await this.resend.emails.send({\n          from: this.fromEmail,\n          to: redirectedSpouseEmail,\n          subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}New Property Added: ${data.propertyAddress}`,\n          html: htmlContent,\n          text: textContent,\n          headers: {\n            'X-Entity-Ref-ID': `property-notification-spouse-${Date.now()}`,\n            ...(this.isDevelopment && {\n              'X-Original-Recipient': data.spouseEmail,\n            }),\n          },\n        });\n        this.logger.log(\n          `Spouse property notification sent successfully via Resend`,\n        );\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.error('Resend property notification failed:', {\n        error: error.message,\n        to: redirectedEmail,\n        from: this.fromEmail,\n        statusCode: error.statusCode,\n      });\n      throw error;\n    }\n  }\n\n  async sendFeedbackReminder(data: FeedbackReminderData) {\n    const redirectedEmail = this.redirectEmailForDevelopment(\n      data.clientEmail,\n      'delivered',\n    );\n\n    this.logger.log(\n      `Sending feedback reminder via Resend to ${redirectedEmail}`,\n    );\n\n    const modifiedData = {\n      ...data,\n      clientEmail: redirectedEmail,\n      clientName: this.isDevelopment\n        ? `${data.clientName} [DEV TEST]`\n        : data.clientName,\n    };\n\n    const htmlContent = this.generateFeedbackReminderHtml(modifiedData);\n    const textContent = `Hi ${data.clientName}!\\n\\nYou have ${data.pendingPropertiesCount} properties waiting for your feedback from ${data.agentName}.\\n\\nIt's been ${data.daysSinceLastActivity} days since your last activity. Your input helps us find you the perfect home!\\n\\nView your timeline: ${data.timelineUrl}`;\n\n    try {\n      if (!this.resend) {\n        throw new Error('Resend service not configured');\n      }\n      const result = await this.resend.emails.send({\n        from: this.fromEmail,\n        to: redirectedEmail,\n        subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}Feedback Requested: ${data.pendingPropertiesCount} Properties Await Your Response`,\n        html: htmlContent,\n        text: textContent,\n        headers: {\n          'X-Entity-Ref-ID': `feedback-reminder-${Date.now()}`,\n          ...(this.isDevelopment && {\n            'X-Original-Recipient': data.clientEmail,\n          }),\n        },\n      });\n\n      this.logger.log(\n        `Feedback reminder sent successfully via Resend: ${result.data?.id}`,\n      );\n      return result;\n    } catch (error) {\n      this.logger.error('Resend feedback reminder failed:', {\n        error: error.message,\n        to: redirectedEmail,\n        from: this.fromEmail,\n        statusCode: error.statusCode,\n      });\n      throw error;\n    }\n  }\n\n  async sendVerificationEmail(\n    email: string,\n    firstName: string,\n    verificationToken: string,\n  ) {\n    if (!this.resend) {\n      this.logger.warn(\n        'Email service not configured - skipping verification email',\n      );\n      return { success: false, error: 'Email service not configured' };\n    }\n    const redirectedEmail = this.redirectEmailForDevelopment(\n      email,\n      'delivered',\n    );\n\n    this.logger.log(\n      `Sending verification email via Resend to ${redirectedEmail}`,\n    );\n\n    const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/verify-email?token=${verificationToken}`;\n    const htmlContent = this.getVerificationEmailTemplate(\n      firstName,\n      verificationUrl,\n    );\n    const textContent = `Hi ${firstName},\\n\\nWelcome to Property Sync! Please verify your email address by clicking the link below:\\n${verificationUrl}\\n\\nThis link will expire in 24 hours.\\n\\nBest regards,\\nThe Property Sync Team`;\n\n    try {\n      if (!this.resend) {\n        throw new Error('Resend service not configured');\n      }\n      const result = await this.resend.emails.send({\n        from: this.fromEmail,\n        to: redirectedEmail,\n        subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}Welcome to Property Sync - Verify Your Email`,\n        html: htmlContent,\n        text: textContent,\n        headers: {\n          'X-Entity-Ref-ID': `verification-${Date.now()}`,\n          ...(this.isDevelopment && { 'X-Original-Recipient': email }),\n        },\n      });\n\n      this.logger.log(\n        `Verification email sent successfully via Resend: ${result.data?.id}`,\n      );\n      return result;\n    } catch (error) {\n      this.logger.error('Resend verification email failed:', {\n        error: error.message,\n        to: redirectedEmail,\n        from: this.fromEmail,\n        statusCode: error.statusCode,\n      });\n      throw error;\n    }\n  }\n\n  async sendWelcomeEmail(email: string, firstName: string) {\n    if (!this.resend) {\n      this.logger.warn('Email service not configured - skipping welcome email');\n      return { success: false, error: 'Email service not configured' };\n    }\n    const redirectedEmail = this.redirectEmailForDevelopment(\n      email,\n      'delivered',\n    );\n\n    this.logger.log(`Sending welcome email via Resend to ${redirectedEmail}`);\n\n    const dashboardUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/dashboard`;\n    const htmlContent = this.getWelcomeEmailTemplate(firstName, dashboardUrl);\n    const textContent = `Hi ${firstName},\\n\\nYour Property Sync account is now verified and ready to use!\\n\\nGet started: ${dashboardUrl}\\n\\nBest regards,\\nThe Property Sync Team`;\n\n    try {\n      if (!this.resend) {\n        throw new Error('Resend service not configured');\n      }\n      const result = await this.resend.emails.send({\n        from: this.fromEmail,\n        to: redirectedEmail,\n        subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}Welcome to Property Sync - Your Account is Ready!`,\n        html: htmlContent,\n        text: textContent,\n        headers: {\n          'X-Entity-Ref-ID': `welcome-${Date.now()}`,\n          ...(this.isDevelopment && { 'X-Original-Recipient': email }),\n        },\n      });\n\n      this.logger.log(\n        `Welcome email sent successfully via Resend: ${result.data?.id}`,\n      );\n      return result;\n    } catch (error) {\n      this.logger.error('Resend welcome email failed:', {\n        error: error.message,\n        to: redirectedEmail,\n        from: this.fromEmail,\n        statusCode: error.statusCode,\n      });\n      throw error;\n    }\n  }\n\n  // Keep all your existing template methods exactly as they are\n  private generateTimelineEmailHtml(data: TimelineEmailData): string {\n    const templateStyle = data.templateStyle || 'modern';\n    const emailType = data.emailType || 'initial';\n\n    // DEBUG: Log template generation\n    console.log('📧 Email Template Generation Debug:', {\n      requestedTemplate: data.templateStyle,\n      finalTemplate: templateStyle,\n      emailType: emailType,\n      willUseClassical: templateStyle === 'classical',\n      clientName: data.clientName,\n    });\n\n    return this.templateService.getTimelineTemplate(\n      data,\n      emailType,\n      templateStyle,\n    );\n  }\n\n  private generateTimelineEmailText(data: TimelineEmailData): string {\n    const firstName = data.clientName.split(' ')[0];\n    const clientPhone = data.clientPhone || 'your phone number';\n    const last4Digits =\n      clientPhone.length >= 4 ? clientPhone.slice(-4) : '****';\n\n    return `\n🏠 YOUR PERSONAL PROPERTY TIMELINE - ${data.propertyCount} PROPERTIES SELECTED FOR YOU\n\nHi ${data.clientName}!\n\n${data.agentName} from ${data.agentCompany} has personally selected ${data.propertyCount} exceptional properties that perfectly match your criteria and preferences. Each home has been chosen specifically with your needs in mind.\n\n🔑 QUICK ACCESS INSTRUCTIONS:\nLogin Details: Use your first name and last 4 digits of your phone number\nUsername: ${firstName}\nPassword: ${last4Digits}\n\n📋 STEP-BY-STEP GUIDE:\n1. Click the link below to open your personalized property portal\n2. Enter your login details (${firstName} / ${last4Digits}) when prompted\n3. Browse each property with detailed photos, descriptions, and pricing\n4. Share your feedback using Love It! ❤️, Let's Talk 💬, or Not for Me ❌ buttons\n\nVIEW YOUR ${data.propertyCount} PROPERTIES: ${data.timelineUrl}\n\nReady to discuss your next move?\n${data.agentEmail ? `📧 Email: ${data.agentEmail}` : ''}\n${data.agentPhone ? `📱 Phone: ${data.agentPhone}` : ''}\n\nBest regards,\n${data.agentName}\n${data.agentCompany}\n⭐ REALTOR®\n\nPowered by Property Sync - Making real estate personal\n    `.trim();\n  }\n\n  // ... keep all your existing template methods unchanged ...\n  // (generatePropertyNotificationHtml, generateFeedbackReminderHtml, getModernTimelineTemplate, etc.)\n\n  private generatePropertyNotificationHtml(\n    data: PropertyNotificationData,\n  ): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head><meta charset=\"utf-8\"><title>New Property Added</title></head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n  <div style=\"text-align: center; padding: 30px 0; border-bottom: 3px solid #3b82f6;\">\n    <h1 style=\"color: #1e293b; margin: 0;\">New Property Added!</h1>\n    <p style=\"color: #64748b; margin: 10px 0 0 0;\">From ${data.agentName}</p>\n  </div>\n  \n  <div style=\"padding: 40px 20px;\">\n    <h2 style=\"color: #1e293b;\">Hi ${data.clientName}!</h2>\n    <p>I've added a new property to your timeline that I think you'll love:</p>\n    \n    <div style=\"background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 12px; padding: 20px; margin: 20px 0;\">\n      <img src=\"${data.propertyImageUrl}\" alt=\"${data.propertyAddress}\" style=\"width: 100%; height: 200px; object-fit: cover; border-radius: 8px; margin-bottom: 15px;\">\n      <h3 style=\"margin: 0 0 10px 0; color: #1e293b;\">${data.propertyAddress}</h3>\n      <p style=\"font-size: 24px; font-weight: bold; color: #059669; margin: 0 0 10px 0;\">$${data.propertyPrice.toLocaleString()}</p>\n      <p style=\"color: #64748b; margin: 0;\">${data.propertyDescription}</p>\n    </div>\n    \n    <div style=\"background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%); padding: 30px; border-radius: 12px; text-align: center; margin: 30px 0;\">\n      <h3 style=\"color: white; margin: 0 0 20px 0;\">View Your Timeline</h3>\n      <a href=\"${data.timelineUrl}\" style=\"display: inline-block; background: white; color: #3b82f6; padding: 15px 30px; border-radius: 8px; text-decoration: none; font-weight: bold;\">See All Properties</a>\n    </div>\n  </div>\n  \n  <div style=\"border-top: 2px solid #e2e8f0; padding: 20px; background: #f8fafc; text-align: center;\">\n    <p style=\"margin: 0; color: #64748b; font-size: 12px;\">Powered by Property Sync</p>\n  </div>\n</body>\n</html>`;\n  }\n\n  private generateFeedbackReminderHtml(data: FeedbackReminderData): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head><meta charset=\"utf-8\"><title>Feedback Requested</title></head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n  <div style=\"text-align: center; padding: 30px 0; border-bottom: 3px solid #f59e0b;\">\n    <h1 style=\"color: #1e293b; margin: 0;\">Your Feedback Awaited</h1>\n    <p style=\"color: #64748b; margin: 10px 0 0 0;\">From ${data.agentName}</p>\n  </div>\n  \n  <div style=\"padding: 40px 20px;\">\n    <h2 style=\"color: #1e293b;\">Hi ${data.clientName}!</h2>\n    <p>You have <strong>${data.pendingPropertiesCount} properties</strong> waiting for your feedback.</p>\n    <p>It's been ${data.daysSinceLastActivity} days since your last activity. Your input helps me find you the perfect home!</p>\n    \n    <div style=\"background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%); padding: 30px; border-radius: 12px; text-align: center; margin: 30px 0;\">\n      <h3 style=\"color: white; margin: 0 0 20px 0;\">Share Your Thoughts</h3>\n      <a href=\"${data.timelineUrl}\" style=\"display: inline-block; background: white; color: #f59e0b; padding: 15px 30px; border-radius: 8px; text-decoration: none; font-weight: bold;\">Review Properties</a>\n    </div>\n    \n    <div style=\"background: #fef3c7; padding: 20px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n      <p style=\"margin: 0; color: #92400e;\"><strong>Quick Reminder:</strong> Use the Love, Let's Talk, or Not for Me buttons to let me know your thoughts on each property.</p>\n    </div>\n  </div>\n  \n  <div style=\"border-top: 2px solid #e2e8f0; padding: 20px; background: #f8fafc; text-align: center;\">\n    <p style=\"margin: 0; color: #64748b; font-size: 12px;\">Powered by Property Sync</p>\n  </div>\n</body>\n</html>`;\n  }\n\n  private getVerificationEmailTemplate(\n    firstName: string,\n    verificationUrl: string,\n  ): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Welcome to Property Sync - Verify Your Email</title>\n</head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; background: #f8fafc;\">\n  <!-- Header -->\n  <div style=\"text-align: center; padding: 40px 20px; background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%); border-radius: 20px; margin-bottom: 30px; position: relative; overflow: hidden;\">\n    <!-- Decorative elements -->\n    <div style=\"position: absolute; top: -20px; right: -20px; width: 80px; height: 80px; background: rgba(255,255,255,0.1); border-radius: 50%;\"></div>\n    <div style=\"position: absolute; bottom: -30px; left: -30px; width: 60px; height: 60px; background: rgba(255,255,255,0.1); border-radius: 50%;\"></div>\n    \n    <div style=\"position: relative; z-index: 10;\">\n      <h1 style=\"color: white; margin: 0; font-size: 2.8em; font-weight: 900; text-shadow: 0 2px 4px rgba(0,0,0,0.3);\">🏠 Property Sync</h1>\n      <p style=\"color: rgba(255,255,255,0.95); margin: 15px 0 0 0; font-size: 1.3em; font-weight: 500;\">Mission Control for Real Estate</p>\n    </div>\n  </div>\n  \n  <!-- Main Content -->\n  <div style=\"background: white; padding: 40px 30px; border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); margin-bottom: 20px;\">\n    <div style=\"text-align: center; margin-bottom: 35px;\">\n      <h2 style=\"color: #1e293b; font-size: 2.2em; margin: 0 0 20px 0;\">Welcome aboard, ${firstName}! 🎉</h2>\n      <div style=\"background: linear-gradient(135deg, #10b981 0%, #059669 100%); padding: 25px; border-radius: 16px; margin: 25px 0;\">\n        <p style=\"color: white; font-size: 1.3em; font-weight: 600; margin: 0; text-shadow: 0 1px 2px rgba(0,0,0,0.2);\">\n          🚀 Property Sync will revolutionize how your clients experience their home-buying journey. \n          Turn every property search into an engaging, personalized story that converts browsers into buyers!\n        </p>\n      </div>\n    </div>\n    \n    <!-- Verification Section -->\n    <div style=\"background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%); padding: 30px; border-radius: 16px; border-left: 6px solid #f59e0b; margin: 30px 0; text-align: center;\">\n      <div style=\"margin-bottom: 25px;\">\n        <div style=\"width: 80px; height: 80px; background: #f59e0b; border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center; box-shadow: 0 8px 25px rgba(245, 158, 11, 0.4);\">\n          <span style=\"font-size: 36px; color: white;\">📧</span>\n        </div>\n        <h3 style=\"color: #92400e; margin: 0 0 15px 0; font-size: 1.4em;\">Let's Verify Your Email</h3>\n        <p style=\"color: #b45309; margin: 0 0 25px 0; font-size: 1.1em;\">Click the button below to activate your account and start transforming your real estate business!</p>\n      </div>\n      \n      <a href=\"${verificationUrl}\" style=\"display: inline-block; background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%); color: white; padding: 18px 40px; border-radius: 50px; text-decoration: none; font-weight: 800; font-size: 1.2em; box-shadow: 0 8px 25px rgba(249, 115, 22, 0.4); text-shadow: 0 1px 2px rgba(0,0,0,0.2);\">\n        ✨ Verify My Email & Get Started\n      </a>\n      \n      <p style=\"color: #b45309; margin: 20px 0 0 0; font-size: 0.9em;\">⏰ This verification link expires in 24 hours</p>\n    </div>\n    \n    <!-- What's Next Section -->\n    <div style=\"background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); padding: 30px; border-radius: 16px; border-left: 6px solid #22c55e; margin: 30px 0;\">\n      <h3 style=\"color: #166534; margin: 0 0 20px 0; font-size: 1.4em; display: flex; align-items: center; gap: 10px;\">\n        <span>🎯</span> What's Next - Your Success Journey:\n      </h3>\n      <div style=\"display: grid; gap: 15px;\">\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <span style=\"width: 30px; height: 30px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 14px; flex-shrink: 0;\">1</span>\n          <span style=\"color: #166534; font-size: 1.1em;\"><strong>Set up your profile</strong> with branding and company info</span>\n        </div>\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <span style=\"width: 30px; height: 30px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 14px; flex-shrink: 0;\">2</span>\n          <span style=\"color: #166534; font-size: 1.1em;\"><strong>Create your first client</strong> and their personalized timeline</span>\n        </div>\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <span style=\"width: 30px; height: 30px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 14px; flex-shrink: 0;\">3</span>\n          <span style=\"color: #166534; font-size: 1.1em;\"><strong>Add properties</strong> with stunning visuals and details</span>\n        </div>\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <span style=\"width: 30px; height: 30px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 14px; flex-shrink: 0;\">4</span>\n          <span style=\"color: #166534; font-size: 1.1em;\"><strong>Share the magic</strong> and watch client engagement soar!</span>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Troubleshooting -->\n    <div style=\"background: #f1f5f9; padding: 20px; border-radius: 12px; margin: 25px 0;\">\n      <h4 style=\"color: #475569; margin: 0 0 10px 0; font-size: 1.1em;\">Having trouble with the button?</h4>\n      <p style=\"color: #64748b; margin: 0; font-size: 0.95em;\">Copy and paste this link in your browser:</p>\n      <p style=\"color: #3b82f6; font-family: monospace; word-break: break-all; background: white; padding: 10px; border-radius: 6px; margin: 8px 0 0 0; font-size: 0.9em;\">${verificationUrl}</p>\n    </div>\n  </div>\n  \n  <!-- Footer -->\n  <div style=\"text-align: center; padding: 20px; color: #94a3b8; font-size: 0.9em;\">\n    <p style=\"margin: 0 0 10px 0;\">Questions? We're here to help at <a href=\"mailto:support@property-sync.com\" style=\"color: #3b82f6;\">support@property-sync.com</a></p>\n    <p style=\"margin: 0;\">Property Sync - Transforming Real Estate, One Client at a Time 🏡</p>\n  </div>\n</body>\n</html>`;\n  }\n\n  async sendBatchImportNotification(data: BatchImportNotificationData) {\n    const redirectedEmail = this.redirectEmailForDevelopment(\n      data.clientEmail,\n      'delivered',\n    );\n    const redirectedSpouseEmail = data.spouseEmail\n      ? this.redirectEmailForDevelopment(data.spouseEmail, 'delivered')\n      : undefined;\n\n    this.logger.log(\n      `Sending batch import notification via Resend to ${redirectedEmail}`,\n    );\n\n    const modifiedData = {\n      ...data,\n      clientEmail: redirectedEmail,\n      spouseEmail: redirectedSpouseEmail,\n      clientName: this.isDevelopment\n        ? `${data.clientName} [DEV TEST]`\n        : data.clientName,\n    };\n\n    const htmlContent = this.generateBatchImportNotificationHtml(modifiedData);\n    const textContent = `New Properties Added!\\n\\n${data.agentName} has added ${data.propertyCount} new properties to your timeline:\\n\\n${data.propertyAddresses.join('\\n')}\\n\\nView your timeline: ${data.timelineUrl}`;\n\n    try {\n      if (!this.resend) {\n        throw new Error('Resend service not configured');\n      }\n      const result = await this.resend.emails.send({\n        from: this.fromEmail,\n        to: redirectedEmail,\n        subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}${data.propertyCount} New Properties Added to Your Timeline`,\n        html: htmlContent,\n        text: textContent,\n        headers: {\n          'X-Entity-Ref-ID': `batch-import-${Date.now()}`,\n          ...(this.isDevelopment && {\n            'X-Original-Recipient': data.clientEmail,\n          }),\n        },\n      });\n\n      this.logger.log(\n        `Batch import notification sent successfully via Resend: ${result.data?.id}`,\n      );\n\n      // Send to spouse if provided\n      if (redirectedSpouseEmail && this.resend) {\n        await this.resend.emails.send({\n          from: this.fromEmail,\n          to: redirectedSpouseEmail,\n          subject: `${this.isDevelopment ? '[DEV TEST] ' : ''}${data.propertyCount} New Properties Added to Your Timeline`,\n          html: htmlContent,\n          text: textContent,\n          headers: {\n            'X-Entity-Ref-ID': `batch-import-spouse-${Date.now()}`,\n            ...(this.isDevelopment && {\n              'X-Original-Recipient': data.spouseEmail,\n            }),\n          },\n        });\n        this.logger.log(\n          `Spouse batch import notification sent successfully via Resend`,\n        );\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.error('Resend batch import notification failed:', {\n        error: error.message,\n        to: redirectedEmail,\n        from: this.fromEmail,\n        statusCode: error.statusCode,\n      });\n      throw error;\n    }\n  }\n\n  private generateBatchImportNotificationHtml(\n    data: BatchImportNotificationData,\n  ): string {\n    const propertyList = data.propertyAddresses\n      .map(\n        (address) =>\n          `<li style=\"padding: 8px 0; border-bottom: 1px solid #e2e8f0;\">${address}</li>`,\n      )\n      .join('');\n\n    return `\n<!DOCTYPE html>\n<html>\n<head><meta charset=\"utf-8\"><title>New Properties Added</title></head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n  <div style=\"text-align: center; padding: 30px 0; border-bottom: 3px solid #10b981;\">\n    <h1 style=\"color: #1e293b; margin: 0;\">${data.propertyCount} New Properties Added!</h1>\n    <p style=\"color: #64748b; margin: 10px 0 0 0;\">From ${data.agentName}</p>\n  </div>\n  \n  <div style=\"padding: 40px 20px;\">\n    <h2 style=\"color: #1e293b;\">Hi ${data.clientName}!</h2>\n    <p>I've added <strong>${data.propertyCount} new properties</strong> to your timeline that I think you'll love:</p>\n    \n    <div style=\"background: #f0fdf4; border: 1px solid #bbf7d0; border-radius: 12px; padding: 20px; margin: 20px 0;\">\n      <h3 style=\"margin: 0 0 15px 0; color: #166534;\">New Properties:</h3>\n      <ul style=\"margin: 0; padding: 0; list-style: none;\">\n        ${propertyList}\n      </ul>\n    </div>\n    \n    <div style=\"background: linear-gradient(135deg, #10b981 0%, #059669 100%); padding: 30px; border-radius: 12px; text-align: center; margin: 30px 0;\">\n      <h3 style=\"color: white; margin: 0 0 20px 0;\">Review Your New Properties</h3>\n      <a href=\"${data.timelineUrl}\" style=\"display: inline-block; background: white; color: #10b981; padding: 15px 30px; border-radius: 8px; text-decoration: none; font-weight: bold;\">View Timeline</a>\n    </div>\n    \n    <div style=\"background: #ecfdf5; padding: 20px; border-radius: 8px; border-left: 4px solid #10b981;\">\n      <p style=\"margin: 0; color: #166534;\"><strong>What's Next:</strong> Browse each property, leave feedback using the Love, Let's Talk, or Not for Me buttons, and add your personal notes.</p>\n    </div>\n  </div>\n  \n  <div style=\"border-top: 2px solid #e2e8f0; padding: 20px; background: #f8fafc; text-align: center;\">\n    <p style=\"margin: 0; color: #64748b; font-size: 12px;\">Powered by Property Sync</p>\n  </div>\n</body>\n</html>`;\n  }\n\n  private getWelcomeEmailTemplate(\n    firstName: string,\n    dashboardUrl: string,\n  ): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>🎉 Welcome to Property Sync - You're Ready!</title>\n</head>\n<body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; background: #f8fafc;\">\n  <!-- Header -->\n  <div style=\"text-align: center; padding: 40px 20px; background: linear-gradient(135deg, #10b981 0%, #059669 100%); border-radius: 20px; margin-bottom: 30px; position: relative; overflow: hidden;\">\n    <!-- Decorative elements -->\n    <div style=\"position: absolute; top: -30px; right: -30px; width: 100px; height: 100px; background: rgba(255,255,255,0.1); border-radius: 50%;\"></div>\n    <div style=\"position: absolute; bottom: -40px; left: -40px; width: 80px; height: 80px; background: rgba(255,255,255,0.1); border-radius: 50%;\"></div>\n    \n    <div style=\"position: relative; z-index: 10;\">\n      <div style=\"font-size: 4em; margin-bottom: 20px;\">🎉</div>\n      <h1 style=\"color: white; margin: 0; font-size: 2.6em; font-weight: 900; text-shadow: 0 2px 4px rgba(0,0,0,0.3);\">You're All Set!</h1>\n      <p style=\"color: rgba(255,255,255,0.95); margin: 15px 0 0 0; font-size: 1.3em; font-weight: 500;\">Welcome to the future of real estate</p>\n    </div>\n  </div>\n  \n  <!-- Main Content -->\n  <div style=\"background: white; padding: 40px 30px; border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); margin-bottom: 20px;\">\n    <div style=\"text-align: center; margin-bottom: 35px;\">\n      <h2 style=\"color: #1e293b; font-size: 2.2em; margin: 0 0 20px 0;\">Welcome to Property Sync, ${firstName}! 🚀</h2>\n      \n      <!-- Success Message -->\n      <div style=\"background: linear-gradient(135deg, #10b981 0%, #059669 100%); padding: 30px; border-radius: 16px; margin: 25px 0; text-align: center;\">\n        <div style=\"margin-bottom: 20px;\">\n          <div style=\"width: 80px; height: 80px; background: rgba(255,255,255,0.2); border-radius: 50%; margin: 0 auto 15px; display: flex; align-items: center; justify-content: center; box-shadow: 0 8px 25px rgba(0,0,0,0.2);\">\n            <span style=\"font-size: 36px; color: white;\">✅</span>\n          </div>\n          <h3 style=\"color: white; margin: 0; font-size: 1.6em; font-weight: 800; text-shadow: 0 1px 2px rgba(0,0,0,0.2);\">Your Account is Verified & Ready!</h3>\n        </div>\n        <p style=\"color: rgba(255,255,255,0.95); font-size: 1.2em; margin: 0;\">Time to revolutionize how you manage your real estate clients and transform their home-buying experience!</p>\n      </div>\n    </div>\n    \n    <!-- Call to Action -->\n    <div style=\"text-align: center; margin: 40px 0;\">\n      <a href=\"${dashboardUrl}\" style=\"display: inline-block; background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 20px 45px; border-radius: 50px; text-decoration: none; font-weight: 800; font-size: 1.3em; box-shadow: 0 10px 30px rgba(16, 185, 129, 0.4); text-shadow: 0 1px 2px rgba(0,0,0,0.2); transform: translateY(0); transition: all 0.3s ease;\">\n        🏡 Launch My Mission Control\n      </a>\n      \n      <p style=\"color: #64748b; margin: 20px 0 0 0; font-size: 1em;\">Your personalized dashboard awaits ⚡</p>\n    </div>\n    \n    <!-- Quick Start Guide -->\n    <div style=\"background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); padding: 30px; border-radius: 16px; border-left: 6px solid #22c55e; margin: 30px 0;\">\n      <h3 style=\"color: #166534; margin: 0 0 25px 0; font-size: 1.5em; text-align: center;\">🚀 Your 4-Step Success Journey</h3>\n      <div style=\"display: grid; gap: 20px;\">\n        <div style=\"background: white; padding: 20px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\n          <div style=\"display: flex; align-items: center; gap: 15px;\">\n            <span style=\"width: 40px; height: 40px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 16px; flex-shrink: 0; box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);\">1</span>\n            <div>\n              <h4 style=\"margin: 0 0 5px 0; color: #166534; font-size: 1.2em;\">Customize Your Profile</h4>\n              <p style=\"margin: 0; color: #374151; font-size: 1em;\">Add your branding, company info, and professional photo</p>\n            </div>\n          </div>\n        </div>\n        \n        <div style=\"background: white; padding: 20px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\n          <div style=\"display: flex; align-items: center; gap: 15px;\">\n            <span style=\"width: 40px; height: 40px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 16px; flex-shrink: 0; box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);\">2</span>\n            <div>\n              <h4 style=\"margin: 0 0 5px 0; color: #166534; font-size: 1.2em;\">Create Your First Client</h4>\n              <p style=\"margin: 0; color: #374151; font-size: 1em;\">We'll automatically generate their personalized timeline</p>\n            </div>\n          </div>\n        </div>\n        \n        <div style=\"background: white; padding: 20px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\n          <div style=\"display: flex; align-items: center; gap: 15px;\">\n            <span style=\"width: 40px; height: 40px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 16px; flex-shrink: 0; box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);\">3</span>\n            <div>\n              <h4 style=\"margin: 0 0 5px 0; color: #166534; font-size: 1.2em;\">Add Properties</h4>\n              <p style=\"margin: 0; color: #374151; font-size: 1em;\">Upload stunning property details and images</p>\n            </div>\n          </div>\n        </div>\n        \n        <div style=\"background: white; padding: 20px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\n          <div style=\"display: flex; align-items: center; gap: 15px;\">\n            <span style=\"width: 40px; height: 40px; background: #22c55e; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 16px; flex-shrink: 0; box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);\">4</span>\n            <div>\n              <h4 style=\"margin: 0 0 5px 0; color: #166534; font-size: 1.2em;\">Share & Watch Magic Happen</h4>\n              <p style=\"margin: 0; color: #374151; font-size: 1em;\">Send the timeline and watch client engagement soar!</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Key Benefits -->\n    <div style=\"background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%); padding: 25px; border-radius: 16px; border-left: 6px solid #f59e0b; margin: 25px 0;\">\n      <h4 style=\"color: #92400e; margin: 0 0 15px 0; font-size: 1.3em; text-align: center;\">⭐ What Makes Property Sync Special</h4>\n      <div style=\"color: #b45309; font-size: 1.1em; text-align: center;\">\n        <p style=\"margin: 10px 0;\">🎯 <strong>Personalized client experiences</strong> that build trust</p>\n        <p style=\"margin: 10px 0;\">📊 <strong>Instant feedback</strong> on every property you share</p>\n        <p style=\"margin: 10px 0;\">⚡ <strong>Save hours</strong> of back-and-forth emails</p>\n        <p style=\"margin: 10px 0;\">🏆 <strong>Close more deals</strong> with engaged clients</p>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Footer -->\n  <div style=\"text-align: center; padding: 20px; color: #94a3b8; font-size: 0.9em;\">\n    <p style=\"margin: 0 0 10px 0;\">Questions? We're here to help at <a href=\"mailto:support@property-sync.com\" style=\"color: #10b981;\">support@property-sync.com</a></p>\n    <p style=\"margin: 0;\">Property Sync - Transforming Real Estate, One Client at a Time 🏡</p>\n  </div>\n</body>\n</html>`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\email\\template.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\health\\health.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":25,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":293,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":293,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":293,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":293,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { Public } from '../common/decorators/public.decorator';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\n@Controller('api')\nexport class HealthController {\n  constructor(private prisma: PrismaService) {}\n\n  @Public()\n  @Get('health')\n  async getHealth(): Promise<{\n    status: string;\n    timestamp: string;\n    database?: string;\n  }> {\n    try {\n      // Quick database connectivity check\n      await this.prisma.$queryRaw`SELECT 1`;\n      return {\n        status: 'ok',\n        timestamp: new Date().toISOString(),\n        database: 'connected',\n      };\n    } catch (error) {\n      // Still return 200 OK but indicate database issue\n      return {\n        status: 'ok',\n        timestamp: new Date().toISOString(),\n        database: 'disconnected',\n      };\n    }\n  }\n\n  // REMOVED @Public() - Now requires authentication\n  @Get('db-status')\n  @UseGuards(JwtAuthGuard)\n  async getDatabaseStatus(): Promise<any> {\n    try {\n      // Simple connection test only - no sensitive data exposure\n      await this.prisma.$queryRaw`SELECT 1`;\n\n      return {\n        status: 'ok',\n        database: 'connected',\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Database status error:', error);\n      return {\n        status: 'error',\n        database: 'disconnected',\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  // DANGEROUS: Database initialization - restrict to admins only\n  @Get('db-init')\n  @UseGuards(JwtAuthGuard)\n  async initializeDatabase(): Promise<any> {\n    try {\n      console.log('Creating all required database tables...');\n\n      // 1. Create Users table\n      await this.prisma.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"users\" (\n          \"id\" TEXT NOT NULL,\n          \"email\" TEXT NOT NULL,\n          \"password\" TEXT NOT NULL,\n          \"isActive\" BOOLEAN NOT NULL DEFAULT true,\n          \"emailVerified\" BOOLEAN NOT NULL DEFAULT false,\n          \"verificationToken\" TEXT,\n          \"verificationExpiry\" TIMESTAMP(3),\n          \"resetToken\" TEXT,\n          \"resetExpiry\" TIMESTAMP(3),\n          \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP(3) NOT NULL,\n          CONSTRAINT \"users_pkey\" PRIMARY KEY (\"id\")\n        )\n      `);\n\n      // 2. Create Profiles table\n      await this.prisma.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"profiles\" (\n          \"id\" TEXT NOT NULL,\n          \"firstName\" TEXT NOT NULL,\n          \"lastName\" TEXT NOT NULL,\n          \"company\" TEXT,\n          \"phone\" TEXT,\n          \"website\" TEXT,\n          \"licenseNumber\" TEXT,\n          \"avatar\" TEXT,\n          \"bio\" TEXT,\n          \"timezone\" TEXT,\n          \"specialties\" TEXT[],\n          \"yearsExperience\" INTEGER,\n          \"notifications\" JSONB,\n          \"onboardingComplete\" BOOLEAN NOT NULL DEFAULT false,\n          \"emailTemplateStyle\" TEXT DEFAULT 'modern',\n          \"notificationEmail\" BOOLEAN NOT NULL DEFAULT true,\n          \"notificationDesktop\" BOOLEAN NOT NULL DEFAULT true,\n          \"notificationFeedback\" BOOLEAN NOT NULL DEFAULT true,\n          \"notificationNewProperties\" BOOLEAN NOT NULL DEFAULT true,\n          \"theme\" TEXT NOT NULL DEFAULT 'dark',\n          \"soundEnabled\" BOOLEAN NOT NULL DEFAULT true,\n          \"logo\" TEXT,\n          \"brandColor\" TEXT DEFAULT '#0ea5e9',\n          \"preferredEmailTemplate\" TEXT DEFAULT 'modern',\n          \"plan\" TEXT NOT NULL DEFAULT 'FREE',\n          \"subscriptionStatus\" TEXT NOT NULL DEFAULT 'ACTIVE',\n          \"clientLimit\" INTEGER NOT NULL DEFAULT 1,\n          \"propertyLimit\" INTEGER NOT NULL DEFAULT 20,\n          \"stripeCustomerId\" TEXT,\n          \"subscriptionId\" TEXT,\n          \"subscriptionItemId\" TEXT,\n          \"billingCycleStart\" TIMESTAMP(3),\n          \"billingCycleEnd\" TIMESTAMP(3),\n          \"currentMonthProperties\" INTEGER NOT NULL DEFAULT 0,\n          \"lastUsageReset\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP(3) NOT NULL,\n          \"userId\" TEXT NOT NULL,\n          CONSTRAINT \"profiles_pkey\" PRIMARY KEY (\"id\")\n        )\n      `);\n\n      // 3. Create Clients table\n      await this.prisma.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"clients\" (\n          \"id\" TEXT NOT NULL,\n          \"firstName\" TEXT NOT NULL,\n          \"lastName\" TEXT NOT NULL,\n          \"email\" TEXT NOT NULL,\n          \"spouseEmail\" TEXT,\n          \"phone\" TEXT,\n          \"notes\" TEXT,\n          \"isActive\" BOOLEAN NOT NULL DEFAULT true,\n          \"totalViews\" INTEGER NOT NULL DEFAULT 0,\n          \"avgResponseTime\" INTEGER NOT NULL DEFAULT 0,\n          \"feedbackRate\" DOUBLE PRECISION NOT NULL DEFAULT 0.0,\n          \"lastActivity\" TIMESTAMP(3),\n          \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP(3) NOT NULL,\n          \"agentId\" TEXT NOT NULL,\n          CONSTRAINT \"clients_pkey\" PRIMARY KEY (\"id\")\n        )\n      `);\n\n      // 4. Create Timelines table\n      await this.prisma.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"timelines\" (\n          \"id\" TEXT NOT NULL,\n          \"title\" TEXT NOT NULL,\n          \"description\" TEXT,\n          \"shareToken\" TEXT NOT NULL,\n          \"isActive\" BOOLEAN NOT NULL DEFAULT true,\n          \"totalViews\" INTEGER NOT NULL DEFAULT 0,\n          \"lastViewed\" TIMESTAMP(3),\n          \"viewHistory\" JSONB,\n          \"agentToken\" TEXT,\n          \"tokenExpiry\" TIMESTAMP(3),\n          \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP(3) NOT NULL,\n          \"agentId\" TEXT NOT NULL,\n          \"clientId\" TEXT NOT NULL,\n          CONSTRAINT \"timelines_pkey\" PRIMARY KEY (\"id\")\n        )\n      `);\n\n      // 5. Create Properties table\n      await this.prisma.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"properties\" (\n          \"id\" TEXT NOT NULL,\n          \"mlsId\" TEXT,\n          \"address\" TEXT NOT NULL,\n          \"city\" TEXT,\n          \"state\" TEXT,\n          \"zipCode\" TEXT,\n          \"price\" INTEGER NOT NULL,\n          \"bedrooms\" INTEGER,\n          \"bathrooms\" DOUBLE PRECISION,\n          \"squareFootage\" INTEGER,\n          \"propertyType\" TEXT,\n          \"description\" TEXT,\n          \"imageUrls\" TEXT[],\n          \"listingUrl\" TEXT,\n          \"mlsSource\" TEXT,\n          \"originalMlsUrl\" TEXT,\n          \"parsedData\" JSONB,\n          \"parseTimestamp\" TIMESTAMP(3),\n          \"imageCount\" INTEGER NOT NULL DEFAULT 0,\n          \"parseErrors\" TEXT[],\n          \"addressNormalized\" TEXT,\n          \"priceRange\" TEXT,\n          \"batchId\" TEXT,\n          \"importStatus\" TEXT NOT NULL DEFAULT 'completed',\n          \"isQuickParsed\" BOOLEAN NOT NULL DEFAULT false,\n          \"isFullyParsed\" BOOLEAN NOT NULL DEFAULT true,\n          \"loadingProgress\" INTEGER NOT NULL DEFAULT 100,\n          \"agentNotes\" TEXT,\n          \"isHighlighted\" BOOLEAN NOT NULL DEFAULT false,\n          \"position\" INTEGER NOT NULL DEFAULT 0,\n          \"isViewed\" BOOLEAN NOT NULL DEFAULT false,\n          \"viewedAt\" TIMESTAMP(3),\n          \"isQueued\" BOOLEAN NOT NULL DEFAULT false,\n          \"queuedForEmail\" BOOLEAN NOT NULL DEFAULT false,\n          \"emailSent\" BOOLEAN NOT NULL DEFAULT false,\n          \"emailSentAt\" TIMESTAMP(3),\n          \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP(3) NOT NULL,\n          \"timelineId\" TEXT NOT NULL,\n          CONSTRAINT \"properties_pkey\" PRIMARY KEY (\"id\")\n        )\n      `);\n\n      // Create indexes\n      await this.prisma.$executeRawUnsafe(`\n        CREATE UNIQUE INDEX IF NOT EXISTS \"users_email_key\" ON \"users\"(\"email\")\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        CREATE UNIQUE INDEX IF NOT EXISTS \"users_verificationToken_key\" ON \"users\"(\"verificationToken\")\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        CREATE UNIQUE INDEX IF NOT EXISTS \"users_resetToken_key\" ON \"users\"(\"resetToken\")\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        CREATE UNIQUE INDEX IF NOT EXISTS \"profiles_userId_key\" ON \"profiles\"(\"userId\")\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        CREATE UNIQUE INDEX IF NOT EXISTS \"timelines_shareToken_key\" ON \"timelines\"(\"shareToken\")\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        CREATE UNIQUE INDEX IF NOT EXISTS \"timelines_agentToken_key\" ON \"timelines\"(\"agentToken\")\n      `);\n\n      // Create foreign key constraints\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"profiles\" DROP CONSTRAINT IF EXISTS \"profiles_userId_fkey\"\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"profiles\" ADD CONSTRAINT \"profiles_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"users\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"clients\" DROP CONSTRAINT IF EXISTS \"clients_agentId_fkey\"\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"clients\" ADD CONSTRAINT \"clients_agentId_fkey\" FOREIGN KEY (\"agentId\") REFERENCES \"users\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"timelines\" DROP CONSTRAINT IF EXISTS \"timelines_agentId_fkey\"\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"timelines\" ADD CONSTRAINT \"timelines_agentId_fkey\" FOREIGN KEY (\"agentId\") REFERENCES \"users\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"timelines\" DROP CONSTRAINT IF EXISTS \"timelines_clientId_fkey\"\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"timelines\" ADD CONSTRAINT \"timelines_clientId_fkey\" FOREIGN KEY (\"clientId\") REFERENCES \"clients\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"properties\" DROP CONSTRAINT IF EXISTS \"properties_timelineId_fkey\"\n      `);\n\n      await this.prisma.$executeRawUnsafe(`\n        ALTER TABLE \"properties\" ADD CONSTRAINT \"properties_timelineId_fkey\" FOREIGN KEY (\"timelineId\") REFERENCES \"timelines\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n      `);\n\n      return {\n        status: 'success',\n        message:\n          'Complete Property Sync database created: users, profiles, clients, timelines, properties',\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Database initialization error:', error);\n      return {\n        status: 'error',\n        error: error.message,\n        message: 'Failed to initialize database',\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\main.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":88,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":88,"endColumn":13,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2538,2538],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2538,2538],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // Enable CORS\n  app.enableCors({\n    origin: [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'http://localhost:3002',\n      'http://localhost:3003',\n      'http://localhost:3004',\n      'http://localhost:3005',\n      'http://localhost:3006',\n      'http://localhost:3007',\n      'http://localhost:3008',\n      'http://localhost:3009',\n      'http://localhost:3010',\n      'http://localhost:3011',\n      'http://localhost:4000',\n      'http://localhost:4001',\n      'http://127.0.0.1:3000',\n      'http://127.0.0.1:3001',\n      'http://127.0.0.1:3002',\n      'http://127.0.0.1:3003',\n      'http://127.0.0.1:3004',\n      'http://127.0.0.1:3005',\n      'http://127.0.0.1:3006',\n      'http://127.0.0.1:3007',\n      'http://127.0.0.1:3008',\n      'http://127.0.0.1:3009',\n      'http://127.0.0.1:3010',\n      'http://127.0.0.1:3011',\n      'http://127.0.0.1:4000',\n      'http://127.0.0.1:4001',\n      'http://192.168.1.209:3000',\n      'http://192.168.1.209:3001',\n      'http://192.168.1.209:3002',\n      'http://192.168.1.209:3003',\n      'http://192.168.1.209:3004',\n      'http://192.168.1.209:3005',\n      'http://192.168.1.209:3006',\n      'http://192.168.1.209:3007',\n      'http://192.168.1.209:3008',\n      'http://192.168.1.209:3009',\n      'http://192.168.1.209:3010',\n      'http://192.168.1.209:3011',\n      'http://192.168.1.209:4000',\n      'http://192.168.1.209:4001',\n      'https://property-sync-mu.vercel.app',\n      'https://property-sync.com',\n      'https://www.property-sync.com',\n      /https:\\/\\/.*\\.vercel\\.app$/,\n      /https:\\/\\/.*\\.up\\.railway\\.app$/,\n    ],\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n    allowedHeaders: [\n      'Content-Type',\n      'Authorization',\n      'Accept',\n      'Origin',\n      'X-Requested-With',\n    ],\n    credentials: true,\n  });\n\n  // Global validation pipe\n  app.useGlobalPipes(\n    new ValidationPipe({\n      whitelist: true,\n      transform: true,\n    }),\n  );\n\n  const port = process.env.PORT || 3010;\n  console.log(`🔄 Starting application on port ${port}...`);\n  console.log(`📡 Health check endpoint: /api/health`);\n  console.log(\n    `🗄️ Database URL configured: ${process.env.DATABASE_URL ? 'Yes' : 'No'}`,\n  );\n\n  await app.listen(port, '0.0.0.0');\n  console.log(`🚀 API running on port ${port}`);\n}\nbootstrap();\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\conversation-v2.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `any` value.","line":126,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agentId on an `any` value.","line":298,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clientId on an `any` value.","line":300,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":300,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":304,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":304,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class ConversationV2Service {\n  constructor(private prisma: PrismaService) {}\n\n  // Get or create property-specific conversation\n  async getOrCreatePropertyConversation(data: {\n    propertyId: string;\n    timelineId: string;\n    agentId: string;\n    clientId: string;\n  }) {\n    try {\n      console.log(\n        `🔍 Looking for conversation for property: ${data.propertyId}`,\n      );\n\n      // Check if conversation already exists for this property\n      let conversation = await this.prisma.propertyConversation.findUnique({\n        where: { propertyId: data.propertyId },\n        include: {\n          messages: {\n            orderBy: { createdAt: 'desc' },\n            take: 50, // Last 50 messages\n          },\n          property: {\n            select: {\n              id: true,\n              address: true,\n              price: true,\n              imageUrls: true,\n            },\n          },\n        },\n      });\n\n      if (conversation) {\n        console.log(`✅ Found existing conversation: ${conversation.id}`);\n        return conversation;\n      }\n\n      // Verify all required data exists before creating\n      console.log(`🔍 Verifying data before creating conversation:`, data);\n\n      // Check if property exists\n      const property = await this.prisma.property.findUnique({\n        where: { id: data.propertyId },\n      });\n\n      if (!property) {\n        throw new Error(`Property ${data.propertyId} not found`);\n      }\n\n      // Check if timeline exists\n      const timeline = await this.prisma.timeline.findUnique({\n        where: { id: data.timelineId },\n      });\n\n      if (!timeline) {\n        throw new Error(`Timeline ${data.timelineId} not found`);\n      }\n\n      // Check if client exists\n      const client = await this.prisma.client.findUnique({\n        where: { id: data.clientId },\n      });\n\n      if (!client) {\n        throw new Error(`Client ${data.clientId} not found`);\n      }\n\n      // Check if agent exists - handle special case for clients\n      if (data.agentId !== 'default-agent') {\n        const agent = await this.prisma.user.findUnique({\n          where: { id: data.agentId },\n        });\n\n        if (!agent) {\n          // Try to find the first available user as fallback agent\n          const fallbackAgent = await this.prisma.user.findFirst({\n            where: { isActive: true },\n          });\n\n          if (fallbackAgent) {\n            console.log(\n              `⚠️ Agent ${data.agentId} not found, using fallback agent: ${fallbackAgent.id}`,\n            );\n            data.agentId = fallbackAgent.id;\n          } else {\n            throw new Error(`No agents available to create conversation`);\n          }\n        }\n      }\n\n      console.log(`✅ All entities verified, creating conversation...`);\n\n      // Try to create conversation, but handle the case where it already exists\n      try {\n        conversation = await this.prisma.propertyConversation.create({\n          data: {\n            propertyId: data.propertyId,\n            timelineId: data.timelineId,\n            agentId: data.agentId,\n            clientId: data.clientId,\n            status: 'ACTIVE',\n          },\n          include: {\n            messages: {\n              orderBy: { createdAt: 'desc' },\n              take: 50,\n            },\n            property: {\n              select: {\n                id: true,\n                address: true,\n                price: true,\n                imageUrls: true,\n              },\n            },\n          },\n        });\n      } catch (createError: any) {\n        // If unique constraint failed, try to find existing conversation\n        if (createError.code === 'P2002') {\n          console.log(\n            `🔄 Conversation already exists for property ${data.propertyId}, fetching existing one...`,\n          );\n\n          conversation = await this.prisma.propertyConversation.findUnique({\n            where: { propertyId: data.propertyId },\n            include: {\n              messages: {\n                orderBy: { createdAt: 'desc' },\n                take: 50,\n              },\n              property: {\n                select: {\n                  id: true,\n                  address: true,\n                  price: true,\n                  imageUrls: true,\n                },\n              },\n            },\n          });\n\n          if (!conversation) {\n            throw new Error(\n              `Could not find or create conversation for property ${data.propertyId}`,\n            );\n          }\n        } else {\n          throw createError;\n        }\n      }\n\n      console.log(\n        `✅ Created new PropertyConversation ${conversation.id} for property ${data.propertyId}`,\n      );\n\n      return conversation;\n    } catch (error) {\n      console.error(`❌ Error in getOrCreatePropertyConversation:`, error);\n      throw error;\n    }\n  }\n\n  // Get conversation by ID\n  async getConversationById(conversationId: string) {\n    const conversation = await this.prisma.propertyConversation.findUnique({\n      where: { id: conversationId },\n      include: {\n        messages: {\n          orderBy: { createdAt: 'desc' },\n          take: 50,\n        },\n        property: {\n          select: {\n            id: true,\n            address: true,\n            price: true,\n            imageUrls: true,\n          },\n        },\n      },\n    });\n\n    if (!conversation) {\n      throw new NotFoundException('Conversation not found');\n    }\n\n    return conversation;\n  }\n\n  // Get all conversations for an agent\n  async getAgentConversations(agentId: string) {\n    return this.prisma.propertyConversation.findMany({\n      where: { agentId, status: 'ACTIVE' },\n      include: {\n        property: {\n          select: {\n            id: true,\n            address: true,\n            price: true,\n            imageUrls: true,\n          },\n        },\n        messages: {\n          orderBy: { createdAt: 'desc' },\n          take: 1, // Last message only for list view\n        },\n      },\n      orderBy: { lastMessageAt: 'desc' },\n    });\n  }\n\n  // Get all conversations for a client\n  async getClientConversations(clientId: string) {\n    return this.prisma.propertyConversation.findMany({\n      where: { clientId, status: 'ACTIVE' },\n      include: {\n        property: {\n          select: {\n            id: true,\n            address: true,\n            price: true,\n            imageUrls: true,\n          },\n        },\n        messages: {\n          orderBy: { createdAt: 'desc' },\n          take: 1,\n        },\n      },\n      orderBy: { lastMessageAt: 'desc' },\n    });\n  }\n\n  // Mark conversation as read for a user\n  async markAsRead(conversationId: string, userType: 'AGENT' | 'CLIENT') {\n    const updateData =\n      userType === 'AGENT' ? { unreadAgentCount: 0 } : { unreadClientCount: 0 };\n\n    await this.prisma.propertyConversation.update({\n      where: { id: conversationId },\n      data: updateData,\n    });\n\n    // Also mark all messages as read for this user\n    await this.prisma.messageV2.updateMany({\n      where: {\n        conversationId,\n        senderType: userType === 'AGENT' ? 'CLIENT' : 'AGENT', // Mark messages from the other party as read\n        isRead: false,\n      },\n      data: {\n        isRead: true,\n        readAt: new Date(),\n      },\n    });\n  }\n\n  // Update conversation's last message timestamp\n  async updateLastMessageAt(conversationId: string) {\n    await this.prisma.propertyConversation.update({\n      where: { id: conversationId },\n      data: { lastMessageAt: new Date() },\n    });\n  }\n\n  // Increment unread count for recipient\n  async incrementUnreadCount(\n    conversationId: string,\n    senderType: 'AGENT' | 'CLIENT',\n  ) {\n    const updateData =\n      senderType === 'AGENT'\n        ? { unreadClientCount: { increment: 1 } } // Agent sent, increment client unread\n        : { unreadAgentCount: { increment: 1 } }; // Client sent, increment agent unread\n\n    await this.prisma.propertyConversation.update({\n      where: { id: conversationId },\n      data: updateData,\n    });\n  }\n\n  // Get conversation by property and user access\n  async getConversationByProperty(\n    propertyId: string,\n    userId: string,\n    userType: 'AGENT' | 'CLIENT',\n  ) {\n    const whereClause: any = { propertyId };\n\n    if (userType === 'AGENT') {\n      whereClause.agentId = userId;\n    } else {\n      whereClause.clientId = userId;\n    }\n\n    const conversation = await this.prisma.propertyConversation.findFirst({\n      where: whereClause,\n      include: {\n        messages: {\n          orderBy: { createdAt: 'desc' },\n          take: 50,\n        },\n        property: {\n          select: {\n            id: true,\n            address: true,\n            price: true,\n            imageUrls: true,\n          },\n        },\n      },\n    });\n\n    if (!conversation) {\n      throw new NotFoundException('Conversation not found');\n    }\n\n    return conversation;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\conversations-v2.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clientId on an `any` value.","line":46,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":68,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":90,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `any` value.","line":122,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .before on an `any` value.","line":123,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ limit?: number | undefined; before?: string | undefined; } | undefined`.","line":125,"column":60,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":125,"endColumn":67}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Param,\n  Body,\n  Query,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { Request as ExpressRequest } from 'express';\nimport { ConversationV2Service } from './conversation-v2.service';\nimport { MessageV2Service } from './message-v2.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\ninterface AuthenticatedRequest extends ExpressRequest {\n  user: {\n    id: string;\n    userType: 'AGENT' | 'CLIENT';\n    timelineId?: string;\n  };\n  query: any;\n}\n\n@Controller('api/v2/conversations')\n@UseGuards(JwtAuthGuard)\nexport class ConversationsV2Controller {\n  constructor(\n    private conversationService: ConversationV2Service,\n    private messageService: MessageV2Service,\n  ) {}\n\n  // Get or create conversation for a property\n  @Get('property/:propertyId')\n  async getPropertyConversation(\n    @Param('propertyId') propertyId: string,\n    @Request() req: AuthenticatedRequest,\n  ) {\n    const { user } = req;\n\n    // For agent requests, we need both agentId and clientId\n    // For client requests, we can get the conversation if it exists\n    if (user.userType === 'AGENT') {\n      // Agent needs to provide clientId in query or we fetch from timeline\n      const clientId = req.query.clientId as string;\n      if (!clientId) {\n        throw new Error('Client ID required for agent requests');\n      }\n\n      return this.conversationService.getOrCreatePropertyConversation({\n        propertyId,\n        timelineId: user.timelineId!,\n        agentId: user.id,\n        clientId,\n      });\n    } else {\n      // Client can only access their own conversations\n      // We'll try to find existing conversation or return 404\n      try {\n        const conversation =\n          await this.conversationService.getConversationByProperty(\n            propertyId,\n            user.id,\n            'CLIENT',\n          );\n        return conversation;\n      } catch (error) {\n        throw new Error('Conversation not found for this property');\n      }\n    }\n  }\n\n  // Get all conversations for the authenticated user\n  @Get()\n  async getUserConversations(@Request() req: AuthenticatedRequest) {\n    const { user } = req;\n\n    if (user.userType === 'AGENT') {\n      return this.conversationService.getAgentConversations(user.id);\n    } else {\n      return this.conversationService.getClientConversations(user.id);\n    }\n  }\n\n  // Get specific conversation by ID\n  @Get(':conversationId')\n  async getConversation(\n    @Param('conversationId') conversationId: string,\n    @Request() req: AuthenticatedRequest,\n  ) {\n    // Service will handle access control\n    return this.conversationService.getConversationById(conversationId);\n  }\n\n  // Send a message in a conversation\n  @Post(':conversationId/messages')\n  async sendMessage(\n    @Param('conversationId') conversationId: string,\n    @Body() body: { content: string; type?: 'TEXT' | 'IMAGE' | 'FILE' },\n    @Request() req: AuthenticatedRequest,\n  ) {\n    const { user } = req;\n\n    return this.messageService.sendMessage({\n      conversationId,\n      senderId: user.id,\n      senderType: user.userType,\n      content: body.content,\n      type: body.type || 'TEXT',\n    });\n  }\n\n  // Get messages for a conversation with pagination\n  @Get(':conversationId/messages')\n  async getMessages(\n    @Param('conversationId') conversationId: string,\n    @Query('limit') limit?: string,\n    @Query('before') before?: string,\n  ) {\n    const options: any = {};\n    if (limit) options.limit = parseInt(limit, 10);\n    if (before) options.before = before;\n\n    return this.messageService.getMessages(conversationId, options);\n  }\n\n  // Mark all messages as read in a conversation\n  @Put(':conversationId/read-all')\n  async markAllAsRead(\n    @Param('conversationId') conversationId: string,\n    @Request() req: AuthenticatedRequest,\n  ) {\n    const { user } = req;\n\n    return this.messageService.markAllAsRead(\n      conversationId,\n      user.id,\n      user.userType,\n    );\n  }\n\n  // Mark specific message as read\n  @Put(':conversationId/messages/:messageId/read')\n  async markMessageAsRead(\n    @Param('conversationId') conversationId: string,\n    @Param('messageId') messageId: string,\n    @Request() req: AuthenticatedRequest,\n  ) {\n    const { user } = req;\n\n    return this.messageService.markAsRead(messageId, user.id);\n  }\n\n  // Get unread message count for user\n  @Get('unread/count')\n  async getUnreadCount(@Request() req: AuthenticatedRequest) {\n    const { user } = req;\n\n    return {\n      unreadCount: await this.messageService.getUnreadCount(\n        user.id,\n        user.userType,\n      ),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\message-v2.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversation' is assigned a value but never used.","line":72,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":112,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":116,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":116,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  NotFoundException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ConversationV2Service } from './conversation-v2.service';\n\nexport interface CreateMessageV2Data {\n  conversationId: string;\n  senderId: string;\n  senderType: 'AGENT' | 'CLIENT';\n  content: string;\n  type?: 'TEXT' | 'IMAGE' | 'FILE' | 'SYSTEM';\n}\n\n@Injectable()\nexport class MessageV2Service {\n  constructor(\n    private prisma: PrismaService,\n    private conversationService: ConversationV2Service,\n  ) {}\n\n  // Send a message (with strict access control)\n  async sendMessage(data: CreateMessageV2Data) {\n    // Verify conversation exists and user has access\n    const conversation = await this.conversationService.getConversationById(\n      data.conversationId,\n    );\n\n    // Check if sender has access to this conversation\n    // Allow access if sender matches either agent or client ID (for cases where user type detection fails)\n    const senderHasAccess =\n      data.senderId === conversation.agentId ||\n      data.senderId === conversation.clientId ||\n      (data.senderType === 'AGENT' && conversation.agentId === data.senderId) ||\n      (data.senderType === 'CLIENT' && conversation.clientId === data.senderId);\n\n    if (!senderHasAccess) {\n      throw new ForbiddenException(\n        'User does not have access to this conversation',\n      );\n    }\n\n    // Create the message\n    const message = await this.prisma.messageV2.create({\n      data: {\n        conversationId: data.conversationId,\n        senderId: data.senderId,\n        senderType: data.senderType,\n        content: data.content,\n        type: data.type || 'TEXT',\n      },\n    });\n\n    // Update conversation metadata\n    await Promise.all([\n      this.conversationService.updateLastMessageAt(data.conversationId),\n      this.conversationService.incrementUnreadCount(\n        data.conversationId,\n        data.senderType,\n      ),\n    ]);\n\n    // Return message with sender info\n    return this.getMessageWithSender(message.id);\n  }\n\n  // Send a property-based message (relaxed access control for clients via shared timelines)\n  async sendPropertyMessage(data: CreateMessageV2Data) {\n    // Verify conversation exists (but don't check strict access for property-based messages)\n    const conversation = await this.conversationService.getConversationById(\n      data.conversationId,\n    );\n\n    // Create the message\n    const message = await this.prisma.messageV2.create({\n      data: {\n        conversationId: data.conversationId,\n        senderId: data.senderId,\n        senderType: data.senderType,\n        content: data.content,\n        type: data.type || 'TEXT',\n      },\n    });\n\n    // Update conversation metadata\n    await Promise.all([\n      this.conversationService.updateLastMessageAt(data.conversationId),\n      this.conversationService.incrementUnreadCount(\n        data.conversationId,\n        data.senderType,\n      ),\n    ]);\n\n    // Return message with sender info\n    return this.getMessageWithSender(message.id);\n  }\n\n  // Get messages for a conversation with pagination\n  async getMessages(\n    conversationId: string,\n    options?: {\n      limit?: number;\n      before?: string; // cursor-based pagination\n    },\n  ) {\n    const limit = options?.limit || 50;\n\n    const whereClause: any = { conversationId };\n    if (options?.before) {\n      whereClause.createdAt = { lt: new Date(options.before) };\n    }\n\n    const messages = await this.prisma.messageV2.findMany({\n      where: whereClause,\n      orderBy: { createdAt: 'desc' },\n      take: limit,\n      include: {\n        conversation: {\n          include: {\n            agent: {\n              include: { profile: true },\n            },\n            client: true,\n          },\n        },\n      },\n    });\n\n    // Transform messages with sender information\n    return messages.map((message) => ({\n      id: message.id,\n      conversationId: message.conversationId,\n      content: message.content,\n      type: message.type,\n      isRead: message.isRead,\n      readAt: message.readAt,\n      createdAt: message.createdAt,\n      propertyId: message.conversation.propertyId, // Include propertyId for message routing\n      sender: {\n        id: message.senderId,\n        type: message.senderType,\n        name:\n          message.senderType === 'AGENT'\n            ? `${message.conversation.agent.profile?.firstName || ''} ${message.conversation.agent.profile?.lastName || ''}`.trim()\n            : `${message.conversation.client.firstName} ${message.conversation.client.lastName}`.trim(),\n        avatar:\n          message.senderType === 'AGENT'\n            ? message.conversation.agent.profile?.avatar\n            : null,\n      },\n      conversation: {\n        id: message.conversation.id,\n        propertyId: message.conversation.propertyId, // Also include in conversation object for compatibility\n      },\n    }));\n  }\n\n  // Mark message as read\n  async markAsRead(messageId: string, userId: string) {\n    const message = await this.prisma.messageV2.findUnique({\n      where: { id: messageId },\n      include: { conversation: true },\n    });\n\n    if (!message) {\n      throw new NotFoundException('Message not found');\n    }\n\n    // Check if user has access to this conversation\n    const conversation = message.conversation;\n    if (conversation.agentId !== userId && conversation.clientId !== userId) {\n      throw new ForbiddenException(\n        'User does not have access to this conversation',\n      );\n    }\n\n    // Only mark as read if the user is not the sender\n    if (message.senderId !== userId) {\n      await this.prisma.messageV2.update({\n        where: { id: messageId },\n        data: {\n          isRead: true,\n          readAt: new Date(),\n        },\n      });\n    }\n\n    return { success: true };\n  }\n\n  // Mark all messages in conversation as read for a user\n  async markAllAsRead(\n    conversationId: string,\n    userId: string,\n    userType: 'AGENT' | 'CLIENT',\n  ) {\n    // Verify user has access to conversation\n    const conversation =\n      await this.conversationService.getConversationById(conversationId);\n\n    // Allow access if user matches either agent or client ID (for cases where user type detection fails)\n    const userHasAccess =\n      userId === conversation.agentId ||\n      userId === conversation.clientId ||\n      (userType === 'AGENT' && conversation.agentId === userId) ||\n      (userType === 'CLIENT' && conversation.clientId === userId);\n\n    if (!userHasAccess) {\n      throw new ForbiddenException(\n        'User does not have access to this conversation',\n      );\n    }\n\n    // Mark all unread messages from the other party as read\n    await this.prisma.messageV2.updateMany({\n      where: {\n        conversationId,\n        senderType: userType === 'AGENT' ? 'CLIENT' : 'AGENT', // Messages from the other party\n        isRead: false,\n      },\n      data: {\n        isRead: true,\n        readAt: new Date(),\n      },\n    });\n\n    // Reset unread count in conversation\n    await this.conversationService.markAsRead(conversationId, userType);\n\n    return { success: true };\n  }\n\n  // Get message with sender information\n  private async getMessageWithSender(messageId: string) {\n    const message = await this.prisma.messageV2.findUnique({\n      where: { id: messageId },\n      include: {\n        conversation: {\n          include: {\n            agent: {\n              include: { profile: true },\n            },\n            client: true,\n          },\n        },\n      },\n    });\n\n    if (!message) {\n      throw new NotFoundException('Message not found');\n    }\n\n    return {\n      id: message.id,\n      conversationId: message.conversationId,\n      content: message.content,\n      type: message.type,\n      isRead: message.isRead,\n      readAt: message.readAt,\n      createdAt: message.createdAt,\n      propertyId: message.conversation.propertyId, // Include propertyId for message routing\n      sender: {\n        id: message.senderId,\n        type: message.senderType,\n        name:\n          message.senderType === 'AGENT'\n            ? `${message.conversation.agent.profile?.firstName || ''} ${message.conversation.agent.profile?.lastName || ''}`.trim()\n            : `${message.conversation.client.firstName} ${message.conversation.client.lastName}`.trim(),\n        avatar:\n          message.senderType === 'AGENT'\n            ? message.conversation.agent.profile?.avatar\n            : null,\n      },\n      conversation: {\n        id: message.conversation.id,\n        propertyId: message.conversation.propertyId, // Also include in conversation object for compatibility\n      },\n    };\n  }\n\n  // Get unread message count for a user\n  async getUnreadCount(userId: string, userType: 'AGENT' | 'CLIENT') {\n    if (userType === 'AGENT') {\n      const result = await this.prisma.propertyConversation.aggregate({\n        where: { agentId: userId },\n        _sum: { unreadAgentCount: true },\n      });\n      return result._sum.unreadAgentCount || 0;\n    } else {\n      const result = await this.prisma.propertyConversation.aggregate({\n        where: { clientId: userId },\n        _sum: { unreadClientCount: true },\n      });\n      return result._sum.unreadClientCount || 0;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\messaging.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":32,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":44,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":44,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":44,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":55,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":55,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":73,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":73,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":89,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":105,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":105,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":296,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":313,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":313,"endColumn":19}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Query,\n  Request,\n  UseGuards,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport type {\n  CreateMessageDto,\n  CreateConversationDto,\n} from './messaging.service';\nimport { MessagingService } from './messaging.service';\nimport { Public } from '../auth/public.decorator';\n\n@Controller('api/v1/messaging')\nexport class MessagingController {\n  constructor(private readonly messagingService: MessagingService) {}\n\n  // Agent endpoints (protected)\n  @UseGuards(JwtAuthGuard)\n  @Post('conversations')\n  async createConversation(\n    @Request() req,\n    @Body() createConversationDto: CreateConversationDto,\n  ) {\n    // Verify agent is authorized to create conversation with this client/timeline\n    if (req.user.id !== createConversationDto.agentId) {\n      throw new BadRequestException(\n        'Cannot create conversation for another agent',\n      );\n    }\n\n    return this.messagingService.createOrGetConversation(createConversationDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('conversations')\n  async getAgentConversations(@Request() req) {\n    return this.messagingService.getConversations(req.user.id, 'agent');\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('conversations/:conversationId')\n  async getAgentConversation(\n    @Request() req,\n    @Param('conversationId') conversationId: string,\n  ) {\n    return this.messagingService.getConversation(\n      conversationId,\n      req.user.id,\n      'agent',\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('conversations/:conversationId/messages')\n  async getAgentMessages(\n    @Request() req,\n    @Param('conversationId') conversationId: string,\n    @Query('page') page?: string,\n    @Query('limit') limit?: string,\n  ) {\n    const pageNum = page ? parseInt(page) : 1;\n    const limitNum = limit ? parseInt(limit) : 50;\n\n    return this.messagingService.getMessages(\n      conversationId,\n      req.user.id,\n      'agent',\n      pageNum,\n      limitNum,\n    );\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('conversations/:conversationId/messages')\n  async sendAgentMessage(\n    @Request() req,\n    @Param('conversationId') conversationId: string,\n    @Body() body: { content: string },\n  ) {\n    const createMessageDto: CreateMessageDto = {\n      conversationId,\n      senderId: req.user.id,\n      senderType: 'agent',\n      content: body.content,\n    };\n\n    return this.messagingService.sendMessage(createMessageDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('conversations/:conversationId/read')\n  async markAgentMessagesAsRead(\n    @Request() req,\n    @Param('conversationId') conversationId: string,\n  ) {\n    await this.messagingService.markMessagesAsRead(\n      conversationId,\n      req.user.id,\n      'agent',\n    );\n    return { success: true };\n  }\n\n  // Client endpoints (public with session token verification)\n  @Public()\n  @Get('client/:shareToken/conversations')\n  async getClientConversations(\n    @Param('shareToken') shareToken: string,\n    @Query('sessionToken') sessionToken?: string,\n  ) {\n    // Get client from session token\n    const clientAuth = await this.validateClientSession(sessionToken);\n    if (!clientAuth) {\n      throw new BadRequestException('Invalid session token');\n    }\n\n    // Get timeline to find client ID\n    const timeline = await this.getTimelineFromShareToken(shareToken);\n    if (!timeline || timeline.id !== clientAuth.timelineId) {\n      throw new BadRequestException('Unauthorized access');\n    }\n\n    return this.messagingService.getConversations(timeline.clientId, 'client');\n  }\n\n  @Public()\n  @Post('client/:shareToken/conversations')\n  async createClientConversation(\n    @Param('shareToken') shareToken: string,\n    @Body() body: { sessionToken?: string; propertyId?: string },\n  ) {\n    // Get client from session token\n    const clientAuth = await this.validateClientSession(body.sessionToken);\n    if (!clientAuth) {\n      throw new BadRequestException('Invalid session token');\n    }\n\n    // Get timeline to find client ID and agent ID\n    const timeline = await this.getTimelineFromShareToken(shareToken);\n    if (!timeline || timeline.id !== clientAuth.timelineId) {\n      throw new BadRequestException('Unauthorized access');\n    }\n\n    const createConversationDto: CreateConversationDto = {\n      agentId: timeline.agentId,\n      clientId: timeline.clientId,\n      timelineId: timeline.id,\n    };\n\n    return this.messagingService.createOrGetConversation(createConversationDto);\n  }\n\n  @Public()\n  @Get('client/:shareToken/conversations/:conversationId')\n  async getClientConversation(\n    @Param('shareToken') shareToken: string,\n    @Param('conversationId') conversationId: string,\n    @Query('sessionToken') sessionToken?: string,\n  ) {\n    // Get client from session token\n    const clientAuth = await this.validateClientSession(sessionToken);\n    if (!clientAuth) {\n      throw new BadRequestException('Invalid session token');\n    }\n\n    // Get timeline to find client ID\n    const timeline = await this.getTimelineFromShareToken(shareToken);\n    if (!timeline) {\n      throw new BadRequestException('Timeline not found');\n    }\n\n    return this.messagingService.getConversation(\n      conversationId,\n      timeline.clientId,\n      'client',\n    );\n  }\n\n  @Public()\n  @Get('client/:shareToken/conversations/:conversationId/messages')\n  async getClientMessages(\n    @Param('shareToken') shareToken: string,\n    @Param('conversationId') conversationId: string,\n    @Query('sessionToken') sessionToken?: string,\n    @Query('page') page?: string,\n    @Query('limit') limit?: string,\n  ) {\n    // Get client from session token\n    const clientAuth = await this.validateClientSession(sessionToken);\n    if (!clientAuth) {\n      throw new BadRequestException('Invalid session token');\n    }\n\n    // Get timeline to find client ID\n    const timeline = await this.getTimelineFromShareToken(shareToken);\n    if (!timeline) {\n      throw new BadRequestException('Timeline not found');\n    }\n\n    const pageNum = page ? parseInt(page) : 1;\n    const limitNum = limit ? parseInt(limit) : 50;\n\n    return this.messagingService.getMessages(\n      conversationId,\n      timeline.clientId,\n      'client',\n      pageNum,\n      limitNum,\n    );\n  }\n\n  @Public()\n  @Post('client/:shareToken/conversations/:conversationId/messages')\n  async sendClientMessage(\n    @Param('shareToken') shareToken: string,\n    @Param('conversationId') conversationId: string,\n    @Body() body: { content: string; sessionToken?: string },\n  ) {\n    // Get client from session token\n    const clientAuth = await this.validateClientSession(body.sessionToken);\n    if (!clientAuth) {\n      throw new BadRequestException('Invalid session token');\n    }\n\n    // Get timeline to find client ID\n    const timeline = await this.getTimelineFromShareToken(shareToken);\n    if (!timeline) {\n      throw new BadRequestException('Timeline not found');\n    }\n\n    const createMessageDto: CreateMessageDto = {\n      conversationId,\n      senderId: timeline.clientId,\n      senderType: 'client',\n      content: body.content,\n    };\n\n    return this.messagingService.sendMessage(createMessageDto);\n  }\n\n  @Public()\n  @Post('client/:shareToken/conversations/:conversationId/read')\n  async markClientMessagesAsRead(\n    @Param('shareToken') shareToken: string,\n    @Param('conversationId') conversationId: string,\n    @Body() body: { sessionToken?: string },\n  ) {\n    // Get client from session token\n    const clientAuth = await this.validateClientSession(body.sessionToken);\n    if (!clientAuth) {\n      throw new BadRequestException('Invalid session token');\n    }\n\n    // Get timeline to find client ID\n    const timeline = await this.getTimelineFromShareToken(shareToken);\n    if (!timeline) {\n      throw new BadRequestException('Timeline not found');\n    }\n\n    await this.messagingService.markMessagesAsRead(\n      conversationId,\n      timeline.clientId,\n      'client',\n    );\n    return { success: true };\n  }\n\n  // Helper methods for client session validation\n  private async validateClientSession(sessionToken?: string) {\n    if (!sessionToken) {\n      return null;\n    }\n\n    // This would normally validate the session token\n    // For now, we'll just return a mock validation\n    // In a real implementation, you'd query the database\n    try {\n      // Query client_auth table to validate session\n      const clientAuth = await this.messagingService[\n        'prisma'\n      ].clientAuth.findFirst({\n        where: {\n          sessionToken,\n          isActive: true,\n        },\n      });\n\n      return clientAuth;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  private async getTimelineFromShareToken(shareToken: string) {\n    try {\n      const timeline = await this.messagingService[\n        'prisma'\n      ].timeline.findUnique({\n        where: { shareToken },\n        include: {\n          client: true,\n        },\n      });\n\n      return timeline;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\messaging.gateway.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":56,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":57,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":58,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":60,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":62,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":67,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":67,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":67,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":67,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":68,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sub on an `any` value.","line":68,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":72,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":78,"column":46,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":78,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":78,"column":60,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":78,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":79,"column":65,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":79,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":25},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":106,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":106,"endColumn":44,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3061,3061],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3061,3061],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":108,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":59},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":132,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":132,"endColumn":60,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3833,3833],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3833,3833],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":167,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":66},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'handleLeaveConversation' has no 'await' expression.","line":172,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":172,"endColumn":32,"suggestions":[{"messageId":"removeAsync","fix":{"range":[5209,5215],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":176,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":176,"endColumn":57,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5355,5355],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5355,5355],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":217,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":232,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":232,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":232,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":232,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":233,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":233,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversationId on an `any` value.","line":233,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":234,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":234,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .senderId on an `any` value.","line":234,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":234,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":235,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":235,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .senderType on an `any` value.","line":235,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":236,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":236,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .content on an `any` value.","line":236,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":237,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":237,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isRead on an `any` value.","line":237,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":238,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":238,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .readAt on an `any` value.","line":238,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":239,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":239,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":239,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":240,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":240,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatedAt on an `any` value.","line":240,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":240,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversationId on an `any` value.","line":245,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":245,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":250,"column":9,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":250,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversationId on an `any` value.","line":250,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":267,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":267,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":267,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":267,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversationId on an `any` value.","line":273,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":278,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":278,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":278,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":279,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":279,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversationId on an `any` value.","line":279,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":279,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":282,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":282,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":282,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":283,"column":30,"nodeType":"Property","messageId":"anyAssignment","endLine":283,"endColumn":51},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'handleTypingStart' has no 'await' expression.","line":289,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":289,"endColumn":26,"suggestions":[{"messageId":"removeAsync","fix":{"range":[8953,8959],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'handleTypingStop' has no 'await' expression.","line":302,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":302,"endColumn":25,"suggestions":[{"messageId":"removeAsync","fix":{"range":[9367,9373],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":339,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":339,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":363,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":363,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":375,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":375,"endColumn":19},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":429,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":429,"endColumn":50,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[13119,13120],"text":""},"desc":"You should remove the non-null assertion."}]}],"suppressedMessages":[],"errorCount":48,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  MessageBody,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { Logger } from '@nestjs/common';\nimport { MessagingService, CreateMessageDto } from './messaging.service';\nimport { JwtService } from '@nestjs/jwt';\n\ntype AuthenticatedSocket = Socket & {\n  userId?: string;\n  userType?: 'agent' | 'client';\n  clientInfo?: {\n    timelineId: string;\n    shareToken: string;\n  };\n};\n\n@WebSocketGateway({\n  cors: {\n    origin: [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'http://localhost:3002',\n      'http://localhost:3003',\n      'http://localhost:3004',\n      'http://localhost:3005',\n      'http://localhost:3004',\n      'https://property-sync-mu.vercel.app',\n    ],\n    credentials: true,\n  },\n  namespace: '/messaging',\n})\nexport class MessagingGateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  @WebSocketServer()\n  server: Server;\n\n  private logger = new Logger('MessagingGateway');\n\n  constructor(\n    private messagingService: MessagingService,\n    private jwtService: JwtService,\n  ) {}\n\n  async handleConnection(client: AuthenticatedSocket) {\n    try {\n      // Extract authentication from query or headers\n      const token =\n        client.handshake.auth?.token || client.handshake.query?.token;\n      const sessionToken =\n        client.handshake.auth?.sessionToken ||\n        client.handshake.query?.sessionToken;\n      const shareToken =\n        client.handshake.auth?.shareToken || client.handshake.query?.shareToken;\n\n      if (token) {\n        // Agent authentication via JWT\n        try {\n          const payload = this.jwtService.verify(token);\n          client.userId = payload.sub;\n          client.userType = 'agent';\n          this.logger.log(`Agent ${client.userId} connected`);\n        } catch (error) {\n          this.logger.warn(`Invalid JWT token: ${error.message}`);\n          client.disconnect();\n          return;\n        }\n      } else if (sessionToken && shareToken) {\n        // Client authentication via session token\n        if (await this.validateClientSession(sessionToken, shareToken)) {\n          const timeline = await this.getTimelineFromShareToken(shareToken);\n          if (timeline) {\n            client.userId = timeline.clientId;\n            client.userType = 'client';\n            client.clientInfo = {\n              timelineId: timeline.id,\n              shareToken,\n            };\n            this.logger.log(\n              `Client ${client.userId} connected to timeline ${timeline.id}`,\n            );\n          } else {\n            client.disconnect();\n            return;\n          }\n        } else {\n          this.logger.warn('Invalid client session');\n          client.disconnect();\n          return;\n        }\n      } else {\n        this.logger.warn('No authentication provided');\n        client.disconnect();\n        return;\n      }\n\n      // Join user to their personal room for notifications\n      client.join(`user-${client.userId}`);\n    } catch (error) {\n      this.logger.error(`Connection error: ${error.message}`);\n      client.disconnect();\n    }\n  }\n\n  handleDisconnect(client: AuthenticatedSocket) {\n    this.logger.log(`User ${client.userId} disconnected`);\n  }\n\n  @SubscribeMessage('join-conversation')\n  async handleJoinConversation(\n    @MessageBody() data: { conversationId: string; propertyId?: string },\n    @ConnectedSocket() client: AuthenticatedSocket,\n  ) {\n    try {\n      // Verify user has access to this conversation\n      const conversation = await this.messagingService.getConversation(\n        data.conversationId,\n        client.userId!,\n        client.userType!,\n      );\n\n      if (conversation) {\n        // Join conversation room\n        client.join(`conversation-${data.conversationId}`);\n\n        // Mark messages as read when joining\n        await this.messagingService.markMessagesAsRead(\n          data.conversationId,\n          client.userId!,\n          client.userType!,\n        );\n\n        // Get messages for this conversation\n        const messagesResponse = await this.messagingService.getMessages(\n          data.conversationId,\n          client.userId!,\n          client.userType!,\n        );\n\n        // Send conversation joined event with messages and propertyId\n        client.emit('conversation_joined', {\n          conversationId: data.conversationId,\n          messages: messagesResponse.messages,\n          propertyId: data.propertyId, // Include propertyId for frontend routing\n        });\n\n        // Notify other participants that user joined\n        client.to(`conversation-${data.conversationId}`).emit('user-joined', {\n          userId: client.userId,\n          userType: client.userType,\n        });\n\n        this.logger.log(\n          `User ${client.userId} joined conversation ${data.conversationId} for property ${data.propertyId || 'general'}`,\n        );\n      }\n    } catch (error) {\n      client.emit('error', { message: 'Failed to join conversation' });\n      this.logger.error(`Join conversation error: ${error.message}`);\n    }\n  }\n\n  @SubscribeMessage('leave-conversation')\n  async handleLeaveConversation(\n    @MessageBody() data: { conversationId: string },\n    @ConnectedSocket() client: AuthenticatedSocket,\n  ) {\n    client.leave(`conversation-${data.conversationId}`);\n\n    // Notify other participants that user left\n    client.to(`conversation-${data.conversationId}`).emit('user-left', {\n      userId: client.userId,\n      userType: client.userType,\n    });\n\n    this.logger.log(\n      `User ${client.userId} left conversation ${data.conversationId}`,\n    );\n  }\n\n  @SubscribeMessage('send-message')\n  async handleSendMessage(\n    @MessageBody()\n    data: {\n      conversationId?: string;\n      content: string;\n      timelineId?: string;\n      propertyId?: string;\n    },\n    @ConnectedSocket() client: AuthenticatedSocket,\n  ) {\n    try {\n      let message;\n\n      if (data.conversationId) {\n        // Try to send to existing conversation\n        try {\n          const createMessageDto: CreateMessageDto = {\n            conversationId: data.conversationId,\n            senderId: client.userId!,\n            senderType: client.userType!,\n            content: data.content,\n          };\n\n          message = await this.messagingService.sendMessage(createMessageDto);\n        } catch (error) {\n          // If conversation not found and we have timeline info, auto-create\n          if (\n            error.message === 'Conversation not found' &&\n            (data.timelineId || client.clientInfo?.timelineId)\n          ) {\n            message = await this.autoCreateAndSendMessage(data, client);\n          } else {\n            throw error;\n          }\n        }\n      } else {\n        // No conversation ID provided, auto-create\n        message = await this.autoCreateAndSendMessage(data, client);\n      }\n\n      // Broadcast message to all conversation participants\n      const messageData = {\n        id: message.id,\n        conversationId: message.conversationId,\n        senderId: message.senderId,\n        senderType: message.senderType,\n        content: message.content,\n        isRead: message.isRead,\n        readAt: message.readAt,\n        createdAt: message.createdAt,\n        updatedAt: message.updatedAt,\n        propertyId: data.propertyId, // Include propertyId for frontend routing\n      };\n\n      this.server\n        .to(`conversation-${message.conversationId}`)\n        .emit('new-message', messageData);\n\n      // Send notification to the other party if they're not in the conversation room\n      const conversation = await this.messagingService.getConversation(\n        message.conversationId,\n        client.userId!,\n        client.userType!,\n      );\n\n      if (conversation) {\n        const recipientId =\n          client.userType === 'agent'\n            ? conversation.clientId\n            : conversation.agentId;\n\n        // Send notification to recipient's personal room\n        this.server.to(`user-${recipientId}`).emit('message-notification', {\n          conversationId: data.conversationId,\n          senderId: client.userId,\n          senderType: client.userType,\n          content: data.content,\n          timestamp: message.createdAt,\n          propertyId: data.propertyId, // Include propertyId for proper notification routing\n        });\n      }\n\n      this.logger.log(\n        `Message sent in conversation ${message.conversationId} by ${client.userId}`,\n      );\n\n      // Confirm message was sent\n      client.emit('message-sent', {\n        id: message.id,\n        conversationId: message.conversationId,\n      });\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to send message';\n      client.emit('error', { message: errorMessage });\n      this.logger.error(`Send message error: ${errorMessage}`);\n    }\n  }\n\n  @SubscribeMessage('typing-start')\n  async handleTypingStart(\n    @MessageBody() data: { conversationId: string },\n    @ConnectedSocket() client: AuthenticatedSocket,\n  ) {\n    // Broadcast typing indicator to other conversation participants\n    client.to(`conversation-${data.conversationId}`).emit('user-typing', {\n      userId: client.userId,\n      userType: client.userType,\n      isTyping: true,\n    });\n  }\n\n  @SubscribeMessage('typing-stop')\n  async handleTypingStop(\n    @MessageBody() data: { conversationId: string },\n    @ConnectedSocket() client: AuthenticatedSocket,\n  ) {\n    // Broadcast stop typing to other conversation participants\n    client.to(`conversation-${data.conversationId}`).emit('user-typing', {\n      userId: client.userId,\n      userType: client.userType,\n      isTyping: false,\n    });\n  }\n\n  @SubscribeMessage('mark-messages-read')\n  async handleMarkMessagesRead(\n    @MessageBody() data: { conversationId: string },\n    @ConnectedSocket() client: AuthenticatedSocket,\n  ) {\n    try {\n      await this.messagingService.markMessagesAsRead(\n        data.conversationId,\n        client.userId!,\n        client.userType!,\n      );\n\n      // Notify other participants that messages were read\n      client.to(`conversation-${data.conversationId}`).emit('messages-read', {\n        conversationId: data.conversationId,\n        userId: client.userId,\n        userType: client.userType,\n        readAt: new Date(),\n      });\n\n      this.logger.log(\n        `Messages marked as read in conversation ${data.conversationId} by ${client.userId}`,\n      );\n    } catch (error) {\n      client.emit('error', { message: 'Failed to mark messages as read' });\n      this.logger.error(`Mark messages read error: ${error.message}`);\n    }\n  }\n\n  // Helper methods for client session validation\n  private async validateClientSession(\n    sessionToken: string,\n    shareToken: string,\n  ): Promise<boolean> {\n    try {\n      // Import PrismaService - we'll need to inject it or access through messaging service\n      const prisma = this.messagingService['prisma'];\n\n      const clientAuth = await prisma.clientAuth.findFirst({\n        where: {\n          sessionToken,\n          isActive: true,\n        },\n        include: {\n          timeline: true,\n        },\n      });\n\n      return !!(clientAuth && clientAuth.timeline?.shareToken === shareToken);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  private async getTimelineFromShareToken(shareToken: string) {\n    try {\n      const prisma = this.messagingService['prisma'];\n\n      return await prisma.timeline.findUnique({\n        where: { shareToken },\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Auto-create conversation and send message\n  private async autoCreateAndSendMessage(\n    data: {\n      conversationId?: string;\n      content: string;\n      timelineId?: string;\n      propertyId?: string;\n    },\n    client: AuthenticatedSocket,\n  ) {\n    let timelineId: string;\n    let agentId: string;\n    let clientId: string;\n\n    this.logger.log(\n      `Auto-creating conversation for user ${client.userId} (${client.userType})`,\n    );\n\n    if (client.userType === 'agent') {\n      // Agent trying to send message - need timeline info\n      timelineId = data.timelineId!;\n      if (!timelineId) {\n        this.logger.error(\n          'Timeline ID required for agent to create conversation',\n        );\n        throw new Error(\n          'Timeline ID required for agent to create conversation',\n        );\n      }\n\n      // Get timeline to find client - for agents, timelineId might be the actual timeline ID\n      const prisma = this.messagingService['prisma'];\n      const timeline = await prisma.timeline.findUnique({\n        where: { id: timelineId },\n      });\n\n      if (!timeline) {\n        this.logger.error(`Timeline not found with ID: ${timelineId}`);\n        throw new Error('Timeline not found');\n      }\n\n      agentId = client.userId!;\n      clientId = timeline.clientId;\n\n      this.logger.log(\n        `Agent conversation: timeline=${timelineId}, agent=${agentId}, client=${clientId}`,\n      );\n    } else {\n      // Client trying to send message\n      timelineId = client.clientInfo?.timelineId!;\n      if (!timelineId) {\n        this.logger.error(`No timeline info found for client ${client.userId}`);\n        throw new Error('No timeline info found for client');\n      }\n\n      // Get timeline to find agent\n      const timeline = await this.getTimelineFromShareToken(\n        client.clientInfo!.shareToken,\n      );\n      if (!timeline) {\n        this.logger.error(\n          `Timeline not found with shareToken: ${client.clientInfo!.shareToken}`,\n        );\n        throw new Error('Timeline not found');\n      }\n\n      agentId = timeline.agentId;\n      clientId = client.userId!;\n\n      this.logger.log(\n        `Client conversation: timeline=${timelineId}, agent=${agentId}, client=${clientId}`,\n      );\n    }\n\n    // Use the new auto-create method\n    return await this.messagingService.sendMessageWithAutoCreate(\n      agentId,\n      clientId,\n      timelineId,\n      client.userId!,\n      client.userType!,\n      data.content,\n      data.propertyId,\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\messaging.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\messaging.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":388,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":388,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":388,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":388,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":389,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":389,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agentId on an `any` value.","line":389,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":389,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":390,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":390,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clientId on an `any` value.","line":390,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":391,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":391,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timelineId on an `any` value.","line":391,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":391,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":392,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":392,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isActive on an `any` value.","line":392,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":392,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":393,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":393,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastMessageAt on an `any` value.","line":393,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":393,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":394,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":394,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agentUnreadCount on an `any` value.","line":394,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":394,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":395,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":395,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clientUnreadCount on an `any` value.","line":395,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":395,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":396,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":396,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":396,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":397,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":397,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatedAt on an `any` value.","line":397,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":398,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":400,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":398,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":398,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messages on an `any` value.","line":398,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":398,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":401,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":401,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":403,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":403,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":403,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":403,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":404,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":406,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":404,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":404,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":405,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":405,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":405,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":405,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":406,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":406,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":407,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":407,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":407,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":407,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":410,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":410,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":412,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":412,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":412,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":412,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":413,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":413,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":413,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":413,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":414,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":414,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":414,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":414,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":415,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":415,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":415,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":415,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timeline on an `any` value.","line":418,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":418,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":420,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":420,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timeline on an `any` value.","line":420,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":420,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":421,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":421,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timeline on an `any` value.","line":421,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":421,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":430,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":430,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":430,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":430,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":431,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":431,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversationId on an `any` value.","line":431,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":431,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":432,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":432,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .senderId on an `any` value.","line":432,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":432,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":433,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":433,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .senderType on an `any` value.","line":433,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":433,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":434,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":434,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .content on an `any` value.","line":434,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":434,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":435,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":435,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isRead on an `any` value.","line":435,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":436,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":436,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .readAt on an `any` value.","line":436,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":436,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":437,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":437,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":437,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":437,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":438,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":438,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatedAt on an `any` value.","line":438,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":438,"endColumn":35}],"suppressedMessages":[],"errorCount":65,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  NotFoundException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\n\nexport interface CreateConversationDto {\n  agentId: string;\n  clientId: string;\n  timelineId: string;\n  propertyId?: string;\n}\n\nexport interface CreateMessageDto {\n  conversationId: string;\n  senderId: string;\n  senderType: 'agent' | 'client';\n  content: string;\n}\n\nexport interface MessageResponse {\n  id: string;\n  conversationId: string;\n  senderId: string;\n  senderType: 'agent' | 'client';\n  content: string;\n  isRead: boolean;\n  readAt: Date | null;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ConversationResponse {\n  id: string;\n  agentId: string;\n  clientId: string;\n  timelineId: string;\n  propertyId?: string;\n  isActive: boolean;\n  lastMessageAt: Date;\n  agentUnreadCount: number;\n  clientUnreadCount: number;\n  createdAt: Date;\n  updatedAt: Date;\n  messages?: MessageResponse[];\n  agent?: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  client?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  timeline?: {\n    id: string;\n    title: string;\n  };\n  property?: {\n    id: string;\n    address: string;\n  };\n}\n\n@Injectable()\nexport class MessagingService {\n  constructor(private prisma: PrismaService) {}\n\n  // Create or get existing conversation\n  async createOrGetConversation(\n    createConversationDto: CreateConversationDto,\n  ): Promise<ConversationResponse> {\n    const { agentId, clientId, timelineId, propertyId } = createConversationDto;\n\n    // Check if conversation already exists\n    let conversation = await this.prisma.conversation.findFirst({\n      where: {\n        agentId,\n        clientId,\n        timelineId,\n        propertyId: propertyId || null,\n      },\n      include: {\n        agent: {\n          include: { profile: true },\n        },\n        client: true,\n        timeline: true,\n        property: true,\n        messages: {\n          take: 20,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n\n    // Create new conversation if it doesn't exist\n    if (!conversation) {\n      conversation = await this.prisma.conversation.create({\n        data: {\n          agentId,\n          clientId,\n          timelineId,\n          propertyId: propertyId || null,\n        },\n        include: {\n          agent: {\n            include: { profile: true },\n          },\n          client: true,\n          timeline: true,\n          property: true,\n          messages: {\n            take: 20,\n            orderBy: { createdAt: 'desc' },\n          },\n        },\n      });\n    }\n\n    return this.formatConversationResponse(conversation);\n  }\n\n  // Get conversation by ID with authorization check\n  async getConversation(\n    conversationId: string,\n    userId: string,\n    userType: 'agent' | 'client',\n  ): Promise<ConversationResponse> {\n    const conversation = await this.prisma.conversation.findUnique({\n      where: { id: conversationId },\n      include: {\n        agent: {\n          include: { profile: true },\n        },\n        client: true,\n        timeline: true,\n        messages: {\n          take: 50,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n\n    if (!conversation) {\n      throw new NotFoundException('Conversation not found');\n    }\n\n    // Check authorization\n    if (userType === 'agent' && conversation.agentId !== userId) {\n      throw new ForbiddenException(\n        'Not authorized to access this conversation',\n      );\n    }\n\n    if (userType === 'client' && conversation.clientId !== userId) {\n      throw new ForbiddenException(\n        'Not authorized to access this conversation',\n      );\n    }\n\n    return this.formatConversationResponse(conversation);\n  }\n\n  // Get conversations for a user\n  async getConversations(\n    userId: string,\n    userType: 'agent' | 'client',\n  ): Promise<ConversationResponse[]> {\n    const whereClause =\n      userType === 'agent' ? { agentId: userId } : { clientId: userId };\n\n    const conversations = await this.prisma.conversation.findMany({\n      where: {\n        ...whereClause,\n        isActive: true,\n      },\n      include: {\n        agent: {\n          include: { profile: true },\n        },\n        client: true,\n        timeline: true,\n        messages: {\n          take: 1,\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n      orderBy: { lastMessageAt: 'desc' },\n    });\n\n    return conversations.map((conversation) =>\n      this.formatConversationResponse(conversation),\n    );\n  }\n\n  // Send a message (with auto-conversation creation)\n  async sendMessage(\n    createMessageDto: CreateMessageDto,\n  ): Promise<MessageResponse> {\n    const { conversationId, senderId, senderType, content } = createMessageDto;\n\n    // Verify conversation exists and user has access\n    const conversation = await this.prisma.conversation.findUnique({\n      where: { id: conversationId },\n    });\n\n    if (!conversation) {\n      throw new NotFoundException('Conversation not found');\n    }\n\n    // Check authorization\n    if (senderType === 'agent' && conversation.agentId !== senderId) {\n      throw new ForbiddenException(\n        'Not authorized to send message in this conversation',\n      );\n    }\n\n    if (senderType === 'client' && conversation.clientId !== senderId) {\n      throw new ForbiddenException(\n        'Not authorized to send message in this conversation',\n      );\n    }\n\n    // Create message\n    const message = await this.prisma.message.create({\n      data: {\n        conversationId,\n        senderId,\n        senderType,\n        content,\n      },\n    });\n\n    // Update conversation with new message timestamp and unread counts\n    const updateData = {\n      lastMessageAt: new Date(),\n      ...(senderType === 'agent'\n        ? { clientUnreadCount: { increment: 1 } }\n        : { agentUnreadCount: { increment: 1 } }),\n    };\n\n    await this.prisma.conversation.update({\n      where: { id: conversationId },\n      data: updateData,\n    });\n\n    return this.formatMessageResponse(message);\n  }\n\n  // Send message with auto-conversation creation\n  async sendMessageWithAutoCreate(\n    agentId: string,\n    clientId: string,\n    timelineId: string,\n    senderId: string,\n    senderType: 'agent' | 'client',\n    content: string,\n    propertyId?: string,\n  ): Promise<MessageResponse> {\n    // First, try to find or create the conversation\n    const conversation = await this.createOrGetConversation({\n      agentId,\n      clientId,\n      timelineId,\n      propertyId,\n    });\n\n    // Now send the message to this conversation\n    return this.sendMessage({\n      conversationId: conversation.id,\n      senderId,\n      senderType,\n      content,\n    });\n  }\n\n  // Mark messages as read\n  async markMessagesAsRead(\n    conversationId: string,\n    userId: string,\n    userType: 'agent' | 'client',\n  ): Promise<void> {\n    // Verify conversation exists and user has access\n    const conversation = await this.prisma.conversation.findUnique({\n      where: { id: conversationId },\n    });\n\n    if (!conversation) {\n      throw new NotFoundException('Conversation not found');\n    }\n\n    // Check authorization\n    if (userType === 'agent' && conversation.agentId !== userId) {\n      throw new ForbiddenException(\n        'Not authorized to access this conversation',\n      );\n    }\n\n    if (userType === 'client' && conversation.clientId !== userId) {\n      throw new ForbiddenException(\n        'Not authorized to access this conversation',\n      );\n    }\n\n    // Update unread messages to read\n    await this.prisma.message.updateMany({\n      where: {\n        conversationId,\n        senderType: userType === 'agent' ? 'client' : 'agent', // Mark messages from the other party as read\n        isRead: false,\n      },\n      data: {\n        isRead: true,\n        readAt: new Date(),\n      },\n    });\n\n    // Reset unread count for this user\n    const updateData =\n      userType === 'agent' ? { agentUnreadCount: 0 } : { clientUnreadCount: 0 };\n\n    await this.prisma.conversation.update({\n      where: { id: conversationId },\n      data: updateData,\n    });\n  }\n\n  // Get messages for a conversation with pagination\n  async getMessages(\n    conversationId: string,\n    userId: string,\n    userType: 'agent' | 'client',\n    page: number = 1,\n    limit: number = 50,\n  ): Promise<{ messages: MessageResponse[]; hasMore: boolean; total: number }> {\n    // Verify conversation exists and user has access\n    const conversation = await this.prisma.conversation.findUnique({\n      where: { id: conversationId },\n    });\n\n    if (!conversation) {\n      throw new NotFoundException('Conversation not found');\n    }\n\n    // Check authorization\n    if (userType === 'agent' && conversation.agentId !== userId) {\n      throw new ForbiddenException(\n        'Not authorized to access this conversation',\n      );\n    }\n\n    if (userType === 'client' && conversation.clientId !== userId) {\n      throw new ForbiddenException(\n        'Not authorized to access this conversation',\n      );\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [messages, total] = await Promise.all([\n      this.prisma.message.findMany({\n        where: { conversationId },\n        skip,\n        take: limit,\n        orderBy: { createdAt: 'asc' },\n      }),\n      this.prisma.message.count({\n        where: { conversationId },\n      }),\n    ]);\n\n    const hasMore = skip + messages.length < total;\n\n    return {\n      messages: messages.map((message) => this.formatMessageResponse(message)),\n      hasMore,\n      total,\n    };\n  }\n\n  // Helper method to format conversation response\n  private formatConversationResponse(conversation: any): ConversationResponse {\n    return {\n      id: conversation.id,\n      agentId: conversation.agentId,\n      clientId: conversation.clientId,\n      timelineId: conversation.timelineId,\n      isActive: conversation.isActive,\n      lastMessageAt: conversation.lastMessageAt,\n      agentUnreadCount: conversation.agentUnreadCount,\n      clientUnreadCount: conversation.clientUnreadCount,\n      createdAt: conversation.createdAt,\n      updatedAt: conversation.updatedAt,\n      messages: conversation.messages?.map((message: any) =>\n        this.formatMessageResponse(message),\n      ),\n      agent: conversation.agent\n        ? {\n            id: conversation.agent.id,\n            name: conversation.agent.profile\n              ? `${conversation.agent.profile.firstName} ${conversation.agent.profile.lastName}`\n              : conversation.agent.email,\n            email: conversation.agent.email,\n          }\n        : undefined,\n      client: conversation.client\n        ? {\n            id: conversation.client.id,\n            firstName: conversation.client.firstName,\n            lastName: conversation.client.lastName,\n            email: conversation.client.email,\n          }\n        : undefined,\n      timeline: conversation.timeline\n        ? {\n            id: conversation.timeline.id,\n            title: conversation.timeline.title,\n          }\n        : undefined,\n    };\n  }\n\n  // Helper method to format message response\n  private formatMessageResponse(message: any): MessageResponse {\n    return {\n      id: message.id,\n      conversationId: message.conversationId,\n      senderId: message.senderId,\n      senderType: message.senderType,\n      content: message.content,\n      isRead: message.isRead,\n      readAt: message.readAt,\n      createdAt: message.createdAt,\n      updatedAt: message.updatedAt,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\messaging\\websocket-v2.gateway.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UseGuards' is defined but never used.","line":11,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":51,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":73,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":73,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":73,"column":61,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":73,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":74,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":75,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sub on an `any` value.","line":75,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":75,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":75,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":76,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":24,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":101,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":123,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":123,"endColumn":37},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":127,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":127,"endColumn":40,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4068,4068],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4068,4068],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":129,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":129,"endColumn":41,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4123,4123],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4123,4123],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":131,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":131,"endColumn":49,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4192,4192],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4192,4192],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":169,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":169,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":169,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":244,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":21},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":352,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":352,"endColumn":54,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[11511,11511],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[11511,11511],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":352,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":352,"endColumn":50},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":353,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":353,"endColumn":50,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[11565,11565],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[11565,11565],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":356,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":356,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":360,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":360,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .messages on an `any` value.","line":360,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `any[]`.","line":361,"column":61,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":361,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":364,"column":105,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":364,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":364,"column":140,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":364,"endColumn":146},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":370,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":370,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":370,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":40},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":415,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":415,"endColumn":58,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[13740,13740],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[13740,13740],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":436,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":436,"endColumn":57,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[14378,14378],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[14378,14378],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":467,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":467,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":535,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":535,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":536,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":536,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":542,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":542,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":542,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":542,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":556,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":556,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":556,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":556,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":570,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":570,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":570,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":570,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":748,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":748,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":748,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":748,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":828,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":828,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":828,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":828,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":842,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":842,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":843,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":843,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sub on an `any` value.","line":843,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":843,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":843,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":843,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":843,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":843,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":865,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":865,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":880,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":880,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":903,"column":29,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":903,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":904,"column":30,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":904,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":904,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":904,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":905,"column":30,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":905,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":905,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":905,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":911,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":911,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":911,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":911,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":913,"column":21,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":913,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":914,"column":18,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":914,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":917,"column":45,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":917,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .content on an `any` value.","line":917,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":917,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":921,"column":58,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":921,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .content on an `any` value.","line":921,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":921,"endColumn":73}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  MessageBody,\n  ConnectedSocket,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { Logger, UseGuards } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { MessageV2Service } from './message-v2.service';\nimport { ConversationV2Service } from './conversation-v2.service';\nimport { PrismaService } from '../prisma/prisma.service';\n\ntype AuthenticatedSocket = Socket & {\n  userId?: string;\n  userType?: 'AGENT' | 'CLIENT';\n  timelineId?: string;\n};\n\n@WebSocketGateway({\n  namespace: '/messaging-v2', // Separate namespace for V2\n  cors: {\n    origin: true, // SIMPLIFIED: Allow all origins for development\n    credentials: true,\n  },\n})\nexport class WebSocketV2Gateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  @WebSocketServer()\n  server: Server;\n\n  private logger = new Logger('WebSocketV2Gateway');\n\n  // Track joined users per property to prevent duplicates\n  private joinedPropertyUsers = new Map<string, Set<string>>();\n\n  constructor(\n    private messageService: MessageV2Service,\n    private conversationService: ConversationV2Service,\n    private jwtService: JwtService,\n    private prisma: PrismaService,\n  ) {}\n\n  // Handle client connection - SIMPLIFIED AUTH\n  async handleConnection(client: AuthenticatedSocket) {\n    try {\n      const token = client.handshake.auth?.token;\n      let userType = client.handshake.auth?.userType as 'AGENT' | 'CLIENT';\n      const timelineId = client.handshake.auth?.timelineId;\n\n      this.logger.log(\n        `🔌 Connection attempt: userType=${userType}, hasToken=${!!token}, timelineId=${timelineId}`,\n      );\n\n      // Ensure connection isn't closed prematurely\n      if (client.disconnected) {\n        this.logger.warn(\n          'Client already disconnected during connection attempt',\n        );\n        return;\n      }\n\n      // SIMPLIFIED: Allow connections without strict token validation\n      let userId: string;\n\n      if (userType === 'AGENT' && token) {\n        // Try to extract from JWT, but don't fail if it doesn't work\n        try {\n          const payload = await this.jwtService.verifyAsync(token);\n          userId =\n            payload.sub || payload.userId || payload.id || 'agent_fallback';\n        } catch (error) {\n          this.logger.warn('JWT validation failed, using fallback ID');\n          userId = 'agent_fallback';\n        }\n      } else if (userType === 'CLIENT') {\n        // For clients, create a more reliable ID\n        if (timelineId) {\n          // Try to find the actual client ID from the timeline\n          try {\n            const timeline = await this.prisma.timeline.findUnique({\n              where: { id: timelineId },\n              include: { client: true },\n            });\n\n            if (timeline?.client) {\n              userId = timeline.client.id;\n              this.logger.log(\n                `✅ Found real client ID: ${userId} for timeline: ${timelineId}`,\n              );\n            } else {\n              userId = `client_${timelineId}`;\n              this.logger.log(\n                `⚠️ Using synthetic client ID: ${userId} for timeline: ${timelineId}`,\n              );\n            }\n          } catch (error) {\n            userId = `client_${timelineId}`;\n            this.logger.warn(\n              `Failed to find client for timeline ${timelineId}, using synthetic ID: ${userId}`,\n            );\n          }\n        } else {\n          // Anonymous client without timeline\n          userId = `anonymous_${Date.now()}`;\n        }\n      } else {\n        // If no userType provided, allow as anonymous\n        userId = `anonymous_${Date.now()}`;\n        userType = 'CLIENT';\n      }\n\n      this.logger.log(\n        `✅ Allowing connection with userId: ${userId}, userType: ${userType}`,\n      );\n\n      client.userId = userId;\n      client.userType = userType;\n      client.timelineId = timelineId;\n\n      // Join user-specific room\n      if (userType === 'AGENT') {\n        client.join(`agent:${userId}`);\n      } else {\n        client.join(`client:${userId}`);\n        if (timelineId) {\n          client.join(`timeline:${timelineId}`);\n        }\n      }\n\n      this.logger.log(\n        `✅ Client connected: ${userId} (${userType}) - Socket: ${client.id}`,\n      );\n\n      // Final check before sending confirmation\n      if (client.disconnected) {\n        this.logger.warn(\n          'Client disconnected before confirmation could be sent',\n        );\n        return;\n      }\n\n      // Send confirmation to client\n      client.emit('connected', {\n        userId,\n        userType,\n        socketId: client.id,\n        message: 'Successfully connected to V2 messaging',\n      });\n\n      // Broadcast user online status to relevant rooms\n      if (userType === 'AGENT') {\n        client.to(`agent:${userId}`).emit('user_online', { userId, userType });\n      } else {\n        if (timelineId) {\n          client\n            .to(`timeline:${timelineId}`)\n            .emit('user_online', { userId, userType });\n        }\n      }\n    } catch (error) {\n      this.logger.error('❌ Connection error:', error);\n      client.emit('error', {\n        message: 'Authentication failed',\n        details: error.message,\n      });\n      client.disconnect();\n    }\n  }\n\n  // Handle client disconnection\n  handleDisconnect(client: AuthenticatedSocket) {\n    if (client.userId) {\n      this.logger.log(\n        `Client disconnected: ${client.userId} (${client.userType})`,\n      );\n\n      // Cleanup: Remove user from all joined properties\n      const userKey = `${client.userId}-${client.userType}`;\n      for (const [propertyId, users] of this.joinedPropertyUsers.entries()) {\n        if (users.has(userKey)) {\n          users.delete(userKey);\n          this.logger.log(\n            `🧹 Removed ${userKey} from property ${propertyId} on disconnect`,\n          );\n\n          // Clean up empty property sets\n          if (users.size === 0) {\n            this.joinedPropertyUsers.delete(propertyId);\n          }\n        }\n      }\n    }\n  }\n\n  // Join property conversation room (V2 event name)\n  @SubscribeMessage('join-property-conversation')\n  async handleJoinPropertyConversation(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody() data: { propertyId: string },\n  ) {\n    // DEBUG: Confirm this NEW code is running\n    this.logger.log(\n      `🚀 NEW CODE: Join request for property ${data.propertyId} from user ${client.userId}-${client.userType}`,\n    );\n\n    try {\n      if (!client.userId || !client.userType) {\n        client.emit('error', { message: 'Authentication required' });\n        return;\n      }\n\n      // CRITICAL FIX: Check if user has already joined this property conversation\n      const userKey = `${client.userId}-${client.userType}`;\n      if (!this.joinedPropertyUsers.has(data.propertyId)) {\n        this.joinedPropertyUsers.set(data.propertyId, new Set());\n      }\n\n      const propertyUsers = this.joinedPropertyUsers.get(data.propertyId)!; // Non-null assertion since we just set it\n      if (propertyUsers.has(userKey)) {\n        this.logger.log(\n          `🔄 User ${userKey} already joined property ${data.propertyId}, skipping duplicate`,\n        );\n        return; // Skip processing duplicate join request\n      }\n\n      // Mark user as joined for this property\n      propertyUsers.add(userKey);\n\n      // Get or find the conversation for this property\n      let conversation;\n      let shouldCreateConversation = false;\n\n      try {\n        conversation = await this.conversationService.getConversationByProperty(\n          data.propertyId,\n          client.userId,\n          client.userType,\n        );\n      } catch (error) {\n        // Conversation doesn't exist, we need to handle this gracefully\n        shouldCreateConversation = true;\n      }\n\n      // If conversation doesn't exist, try to create it with proper fallback\n      if (shouldCreateConversation) {\n        try {\n          // Get property details to find the associated timeline and client\n          const property = await this.prisma.property.findUnique({\n            where: { id: data.propertyId },\n            include: {\n              timeline: {\n                include: { client: true },\n              },\n            },\n          });\n\n          if (!property) {\n            this.logger.warn(\n              `Property ${data.propertyId} not found for user ${client.userId}`,\n            );\n            // Send empty conversation state instead of error\n            client.emit('property-conversation-joined', {\n              propertyId: data.propertyId,\n              conversationId: null,\n              messages: [],\n              status: 'property_not_found',\n            });\n            return;\n          }\n\n          if (!property.timeline) {\n            this.logger.warn(\n              `Property ${data.propertyId} has no associated timeline`,\n            );\n            // Send empty conversation state instead of error\n            client.emit('property-conversation-joined', {\n              propertyId: data.propertyId,\n              conversationId: null,\n              messages: [],\n              status: 'timeline_not_found',\n            });\n            return;\n          }\n\n          // Create conversation for both agents and clients\n          this.logger.log(\n            `Creating new conversation for property ${data.propertyId} by ${client.userType} ${client.userId}`,\n          );\n\n          // Determine the agent ID for the conversation\n          let agentId = client.userType === 'AGENT' ? client.userId : null;\n\n          if (!agentId) {\n            // For clients, try to find an associated agent or use fallback\n            agentId = property.timeline.client.agentId;\n\n            if (!agentId) {\n              // Find the first available user as fallback agent\n              const fallbackAgent = await this.prisma.user.findFirst({\n                where: { isActive: true },\n              });\n\n              if (fallbackAgent) {\n                agentId = fallbackAgent.id;\n                this.logger.log(\n                  `Using fallback agent ${agentId} for client conversation`,\n                );\n              } else {\n                this.logger.error(\n                  'No agents available for client conversation',\n                );\n                client.emit('property-conversation-joined', {\n                  propertyId: data.propertyId,\n                  conversationId: null,\n                  messages: [],\n                  status: 'no_agents_available',\n                });\n                return;\n              }\n            }\n          }\n\n          conversation =\n            await this.conversationService.getOrCreatePropertyConversation({\n              propertyId: data.propertyId,\n              timelineId: property.timeline.id,\n              agentId: agentId,\n              clientId: property.timeline.client.id,\n            });\n        } catch (createError) {\n          this.logger.error(\n            'Failed to create property conversation:',\n            createError,\n          );\n          // Send empty conversation state instead of error to prevent infinite loops\n          client.emit('property-conversation-joined', {\n            propertyId: data.propertyId,\n            conversationId: null,\n            messages: [],\n            status: 'creation_failed',\n          });\n          return;\n        }\n      }\n\n      // Join conversation-specific room\n      client.join(`conversation:${conversation.id}`);\n      client.join(`property:${data.propertyId}`);\n\n      this.logger.log(\n        `✅ User ${client.userId} joined property conversation ${conversation.id} for property ${data.propertyId}`,\n      );\n\n      // SERVER-SIDE MESSAGE DEDUPLICATION: Remove duplicate messages before sending\n      const rawMessages = conversation.messages || [];\n      const deduplicatedMessages = this.deduplicateMessages(rawMessages);\n\n      this.logger.log(\n        `📋 Property ${data.propertyId}: Sending ${deduplicatedMessages.length} messages (${rawMessages.length} raw, removed ${rawMessages.length - deduplicatedMessages.length} duplicates)`,\n      );\n\n      // Send back the conversation data with deduplicated messages\n      client.emit('property-conversation-joined', {\n        propertyId: data.propertyId,\n        conversationId: conversation.id,\n        messages: deduplicatedMessages,\n        status: 'success',\n      });\n    } catch (error) {\n      this.logger.error('❌ Join property conversation error:', error);\n      // Send empty conversation state instead of generic error to prevent infinite loops\n      client.emit('property-conversation-joined', {\n        propertyId: data.propertyId,\n        conversationId: null,\n        messages: [],\n        status: 'error',\n      });\n    }\n  }\n\n  // Keep the original join-conversation for backward compatibility\n  @SubscribeMessage('join-conversation')\n  async handleJoinConversation(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody() data: { conversationId: string },\n  ) {\n    try {\n      // Verify user has access to this conversation\n      const conversation = await this.conversationService.getConversationById(\n        data.conversationId,\n      );\n\n      if (\n        client.userType === 'AGENT' &&\n        conversation.agentId !== client.userId\n      ) {\n        client.emit('error', { message: 'Access denied to conversation' });\n        return;\n      }\n\n      if (\n        client.userType === 'CLIENT' &&\n        conversation.clientId !== client.userId\n      ) {\n        client.emit('error', { message: 'Access denied to conversation' });\n        return;\n      }\n\n      // Join conversation-specific room\n      client.join(`conversation:${data.conversationId}`);\n\n      this.logger.log(\n        `User ${client.userId} joined conversation ${data.conversationId}`,\n      );\n\n      client.emit('joined-conversation', {\n        conversationId: data.conversationId,\n      });\n    } catch (error) {\n      this.logger.error('Join conversation error:', error);\n      client.emit('error', { message: 'Failed to join conversation' });\n    }\n  }\n\n  // Leave conversation room\n  @SubscribeMessage('leave-conversation')\n  handleLeaveConversation(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody() data: { conversationId: string },\n  ) {\n    client.leave(`conversation:${data.conversationId}`);\n    this.logger.log(\n      `User ${client.userId} left conversation ${data.conversationId}`,\n    );\n  }\n\n  // Send message by property ID (V2 property-based messaging)\n  @SubscribeMessage('send-property-message')\n  async handleSendPropertyMessage(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody()\n    data: {\n      propertyId: string;\n      content: string;\n      type?: 'TEXT' | 'IMAGE' | 'FILE';\n    },\n  ) {\n    try {\n      if (!client.userId || !client.userType) {\n        client.emit('error', { message: 'Authentication required' });\n        return;\n      }\n\n      // Get or create the conversation for this property\n      let conversation;\n      try {\n        conversation = await this.conversationService.getConversationByProperty(\n          data.propertyId,\n          client.userId,\n          client.userType,\n        );\n      } catch (error) {\n        // If conversation doesn't exist, get property details and try to create it\n        const property = await this.prisma.property.findUnique({\n          where: { id: data.propertyId },\n          include: {\n            timeline: {\n              include: { client: true },\n            },\n          },\n        });\n\n        if (!property || !property.timeline) {\n          this.logger.error(\n            `Cannot send message: property ${data.propertyId} or timeline not found`,\n          );\n          client.emit('message-error', {\n            propertyId: data.propertyId,\n            error: 'Property or timeline not found',\n          });\n          return;\n        }\n\n        // Create conversation with correct IDs\n        let agentId, clientId;\n\n        if (client.userType === 'AGENT') {\n          agentId = client.userId;\n          clientId = property.timeline.client.id;\n        } else {\n          // For CLIENT, determine the correct client ID\n          agentId = property.timeline.client.agentId;\n\n          // If the WebSocket client ID is the real client ID from database, use it\n          if (client.userId === property.timeline.client.id) {\n            clientId = client.userId;\n          } else if (\n            client.userId.startsWith('client_') &&\n            client.timelineId === property.timeline.id\n          ) {\n            // If it's a synthetic ID for this timeline, use the real client ID\n            clientId = property.timeline.client.id;\n            this.logger.log(\n              `🔄 Mapping synthetic client ID ${client.userId} to real ID ${clientId}`,\n            );\n          } else {\n            // Fallback: use the client ID from timeline\n            clientId = property.timeline.client.id;\n            this.logger.warn(\n              `⚠️ Using timeline client ID as fallback: ${clientId}`,\n            );\n          }\n        }\n\n        if (!agentId) {\n          this.logger.error(\n            `Cannot send message: no agent available for property ${data.propertyId}`,\n          );\n          client.emit('message-error', {\n            propertyId: data.propertyId,\n            error: 'No agent available',\n          });\n          return;\n        }\n\n        conversation =\n          await this.conversationService.getOrCreatePropertyConversation({\n            propertyId: data.propertyId,\n            timelineId: property.timeline.id,\n            agentId: agentId,\n            clientId: clientId,\n          });\n      }\n\n      // Send message through service using property-based method (relaxed access control)\n      const message = await this.messageService.sendPropertyMessage({\n        conversationId: conversation.id,\n        senderId: client.userId,\n        senderType: client.userType,\n        content: data.content,\n        type: data.type || 'TEXT',\n      });\n\n      // Debug logging for message broadcast\n      this.logger.log(\n        `📤 Broadcasting message from ${client.userType} ${client.userId}:`,\n        {\n          messageId: message.id,\n          senderType: message.sender.type,\n          content: message.content.substring(0, 20),\n          conversationId: conversation.id,\n          propertyId: data.propertyId,\n        },\n      );\n\n      // Broadcast to property room only (includes all participants)\n      this.server\n        .to(`property:${data.propertyId}`)\n        .emit('new-message', message);\n\n      // Send confirmation back to sender\n      client.emit('message-sent', {\n        messageId: message.id,\n        propertyId: data.propertyId,\n        conversationId: conversation.id,\n        success: true,\n      });\n\n      this.logger.log(\n        `✅ Property message sent by ${client.userType} ${client.userId} for property ${data.propertyId}`,\n      );\n    } catch (error) {\n      this.logger.error('❌ Send property message error:', error);\n      client.emit('message-error', {\n        propertyId: data.propertyId,\n        error: 'Failed to send message',\n      });\n    }\n  }\n\n  // Send message (original conversation-based method)\n  @SubscribeMessage('send-message')\n  async handleSendMessage(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody()\n    data: {\n      conversationId: string;\n      content: string;\n      type?: 'TEXT' | 'IMAGE' | 'FILE';\n    },\n  ) {\n    try {\n      if (!client.userId || !client.userType) {\n        client.emit('error', { message: 'Authentication required' });\n        return;\n      }\n\n      // Send message through service\n      const message = await this.messageService.sendMessage({\n        conversationId: data.conversationId,\n        senderId: client.userId,\n        senderType: client.userType,\n        content: data.content,\n        type: data.type || 'TEXT',\n      });\n\n      // Debug logging for regular message broadcast\n      this.logger.log(\n        `📤 Broadcasting conversation message from ${client.userType} ${client.userId}:`,\n        {\n          messageId: message.id,\n          senderType: message.sender.type,\n          content: message.content.substring(0, 20),\n          conversationId: data.conversationId,\n        },\n      );\n\n      // Broadcast to conversation room\n      this.server\n        .to(`conversation:${data.conversationId}`)\n        .emit('new-message', message);\n\n      // Send confirmation back to sender\n      client.emit('message-sent', {\n        messageId: message.id,\n        conversationId: data.conversationId,\n        success: true,\n      });\n\n      // Send notification to the other party\n      const conversation = await this.conversationService.getConversationById(\n        data.conversationId,\n      );\n      const recipientRoom =\n        client.userType === 'AGENT'\n          ? `client:${conversation.clientId}`\n          : `agent:${conversation.agentId}`;\n\n      this.server.to(recipientRoom).emit('message-notification', {\n        conversationId: data.conversationId,\n        propertyAddress: conversation.property.address,\n        senderType: client.userType,\n        preview: data.content.substring(0, 100),\n      });\n\n      this.logger.log(`✅ Message sent in conversation ${data.conversationId}`);\n    } catch (error) {\n      this.logger.error('Send message error:', error);\n      client.emit('message-error', {\n        conversationId: data.conversationId,\n        error: 'Failed to send message',\n      });\n    }\n  }\n\n  // Typing indicators - Fixed to support propertyId from frontend\n  @SubscribeMessage('typing-start')\n  handleTypingStart(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody() data: { propertyId: string },\n  ) {\n    client.to(`property:${data.propertyId}`).emit('user-typing', {\n      propertyId: data.propertyId,\n      userId: client.userId,\n      isTyping: true,\n    });\n  }\n\n  @SubscribeMessage('typing-stop')\n  handleTypingStop(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody() data: { propertyId: string },\n  ) {\n    client.to(`property:${data.propertyId}`).emit('user-typing', {\n      propertyId: data.propertyId,\n      userId: client.userId,\n      isTyping: false,\n    });\n  }\n\n  // Mark messages as read (V2 event name)\n  @SubscribeMessage('mark-messages-read')\n  async handleMarkMessagesRead(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody() data: { conversationId: string },\n  ) {\n    try {\n      if (!client.userId || !client.userType) {\n        this.logger.warn('Mark messages read: Authentication required');\n        client.emit('error', { message: 'Authentication required' });\n        return;\n      }\n\n      this.logger.log(\n        `📖 Marking messages as read for user ${client.userId} in conversation ${data.conversationId}`,\n      );\n\n      // Verify the conversation exists and user has access\n      const conversation = await this.conversationService.getConversationById(\n        data.conversationId,\n      );\n\n      if (\n        client.userType === 'AGENT' &&\n        conversation.agentId !== client.userId\n      ) {\n        throw new Error('Agent does not have access to this conversation');\n      }\n      if (\n        client.userType === 'CLIENT' &&\n        conversation.clientId !== client.userId\n      ) {\n        throw new Error('Client does not have access to this conversation');\n      }\n\n      // Mark all messages as read for this user in this conversation\n      await this.messageService.markAllAsRead(\n        data.conversationId,\n        client.userId,\n        client.userType,\n      );\n\n      // Notify other party that messages were read\n      client.to(`conversation:${data.conversationId}`).emit('messages-read', {\n        conversationId: data.conversationId,\n        userId: client.userId,\n        readAt: new Date().toISOString(),\n      });\n\n      this.logger.log(\n        `✅ User ${client.userId} marked messages as read in conversation ${data.conversationId}`,\n      );\n\n      // Send success response to the client\n      client.emit('messages-marked-read', {\n        conversationId: data.conversationId,\n        success: true,\n      });\n    } catch (error) {\n      this.logger.error('❌ Mark messages read error:', error);\n      client.emit('error', {\n        message: 'Failed to mark messages as read',\n        details: error.message,\n      });\n    }\n  }\n\n  // Mark message as read (original event)\n  @SubscribeMessage('mark-read')\n  async handleMarkRead(\n    @ConnectedSocket() client: AuthenticatedSocket,\n    @MessageBody()\n    data: { propertyId?: string; messageId?: string; conversationId?: string },\n  ) {\n    try {\n      // Handle property-based read marking for clients\n      if (data.propertyId) {\n        // Find the conversation for this property - try to get it without strict access checks\n        try {\n          const conversation =\n            await this.conversationService.getConversationByProperty(\n              data.propertyId,\n              client.userId!,\n              client.userType!,\n            );\n\n          await this.messageService.markAllAsRead(\n            conversation.id,\n            client.userId!,\n            client.userType!,\n          );\n\n          // Notify other party that message was read\n          client.to(`conversation:${conversation.id}`).emit('message-read', {\n            conversationId: conversation.id,\n            propertyId: data.propertyId,\n            readBy: client.userId,\n          });\n\n          client.emit('read-confirmed', {\n            success: true,\n            propertyId: data.propertyId,\n          });\n        } catch (error) {\n          this.logger.error('Failed to mark property messages as read:', error);\n          // Don't fail silently for property-based reads\n          client.emit('read-confirmed', {\n            success: true,\n            propertyId: data.propertyId,\n          });\n        }\n      }\n      // Handle conversation-based read marking for agents\n      else if (data.conversationId) {\n        if (data.messageId) {\n          await this.messageService.markAsRead(data.messageId, client.userId!);\n        } else {\n          await this.messageService.markAllAsRead(\n            data.conversationId,\n            client.userId!,\n            client.userType!,\n          );\n        }\n\n        // Notify other party that message was read\n        client.to(`conversation:${data.conversationId}`).emit('message-read', {\n          conversationId: data.conversationId,\n          messageId: data.messageId,\n          readBy: client.userId,\n        });\n\n        client.emit('read-confirmed', {\n          success: true,\n          conversationId: data.conversationId,\n        });\n      } else {\n        throw new Error('Either propertyId or conversationId must be provided');\n      }\n    } catch (error) {\n      this.logger.error('❌ Mark messages read error:', error);\n      client.emit('error', {\n        message: 'Failed to mark messages as read',\n        details: error.message,\n      });\n    }\n  }\n\n  // Helper method to extract user ID from token\n  private async extractUserIdFromToken(\n    token: string,\n    userType: 'AGENT' | 'CLIENT',\n    timelineId?: string,\n  ): Promise<string | null> {\n    try {\n      // For AGENT tokens, validate JWT\n      if (userType === 'AGENT') {\n        const payload = await this.jwtService.verifyAsync(token);\n        return payload.sub || payload.userId || payload.id;\n      }\n\n      // For CLIENT tokens, try to find the actual client ID using the timeline\n      if (userType === 'CLIENT') {\n        // If we have a timeline ID, try to find the associated client\n        if (timelineId) {\n          try {\n            const timeline = await this.prisma.timeline.findUnique({\n              where: { id: timelineId },\n              include: { client: true },\n            });\n\n            if (timeline && timeline.client) {\n              this.logger.log(\n                `Found client ${timeline.client.id} for timeline ${timelineId}`,\n              );\n              return timeline.client.id;\n            }\n          } catch (error) {\n            this.logger.warn(\n              `Failed to find client for timeline ${timelineId}:`,\n              error.message,\n            );\n          }\n        }\n\n        // Fallback: Create a synthetic client ID from session token\n        if (token && token.length > 10) {\n          return `client_${token.substring(0, 12)}`;\n        }\n      }\n\n      return null;\n    } catch (error) {\n      this.logger.error(\n        `User ID extraction failed for ${userType}:`,\n        error.message,\n      );\n      return null;\n    }\n  }\n\n  // Helper method to broadcast property-specific notifications\n  broadcastPropertyNotification(timelineId: string, notification: any) {\n    this.server\n      .to(`timeline:${timelineId}`)\n      .emit('property-notification', notification);\n  }\n\n  // SERVER-SIDE MESSAGE DEDUPLICATION: Remove duplicate messages based on ID\n  private deduplicateMessages(messages: any[]): any[] {\n    if (!messages || messages.length === 0) {\n      return [];\n    }\n\n    const seen = new Set<string>();\n    const deduplicatedMessages: any[] = [];\n\n    // Sort messages by createdAt to ensure consistent ordering\n    const sortedMessages = [...messages].sort((a, b) => {\n      const dateA = new Date(a.createdAt).getTime();\n      const dateB = new Date(b.createdAt).getTime();\n      return dateA - dateB;\n    });\n\n    for (const message of sortedMessages) {\n      // Use message ID as primary deduplication key\n      const messageId = message.id;\n\n      if (!seen.has(messageId)) {\n        seen.add(messageId);\n        deduplicatedMessages.push(message);\n        this.logger.debug(\n          `✅ Added message ${messageId}: \"${message.content?.substring(0, 50)}...\"`,\n        );\n      } else {\n        this.logger.debug(\n          `🔄 Skipped duplicate message ${messageId}: \"${message.content?.substring(0, 50)}...\"`,\n        );\n      }\n    }\n\n    this.logger.log(\n      `🧹 Message deduplication: ${messages.length} → ${deduplicatedMessages.length} (removed ${messages.length - deduplicatedMessages.length} duplicates)`,\n    );\n\n    return deduplicatedMessages;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\batch-management.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":124,"column":11,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":124,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":124,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":131,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":131,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":131,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":155,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":154,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":161,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":161,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":161,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":162,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":162,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .position on an `any` value.","line":162,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":164,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":164,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":164,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":173,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":173,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":173,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":188,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":188,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":188,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":189,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":189,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .position on an `any` value.","line":189,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":191,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":191,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":202,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":202,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":207,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":207,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":218,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":222,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":222,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":222,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":225,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":225,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":225,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":232,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":232,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":272,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":290,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":290,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":290,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":302,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":302,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":302,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":302,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":316,"column":11,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":316,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":316,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":316,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":348,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":348,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":355,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":355,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":355,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":355,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":358,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":358,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":365,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":365,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":365,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":365,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":378,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":423,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":423,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":423,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":423,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":431,"column":59,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":431,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":431,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":431,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":436,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":436,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":436,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":436,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":439,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":439,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":449,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":449,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":449,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":449,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":459,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":459,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":463,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":463,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":463,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":463,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":466,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":466,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":466,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":466,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":480,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":480,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":480,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":480,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":489,"column":20,"nodeType":"Property","messageId":"anyAssignment","endLine":489,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":489,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":489,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":498,"column":11,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":498,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":498,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":498,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":504,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":504,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":504,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":504,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":507,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":507,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":521,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":521,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":521,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":521,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":534,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":534,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":558,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":558,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":558,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":558,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":559,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":559,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":559,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":559,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":560,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":560,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":560,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":560,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":561,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":561,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":561,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":561,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":562,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":562,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pricing on an `any` value.","line":562,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":562,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":563,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":563,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":564,"column":22,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":564,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":564,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":564,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":566,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":566,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":567,"column":24,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":567,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":567,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":567,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":569,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":569,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":570,"column":22,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":570,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":570,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":570,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":570,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":570,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":573,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":573,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .images on an `any` value.","line":573,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":573,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":573,"column":42,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":573,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .url on an `any` value.","line":573,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":573,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":575,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":575,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":575,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":575,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":576,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":576,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .position on an `any` value.","line":576,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":576,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":578,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":578,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsUrl on an `any` value.","line":578,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":578,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":579,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":579,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":590,"column":16,"nodeType":"Property","messageId":"anyAssignment","endLine":590,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":590,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":590,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":604,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":604,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":604,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":604,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":605,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":605,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":605,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":605,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":606,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":606,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":606,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":606,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":607,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":607,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":607,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":607,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":608,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":608,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pricing on an `any` value.","line":608,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":608,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":609,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":609,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":610,"column":22,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":610,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":610,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":610,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":612,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":612,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":613,"column":24,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":613,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":613,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":613,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":615,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":615,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":616,"column":22,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":616,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":616,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":616,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":616,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":616,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":618,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":618,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":618,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":618,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":619,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":619,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .images on an `any` value.","line":619,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":619,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":619,"column":65,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":619,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .url on an `any` value.","line":619,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":619,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":620,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":620,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .images on an `any` value.","line":620,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":620,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":621,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":621,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":697,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":697,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":728,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":728,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":728,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":728,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":735,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":735,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":735,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":735,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":744,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":744,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":745,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":745,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":859,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":859,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":895,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":895,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":919,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":919,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":919,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":919,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":929,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":929,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":930,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":930,"endColumn":55}],"suppressedMessages":[],"errorCount":132,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { MLSParserService } from './mls-parser.service';\nimport { ParsedMLSProperty } from './interfaces/mls-property.interface';\nimport { ConversationV2Service } from '../messaging/conversation-v2.service';\n\n@Injectable()\nexport class BatchManagementService {\n  constructor(\n    private prisma: PrismaService,\n    private mlsParser: MLSParserService,\n    private conversationV2Service: ConversationV2Service,\n  ) {}\n\n  // Create a new property batch\n  async createPropertyBatch(\n    agentId: string,\n    clientId: string,\n    timelineId: string,\n  ) {\n    const batch = await this.prisma.propertyBatch.create({\n      data: {\n        agentId,\n        clientId,\n        timelineId,\n        status: 'pending',\n        totalProperties: 0,\n        successCount: 0,\n        failureCount: 0,\n      },\n    });\n\n    return batch;\n  }\n\n  // Add MLS URLs to batch queue\n  async addMLSUrlsToBatch(batchId: string, mlsUrls: string[]) {\n    const batch = await this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n    });\n\n    if (!batch) {\n      throw new NotFoundException('Batch not found');\n    }\n\n    const batchProperties: any[] = [];\n\n    for (let i = 0; i < mlsUrls.length; i++) {\n      const mlsUrl = mlsUrls[i];\n\n      batchProperties.push({\n        batchId,\n        mlsUrl,\n        parseStatus: 'pending',\n        position: i,\n      });\n    }\n\n    await this.prisma.batchProperty.createMany({\n      data: batchProperties,\n    });\n\n    // Update batch total\n    await this.prisma.propertyBatch.update({\n      where: { id: batchId },\n      data: {\n        totalProperties: mlsUrls.length,\n      },\n    });\n\n    return this.getBatchWithProperties(batchId);\n  }\n\n  // Instant batch creation - creates properties immediately from URL, then parses in background\n  async createInstantBatch(batchId: string) {\n    const batch = await this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n      include: {\n        batchProperties: {\n          where: { parseStatus: 'pending' },\n          orderBy: { position: 'asc' },\n        },\n      },\n    });\n\n    if (!batch) {\n      throw new NotFoundException('Batch not found');\n    }\n\n    // Create properties with full parsing\n    const properties = await this.createInstantProperties(\n      batchId,\n      batch.batchProperties,\n    );\n\n    return {\n      success: true,\n      message: 'Properties created successfully with full details',\n      properties,\n      instantCreationCompleted: true,\n      parsingCompleted: true,\n    };\n  }\n\n  // Create properties instantly from URL data\n  private async createInstantProperties(\n    batchId: string,\n    batchProperties: any[],\n  ) {\n    const batch = await this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n    });\n\n    if (!batch) {\n      throw new Error('Batch not found');\n    }\n\n    const createdProperties: any[] = [];\n\n    for (const batchProperty of batchProperties) {\n      try {\n        // Parse property data with full details immediately\n        const result = await this.mlsParser.parseSingleMLS(\n          batchProperty.mlsUrl,\n        );\n\n        let propertyData;\n\n        if (result.success && result.data) {\n          // Use parsed data if successful\n          const urlData = this.parseUrlData(batchProperty.mlsUrl);\n          propertyData = {\n            timelineId: batch.timelineId,\n            address:\n              result.data.address?.full ||\n              urlData.address ||\n              'Address not found',\n            city: result.data.address?.city || urlData.city || '',\n            state: result.data.address?.state || urlData.state || '',\n            zipCode: result.data.address?.zipCode || urlData.zipCode || '',\n            price: result.data.pricing?.priceNumeric || 0,\n            bedrooms: result.data.propertyDetails?.beds\n              ? parseInt(result.data.propertyDetails.beds)\n              : null,\n            bathrooms: result.data.propertyDetails?.baths\n              ? parseFloat(result.data.propertyDetails.baths)\n              : null,\n            squareFootage: result.data.propertyDetails?.sqft\n              ? parseInt(\n                  result.data.propertyDetails.sqft.replace(/[^0-9]/g, ''),\n                )\n              : null,\n            description:\n              (result.data.propertyDetails as any)?.description ||\n              'No description available',\n            imageUrls: JSON.stringify(\n              result.data.images?.map((img) => img.url) || [\n                'https://via.placeholder.com/400x300/e2e8f0/64748b?text=No+Image',\n              ],\n            ),\n            listingUrl: batchProperty.mlsUrl,\n            position: batchProperty.position,\n            batchId: batchId,\n            originalMlsUrl: batchProperty.mlsUrl,\n            parseTimestamp: new Date(),\n            isQuickParsed: true,\n            isFullyParsed: true,\n            loadingProgress: 100,\n            importStatus: 'pending',\n          };\n        } else {\n          // Fallback to URL-based data if parsing fails\n          const urlData = this.parseUrlData(batchProperty.mlsUrl);\n          propertyData = {\n            timelineId: batch.timelineId,\n            address: urlData.address || 'Loading address...',\n            city: urlData.city || '',\n            state: urlData.state || '',\n            zipCode: urlData.zipCode || '',\n            price: 0,\n            bedrooms: null,\n            bathrooms: null,\n            squareFootage: null,\n            description: 'Property details could not be loaded',\n            imageUrls: JSON.stringify([\n              'https://via.placeholder.com/400x300/e2e8f0/64748b?text=Loading+Image',\n            ]),\n            listingUrl: batchProperty.mlsUrl,\n            position: batchProperty.position,\n            batchId: batchId,\n            originalMlsUrl: batchProperty.mlsUrl,\n            parseTimestamp: new Date(),\n            isQuickParsed: false,\n            isFullyParsed: false,\n            loadingProgress: 50,\n            importStatus: 'pending',\n          };\n        }\n\n        // Create property with parsed data\n        const property = await this.prisma.property.create({\n          data: propertyData,\n        });\n\n        // Update batch property\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            propertyId: property.id,\n            parseStatus: 'parsed',\n            loadingProgress: 100,\n          },\n        });\n\n        createdProperties.push(property);\n      } catch (error) {\n        console.error(\n          `Failed to create instant property for ${batchProperty.mlsUrl}:`,\n          error,\n        );\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            parseStatus: 'failed',\n            parseError: error.message,\n            loadingProgress: 0,\n          },\n        });\n      }\n    }\n\n    return createdProperties;\n  }\n\n  // Parse URL data instantly (no network requests)\n  private parseUrlData(url: string) {\n    try {\n      const urlObj = new URL(url);\n      const pathParts = urlObj.pathname.split('/');\n\n      if (pathParts.length >= 4 && pathParts[1] === 'share') {\n        const propertySlug = pathParts[3];\n        const parts = propertySlug.split('-');\n\n        if (parts.length >= 4) {\n          const zipCode = parts[parts.length - 1];\n          const state = parts[parts.length - 2];\n          const city = parts[parts.length - 3]\n            .replace(/([A-Z])/g, ' $1')\n            .trim();\n          const streetAddress = parts\n            .slice(0, parts.length - 3)\n            .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n            .join(' ');\n\n          return {\n            address: `${streetAddress}, ${city}, ${state} ${zipCode}`,\n            city: city,\n            state: state,\n            zipCode: zipCode,\n            shareId: pathParts[2],\n          };\n        }\n      }\n\n      return {\n        address: 'Parsing property address...',\n        city: '',\n        state: '',\n        zipCode: '',\n      };\n    } catch (error) {\n      return {\n        address: 'Error parsing URL',\n        city: '',\n        state: '',\n        zipCode: '',\n      };\n    }\n  }\n\n  // Parse full details in background\n  private async parseFullDetailsBackground(\n    batchId: string,\n    batchProperties: any[],\n  ) {\n    for (const batchProperty of batchProperties) {\n      try {\n        const current = await this.prisma.batchProperty.findUnique({\n          where: { id: batchProperty.id },\n          include: {\n            property: true,\n          },\n        });\n\n        if (!current?.propertyId || !current.property) {\n          continue;\n        }\n\n        // Update progress to show parsing started\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            parseStatus: 'parsing',\n            loadingProgress: 20,\n          },\n        });\n\n        await this.prisma.property.update({\n          where: { id: current.propertyId },\n          data: { loadingProgress: 20 },\n        });\n\n        // Full parse with optimized settings\n        const result = await this.mlsParser.parseSingleMLS(\n          batchProperty.mlsUrl,\n        );\n\n        if (result.success && result.data) {\n          // Update property with full data\n          await this.prisma.property.update({\n            where: { id: current.propertyId },\n            data: {\n              address: result.data.address?.full || current.property.address,\n              city: result.data.address?.city || current.property.city,\n              state: result.data.address?.state || current.property.state,\n              zipCode: result.data.address?.zipCode || current.property.zipCode,\n              price: result.data.pricing?.priceNumeric || 0,\n              bedrooms: result.data.propertyDetails?.beds\n                ? parseInt(result.data.propertyDetails.beds)\n                : null,\n              bathrooms: result.data.propertyDetails?.baths\n                ? parseFloat(result.data.propertyDetails.baths)\n                : null,\n              squareFootage: result.data.propertyDetails?.sqft\n                ? parseInt(\n                    result.data.propertyDetails.sqft.replace(/[^0-9]/g, ''),\n                  )\n                : null,\n              description: 'Loading property details...',\n              propertyType: result.data.propertyDetails?.propertyType || null,\n              imageUrls: JSON.stringify(\n                result.data.images?.map((img) => img.url) || [\n                  'https://via.placeholder.com/400x300/e2e8f0/64748b?text=No+Image',\n                ],\n              ),\n              imageCount: result.data.images?.length || 0,\n              parsedData: result.data as any,\n              isFullyParsed: true,\n              loadingProgress: 100,\n            },\n          });\n\n          await this.prisma.batchProperty.update({\n            where: { id: batchProperty.id },\n            data: {\n              parseStatus: 'parsed',\n              parsedData: result.data as any,\n              loadingProgress: 100,\n            },\n          });\n        } else {\n          // Mark as failed but keep the instant property\n          await this.prisma.batchProperty.update({\n            where: { id: batchProperty.id },\n            data: {\n              parseStatus: 'failed',\n              parseError: result.error,\n              loadingProgress: 5, // Back to initial state\n            },\n          });\n        }\n\n        // Delay between requests to be respectful\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.error(\n          `Background parsing failed for ${batchProperty.mlsUrl}:`,\n          error,\n        );\n      }\n    }\n  }\n\n  // Progressive batch parsing - quick first, full details later\n  async parseProgressiveBatch(batchId: string) {\n    const batch = await this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n      include: {\n        batchProperties: {\n          where: { parseStatus: 'pending' },\n          orderBy: { position: 'asc' },\n        },\n      },\n    });\n\n    if (!batch) {\n      throw new NotFoundException('Batch not found');\n    }\n\n    // Phase 1: Quick parsing for immediate UI feedback\n    await this.quickParseBatch(batchId, batch.batchProperties);\n\n    // Phase 2: Full parsing in background (don't await)\n    this.fullParseBatch(batchId, batch.batchProperties).catch((error) => {\n      console.error('Background full parsing failed:', error);\n    });\n\n    return {\n      success: true,\n      message: 'Progressive parsing started',\n      quickParsingCompleted: true,\n      fullParsingInProgress: true,\n    };\n  }\n\n  // Quick parsing phase - gets basic info fast for UI\n  private async quickParseBatch(batchId: string, batchProperties: any[]) {\n    for (const batchProperty of batchProperties) {\n      try {\n        // Update status to quick_parsing\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            parseStatus: 'quick_parsing',\n            loadingProgress: 10,\n          },\n        });\n\n        // Quick parse\n        const result = await this.mlsParser.parseQuickMLS(batchProperty.mlsUrl);\n\n        if (result.success && result.data) {\n          // Store quick data\n          await this.prisma.batchProperty.update({\n            where: { id: batchProperty.id },\n            data: {\n              parseStatus: 'quick_parsed',\n              quickData: result.data as any,\n              loadingProgress: 40,\n            },\n          });\n\n          // Create property with basic info\n          await this.createQuickProperty(batchId, batchProperty, result.data);\n        } else {\n          // Mark as failed\n          await this.prisma.batchProperty.update({\n            where: { id: batchProperty.id },\n            data: {\n              parseStatus: 'failed',\n              parseError: result.error,\n              loadingProgress: 0,\n            },\n          });\n        }\n      } catch (error) {\n        console.error(\n          `Quick parsing failed for ${batchProperty.mlsUrl}:`,\n          error,\n        );\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            parseStatus: 'failed',\n            parseError: error.message,\n            loadingProgress: 0,\n          },\n        });\n      }\n    }\n  }\n\n  // Full parsing phase - gets all details in background\n  private async fullParseBatch(batchId: string, batchProperties: any[]) {\n    for (const batchProperty of batchProperties) {\n      try {\n        // Skip if quick parsing failed\n        const current = await this.prisma.batchProperty.findUnique({\n          where: { id: batchProperty.id },\n        });\n\n        if (current?.parseStatus !== 'quick_parsed') {\n          continue;\n        }\n\n        // Update status to full parsing\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            parseStatus: 'full_parsing',\n            loadingProgress: 60,\n          },\n        });\n\n        // Full parse\n        const result = await this.mlsParser.parseSingleMLS(\n          batchProperty.mlsUrl,\n        );\n\n        if (result.success && result.data) {\n          // Store full data and update property\n          await this.prisma.batchProperty.update({\n            where: { id: batchProperty.id },\n            data: {\n              parseStatus: 'parsed',\n              parsedData: result.data as any,\n              loadingProgress: 100,\n            },\n          });\n\n          // Update property with full details\n          if (current.propertyId) {\n            await this.updatePropertyWithFullData(\n              current.propertyId,\n              result.data,\n            );\n          }\n        } else {\n          await this.prisma.batchProperty.update({\n            where: { id: batchProperty.id },\n            data: {\n              parseStatus: 'failed',\n              parseError: result.error,\n              loadingProgress: 40, // Keep at quick parse level\n            },\n          });\n        }\n\n        // Small delay between requests\n        await new Promise((resolve) => setTimeout(resolve, 2000));\n      } catch (error) {\n        console.error(\n          `Full parsing failed for ${batchProperty.mlsUrl}:`,\n          error,\n        );\n      }\n    }\n  }\n\n  // Create property with quick data\n  private async createQuickProperty(\n    batchId: string,\n    batchProperty: any,\n    quickData: any,\n  ) {\n    const batch = await this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n    });\n\n    if (!batch) {\n      throw new Error('Batch not found');\n    }\n\n    const property = await this.prisma.property.create({\n      data: {\n        timelineId: batch.timelineId,\n        address: quickData.address?.full || 'Address parsing...',\n        city: quickData.address?.city || '',\n        state: quickData.address?.state || '',\n        zipCode: quickData.address?.zipCode || '',\n        price: quickData.pricing?.priceNumeric || 0,\n        bedrooms: quickData.propertyDetails?.beds\n          ? parseInt(quickData.propertyDetails.beds)\n          : null,\n        bathrooms: quickData.propertyDetails?.baths\n          ? parseFloat(quickData.propertyDetails.baths)\n          : null,\n        squareFootage: quickData.propertyDetails?.sqft\n          ? parseInt(quickData.propertyDetails.sqft.replace(/[^0-9]/g, ''))\n          : null,\n        imageUrls: JSON.stringify(\n          quickData.images?.map((img) => img.url) || [],\n        ),\n        listingUrl: batchProperty.mlsUrl,\n        position: batchProperty.position,\n        batchId: batchId,\n        originalMlsUrl: batchProperty.mlsUrl,\n        parsedData: quickData,\n        parseTimestamp: new Date(),\n        isQuickParsed: true,\n        isFullyParsed: false,\n        loadingProgress: 40,\n        importStatus: 'pending',\n      },\n    });\n\n    // Link back to batch property\n    await this.prisma.batchProperty.update({\n      where: { id: batchProperty.id },\n      data: { propertyId: property.id },\n    });\n\n    return property;\n  }\n\n  // Update property with full parsed data\n  private async updatePropertyWithFullData(propertyId: string, fullData: any) {\n    if (!propertyId) return;\n\n    await this.prisma.property.update({\n      where: { id: propertyId },\n      data: {\n        address: fullData.address?.full || 'Address not found',\n        city: fullData.address?.city || '',\n        state: fullData.address?.state || '',\n        zipCode: fullData.address?.zipCode || '',\n        price: fullData.pricing?.priceNumeric || 0,\n        bedrooms: fullData.propertyDetails?.beds\n          ? parseInt(fullData.propertyDetails.beds)\n          : null,\n        bathrooms: fullData.propertyDetails?.baths\n          ? parseFloat(fullData.propertyDetails.baths)\n          : null,\n        squareFootage: fullData.propertyDetails?.sqft\n          ? parseInt(fullData.propertyDetails.sqft.replace(/[^0-9]/g, ''))\n          : null,\n        propertyType: fullData.propertyDetails?.propertyType || null,\n        imageUrls: JSON.stringify(fullData.images?.map((img) => img.url) || []),\n        imageCount: fullData.images?.length || 0,\n        parsedData: fullData,\n        isFullyParsed: true,\n        loadingProgress: 100,\n      },\n    });\n  }\n\n  // Parse all URLs in a batch\n  async parseBatchProperties(batchId: string) {\n    const batch = await this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n      include: {\n        batchProperties: {\n          where: { parseStatus: 'pending' },\n          orderBy: { position: 'asc' },\n        },\n      },\n    });\n\n    if (!batch) {\n      throw new NotFoundException('Batch not found');\n    }\n\n    // Update batch status\n    await this.prisma.propertyBatch.update({\n      where: { id: batchId },\n      data: {\n        status: 'processing',\n        startedAt: new Date(),\n      },\n    });\n\n    const results: any[] = [];\n\n    for (const batchProperty of batch.batchProperties) {\n      try {\n        // Update status to parsing\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: { parseStatus: 'parsing' },\n        });\n\n        // Parse MLS URL\n        const parseResult = await this.mlsParser.parseSingleMLS(\n          batchProperty.mlsUrl,\n        );\n\n        if (parseResult.success && parseResult.data) {\n          // Check for duplicates\n          const duplicateCheck = await this.mlsParser.checkEnhancedDuplicate(\n            batch.agentId,\n            batch.clientId,\n            parseResult.data,\n          );\n\n          if (duplicateCheck.isDuplicate) {\n            await this.prisma.batchProperty.update({\n              where: { id: batchProperty.id },\n              data: {\n                parseStatus: 'failed',\n                parseError: `Duplicate: ${duplicateCheck.reason}`,\n              },\n            });\n\n            results.push({\n              id: batchProperty.id,\n              success: false,\n              error: `Duplicate: ${duplicateCheck.reason}`,\n              isDuplicate: true,\n            });\n          } else {\n            // Store parsed data\n            await this.prisma.batchProperty.update({\n              where: { id: batchProperty.id },\n              data: {\n                parseStatus: 'parsed',\n                parsedData: parseResult.data as any,\n              },\n            });\n\n            results.push({\n              id: batchProperty.id,\n              success: true,\n              data: parseResult.data,\n            });\n          }\n        } else {\n          // Store parse error\n          await this.prisma.batchProperty.update({\n            where: { id: batchProperty.id },\n            data: {\n              parseStatus: 'failed',\n              parseError: parseResult.error,\n            },\n          });\n\n          results.push({\n            id: batchProperty.id,\n            success: false,\n            error: parseResult.error,\n          });\n        }\n      } catch (error) {\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            parseStatus: 'failed',\n            parseError: error.message,\n          },\n        });\n\n        results.push({\n          id: batchProperty.id,\n          success: false,\n          error: error.message,\n        });\n      }\n\n      // Small delay between parses\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    // Update batch completion status\n    const successCount = results.filter((r) => r.success).length;\n    const failureCount = results.filter((r) => !r.success).length;\n\n    await this.prisma.propertyBatch.update({\n      where: { id: batchId },\n      data: {\n        status: 'completed',\n        completedAt: new Date(),\n        successCount,\n        failureCount,\n      },\n    });\n\n    return {\n      batchId,\n      results,\n      summary: {\n        total: results.length,\n        successful: successCount,\n        failed: failureCount,\n      },\n    };\n  }\n\n  // Import parsed properties to timeline\n  async importParsedProperties(\n    batchId: string,\n    propertyImports: {\n      batchPropertyId: string;\n      customDescription?: string;\n      agentNotes?: string;\n      customBeds?: string;\n      customBaths?: string;\n      customSqft?: string;\n    }[],\n  ) {\n    const batch = await this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n      include: {\n        timeline: true,\n        batchProperties: {\n          where: {\n            id: { in: propertyImports.map((p) => p.batchPropertyId) },\n            parseStatus: 'parsed',\n          },\n        },\n      },\n    });\n\n    if (!batch) {\n      throw new NotFoundException('Batch not found');\n    }\n\n    const importResults: any[] = [];\n\n    for (const importData of propertyImports) {\n      const batchProperty = batch.batchProperties.find(\n        (bp) => bp.id === importData.batchPropertyId,\n      );\n\n      if (!batchProperty || !batchProperty.parsedData) {\n        importResults.push({\n          batchPropertyId: importData.batchPropertyId,\n          success: false,\n          error: 'Property not found or not parsed',\n        });\n        continue;\n      }\n\n      try {\n        const parsedData =\n          batchProperty.parsedData as unknown as ParsedMLSProperty;\n\n        // Get last position in timeline\n        const lastProperty = await this.prisma.property.findFirst({\n          where: { timelineId: batch.timelineId },\n          orderBy: { position: 'desc' },\n        });\n\n        const nextPosition = (lastProperty?.position || 0) + 1;\n\n        // Create property\n        const newProperty = await this.prisma.property.create({\n          data: {\n            address: parsedData.address.full,\n            city: parsedData.address.city,\n            state: parsedData.address.state,\n            zipCode: parsedData.address.zipCode,\n            price: parsedData.pricing?.priceNumeric || 0,\n            bedrooms: importData.customBeds\n              ? parseInt(importData.customBeds)\n              : parsedData.propertyDetails.beds\n                ? parseInt(parsedData.propertyDetails.beds)\n                : null,\n            bathrooms: importData.customBaths\n              ? parseFloat(importData.customBaths)\n              : parsedData.propertyDetails.baths\n                ? parseFloat(parsedData.propertyDetails.baths)\n                : null,\n            squareFootage: importData.customSqft\n              ? parseInt(importData.customSqft.replace(/[^0-9]/g, ''))\n              : parsedData.propertyDetails.sqft\n                ? parseInt(\n                    parsedData.propertyDetails.sqft.replace(/[^0-9]/g, ''),\n                  )\n                : null,\n            description:\n              importData.customDescription ||\n              `${importData.customBeds || parsedData.propertyDetails.beds || ''} bed${(importData.customBeds || parsedData.propertyDetails.beds) !== '1' ? 's' : ''}, ${importData.customBaths || parsedData.propertyDetails.baths || ''} bath${(importData.customBaths || parsedData.propertyDetails.baths) !== '1' ? 's' : ''}, ${importData.customSqft || parsedData.propertyDetails.sqft || ''} sqft`,\n            imageUrls: JSON.stringify(parsedData.images.map((img) => img.url)),\n            listingUrl: parsedData.sourceUrl,\n\n            // MLS metadata\n            mlsSource: 'flexmls',\n            originalMlsUrl: parsedData.sourceUrl,\n            parsedData: parsedData as any,\n            parseTimestamp: parsedData.scrapedAt,\n            imageCount: parsedData.images.length,\n            addressNormalized: this.normalizeAddress(parsedData.address.full),\n            priceRange: this.getPriceRange(\n              parsedData.pricing?.priceNumeric || 0,\n            ),\n\n            // Timeline data\n            timelineId: batch.timelineId,\n            position: nextPosition,\n            batchId: batchId,\n            importStatus: 'completed',\n\n            // Agent data\n            agentNotes: importData.agentNotes,\n          },\n        });\n\n        // Create V2 conversation for this property automatically\n        let conversationId: string | null = null;\n        try {\n          const conversation =\n            await this.conversationV2Service.getOrCreatePropertyConversation({\n              propertyId: newProperty.id,\n              timelineId: batch.timelineId,\n              agentId: batch.agentId,\n              clientId: batch.clientId,\n            });\n          conversationId = conversation.id;\n          console.log(\n            `✅ Created PropertyConversation ${conversationId} for property ${newProperty.id} during batch import`,\n          );\n        } catch (error) {\n          console.warn(\n            'Conversation creation failed during batch import:',\n            error.message,\n          );\n        }\n\n        // Update batch property\n        await this.prisma.batchProperty.update({\n          where: { id: batchProperty.id },\n          data: {\n            parseStatus: 'imported',\n            propertyId: newProperty.id,\n          },\n        });\n\n        importResults.push({\n          batchPropertyId: importData.batchPropertyId,\n          success: true,\n          propertyId: newProperty.id,\n          address: newProperty.address,\n          conversationId: conversationId,\n        });\n      } catch (error) {\n        importResults.push({\n          batchPropertyId: importData.batchPropertyId,\n          success: false,\n          error: error.message,\n        });\n      }\n    }\n\n    return {\n      batchId,\n      importResults,\n      summary: {\n        total: propertyImports.length,\n        successful: importResults.filter((r) => r.success).length,\n        failed: importResults.filter((r) => !r.success).length,\n      },\n    };\n  }\n\n  // Get batch with properties\n  async getBatchWithProperties(batchId: string) {\n    return this.prisma.propertyBatch.findUnique({\n      where: { id: batchId },\n      include: {\n        batchProperties: {\n          orderBy: { position: 'asc' },\n        },\n      },\n    });\n  }\n\n  // Helper methods\n  private normalizeAddress(address: string): string {\n    return address\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  private getPriceRange(price: number): string {\n    if (price < 200000) return 'under_200k';\n    if (price < 300000) return '200k_300k';\n    if (price < 500000) return '300k_500k';\n    if (price < 750000) return '500k_750k';\n    if (price < 1000000) return '750k_1m';\n    return 'over_1m';\n  }\n\n  private parseNumber(value: string | undefined): number | undefined {\n    if (!value) return undefined;\n    const num = parseInt(value.replace(/[^\\d]/g, ''), 10);\n    return isNaN(num) ? undefined : num;\n  }\n\n  private parseFloat(value: string | undefined): number | undefined {\n    if (!value) return undefined;\n    const num = parseFloat(value.replace(/[^\\d.]/g, ''));\n    return isNaN(num) ? undefined : num;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\batch.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":25,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":25,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":25,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":27,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":27,"endColumn":14}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { BatchManagementService } from './batch-management.service';\nimport { BatchImportPropertiesDto } from './dto/batch-import-properties.dto';\n\n@Controller('api/v1/batch')\n@UseGuards(JwtAuthGuard)\nexport class BatchController {\n  constructor(private readonly batchService: BatchManagementService) {}\n\n  // Create new property batch\n  @Post('create')\n  async createBatch(\n    @Request() req,\n    @Body() createData: { clientId: string; timelineId: string },\n  ) {\n    const agentId = req.user.id;\n    return this.batchService.createPropertyBatch(\n      agentId,\n      createData.clientId,\n      createData.timelineId,\n    );\n  }\n\n  // Add MLS URLs to batch\n  @Post(':batchId/add-urls')\n  async addUrls(\n    @Param('batchId') batchId: string,\n    @Body() urlData: { mlsUrls: string[] },\n  ) {\n    return this.batchService.addMLSUrlsToBatch(batchId, urlData.mlsUrls);\n  }\n\n  // Create properties instantly from URL, then parse in background\n  @Post(':batchId/create-instant')\n  async createInstantBatch(@Param('batchId') batchId: string) {\n    return this.batchService.createInstantBatch(batchId);\n  }\n\n  // Parse batch properties progressively (quick first, full later)\n  @Post(':batchId/parse-progressive')\n  async parseProgressiveBatch(@Param('batchId') batchId: string) {\n    return this.batchService.parseProgressiveBatch(batchId);\n  }\n\n  // Parse all URLs in batch (original method)\n  @Post(':batchId/parse')\n  async parseBatch(@Param('batchId') batchId: string) {\n    return this.batchService.parseBatchProperties(batchId);\n  }\n\n  // Import parsed properties\n  @Post(':batchId/import')\n  async importProperties(\n    @Param('batchId') batchId: string,\n    @Body() importData: BatchImportPropertiesDto,\n  ) {\n    return this.batchService.importParsedProperties(\n      batchId,\n      importData.properties,\n    );\n  }\n\n  // Get batch status\n  @Get(':batchId')\n  async getBatch(@Param('batchId') batchId: string) {\n    return this.batchService.getBatchWithProperties(batchId);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\dto\\batch-import-properties.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\dto\\parse-mls-urls.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\interfaces\\mls-property.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\mls-parser.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Param' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BatchImportPropertiesDto' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":44,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":45,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":45,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":50,"column":13,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":50,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":51,"column":13,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":51,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":60,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":60,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":75,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":99,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":99,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":100,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":105,"column":13,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":105,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":106,"column":13,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":106,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":115,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":115,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":129,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":129,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":129,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":144,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":144,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":144,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":156,"column":15,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":156,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":165,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":165,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":173,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isDuplicate on an `any` value.","line":173,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isDuplicate on an `any` value.","line":176,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":178,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":193,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":193,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":193,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":29}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Public } from '../common/decorators/public.decorator';\nimport { MLSParserService } from './mls-parser.service';\nimport { ParseMLSUrlsDto, ParseSingleMLSDto } from './dto/parse-mls-urls.dto';\nimport { BatchImportPropertiesDto } from './dto/batch-import-properties.dto';\n\n@Controller('api/v1/mls')\nexport class MLSParserController {\n  constructor(private readonly mlsParserService: MLSParserService) {}\n\n  // Test browser connection (no auth required)\n  @Public()\n  @Get('test-browser')\n  async testBrowser() {\n    return await this.mlsParserService.testBrowserConnection();\n  }\n\n  // Parse a single MLS URL quickly (basic info only)\n  @Post('parse-single-quick')\n  @UseGuards(JwtAuthGuard)\n  async parseSingleQuick(@Request() req, @Body() parseDto: ParseSingleMLSDto) {\n    try {\n      const result = await this.mlsParserService.parseQuickMLS(parseDto.mlsUrl);\n\n      if (!result.success) {\n        return {\n          success: false,\n          error: result.error,\n          mlsUrl: result.mlsUrl,\n        };\n      }\n\n      // Check for duplicates\n      const agentId = req.user.id;\n      const { clientId } = req.query;\n\n      if (clientId && result.data) {\n        const duplicateCheck =\n          await this.mlsParserService.checkEnhancedDuplicate(\n            agentId,\n            clientId,\n            result.data,\n          );\n\n        if (duplicateCheck.isDuplicate) {\n          return {\n            success: false,\n            error: `Duplicate property: ${duplicateCheck.reason}`,\n            isDuplicate: true,\n            existingProperty: duplicateCheck.existingProperty,\n            mlsUrl: result.mlsUrl,\n          };\n        }\n      }\n\n      return {\n        success: true,\n        data: result.data,\n        mlsUrl: result.mlsUrl,\n        isQuickParse: true,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        mlsUrl: parseDto.mlsUrl,\n      };\n    }\n  }\n\n  // Parse a single MLS URL (full details)\n  @Post('parse-single')\n  @UseGuards(JwtAuthGuard)\n  async parseSingle(@Request() req, @Body() parseDto: ParseSingleMLSDto) {\n    try {\n      const result = await this.mlsParserService.parseSingleMLS(\n        parseDto.mlsUrl,\n      );\n\n      if (!result.success) {\n        return {\n          success: false,\n          error: result.error,\n          mlsUrl: result.mlsUrl,\n        };\n      }\n\n      // Check for duplicates\n      const agentId = req.user.id;\n      const { clientId } = req.query;\n\n      if (clientId && result.data) {\n        const duplicateCheck =\n          await this.mlsParserService.checkEnhancedDuplicate(\n            agentId,\n            clientId,\n            result.data,\n          );\n\n        if (duplicateCheck.isDuplicate) {\n          return {\n            success: false,\n            error: `Duplicate property: ${duplicateCheck.reason}`,\n            isDuplicate: true,\n            existingProperty: duplicateCheck.existingProperty,\n            mlsUrl: result.mlsUrl,\n          };\n        }\n      }\n\n      return {\n        success: true,\n        data: result.data,\n        mlsUrl: result.mlsUrl,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        mlsUrl: parseDto.mlsUrl,\n      };\n    }\n  }\n\n  // Parse multiple MLS URLs\n  @Post('parse-batch')\n  @UseGuards(JwtAuthGuard)\n  async parseBatch(\n    @Request() req,\n    @Body() parseDto: ParseMLSUrlsDto,\n    @Query('clientId') clientId?: string,\n  ) {\n    try {\n      const agentId = req.user.id;\n      const results = await this.mlsParserService.parseBatchMLS(\n        parseDto.mlsUrls,\n      );\n\n      // Check duplicates for successful parses\n      const enhancedResults: any[] = [];\n\n      for (const result of results) {\n        if (result.success && clientId && result.data) {\n          const duplicateCheck =\n            await this.mlsParserService.checkEnhancedDuplicate(\n              agentId,\n              clientId,\n              result.data,\n            );\n\n          enhancedResults.push({\n            ...result,\n            isDuplicate: duplicateCheck.isDuplicate,\n            duplicateReason: duplicateCheck.reason,\n            existingProperty: duplicateCheck.existingProperty,\n          });\n        } else {\n          enhancedResults.push(result);\n        }\n      }\n\n      const successCount = enhancedResults.filter(\n        (r) => r.success && !r.isDuplicate,\n      ).length;\n      const duplicateCount = enhancedResults.filter(\n        (r) => r.isDuplicate,\n      ).length;\n      const errorCount = enhancedResults.filter((r) => !r.success).length;\n\n      return {\n        success: true,\n        results: enhancedResults,\n        summary: {\n          total: parseDto.mlsUrls.length,\n          successful: successCount,\n          duplicates: duplicateCount,\n          errors: errorCount,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\mls-parser.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PrismaService' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module } from '@nestjs/common';\nimport { MLSParserService } from './mls-parser.service';\nimport { MLSParserController } from './mls-parser.controller';\nimport { BatchController } from './batch.controller';\nimport { BatchManagementService } from './batch-management.service';\nimport { PrismaService } from '../prisma/prisma.service';\n// MessagingModule removed - already available globally via app.module.ts\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  providers: [MLSParserService, BatchManagementService],\n  controllers: [MLSParserController, BatchController],\n  exports: [MLSParserService, BatchManagementService],\n})\nexport class MLSParserModule {}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\mls-parser\\mls-parser.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":58,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":61,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":143,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":143,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":143,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":176,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":176,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'version' is assigned a value but never used.","line":210,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":211,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'version' is assigned a value but never used.","line":257,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":258,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":302,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":302,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":304,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":304,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":305,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":305,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":306,"column":33,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":306,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":306,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":306,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":308,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":310,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":308,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":308,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":309,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":309,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":311,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":313,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":311,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":311,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":312,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":312,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":314,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":316,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":314,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":314,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":315,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":315,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":317,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":319,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":317,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":317,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":318,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":318,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":320,"column":44,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":320,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":324,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":324,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":333,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":333,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .topLevelKeys on an `any` value.","line":347,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":347,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combinedKeys on an `any` value.","line":350,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":350,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalItems on an `any` value.","line":353,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":353,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .hasVideos on an `any` value.","line":356,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":356,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .hasFloorPlans on an `any` value.","line":359,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .hasDocuments on an `any` value.","line":362,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .otherSections on an `any` value.","line":365,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":365,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":473,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":473,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":509,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":509,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":514,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":514,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":526,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":526,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":539,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":539,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":541,"column":41,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":541,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":542,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":542,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":543,"column":31,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":543,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":543,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":543,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":545,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":547,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":545,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":545,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":546,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":546,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":548,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":550,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":548,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":548,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":549,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":549,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":551,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":553,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":551,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":551,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":552,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":552,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":554,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":556,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":554,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":554,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":555,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":555,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":557,"column":42,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":557,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":561,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":561,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":571,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":571,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .topLevelKeys on an `any` value.","line":583,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":583,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combinedKeys on an `any` value.","line":586,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":586,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalItems on an `any` value.","line":589,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":589,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .hasVideos on an `any` value.","line":591,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":591,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .hasFloorPlans on an `any` value.","line":593,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":593,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .hasDocuments on an `any` value.","line":596,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":596,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .otherSections on an `any` value.","line":599,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":599,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .beds on an `any` value.","line":790,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":790,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .baths on an `any` value.","line":798,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":798,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sqft on an `any` value.","line":806,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":806,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":811,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":811,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":842,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":842,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":882,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":882,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":928,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":928,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":932,"column":56,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":932,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":934,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":934,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":935,"column":57,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":935,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":935,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":935,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":936,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":936,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":937,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":937,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":940,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":940,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":941,"column":25,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":941,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":941,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":941,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":942,"column":63,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":942,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":953,"column":25,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":953,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":957,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":957,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":958,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":958,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":959,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":959,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":965,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":965,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":965,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":965,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":968,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":968,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":971,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":971,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .combined on an `any` value.","line":971,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":971,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .html on an `any` value.","line":972,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":972,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":974,"column":25,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":974,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":974,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":974,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .html on an `any` value.","line":974,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":974,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":975,"column":25,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":977,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'bgMatch' is assigned a value but never used.","line":975,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":975,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":975,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":975,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .html on an `any` value.","line":975,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":975,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":978,"column":25,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":978,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":978,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":978,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .html on an `any` value.","line":978,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":978,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `any` value.","line":981,"column":44,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":981,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":982,"column":27,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":982,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `any` value.","line":982,"column":42,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":982,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":985,"column":27,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":987,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":986,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":986,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `any` value.","line":986,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":986,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":987,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":987,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .match on an `any` value.","line":987,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":987,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":990,"column":29,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":991,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":991,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":991,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .match on an `any` value.","line":991,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":991,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `any` value.","line":991,"column":63,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":991,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":993,"column":41,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":993,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":993,"column":67,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":993,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":995,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":995,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":996,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":996,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `any` value.","line":996,"column":52,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":996,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1002,"column":38,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":1002,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1003,"column":42,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":1003,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":1015,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1015,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":1266,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":1266,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'stateRegex' is assigned a value but never used.","line":1489,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1489,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":1529,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1529,"endColumn":68}],"suppressedMessages":[],"errorCount":114,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport puppeteer, { Browser, Page } from 'puppeteer';\nimport {\n  ParsedMLSProperty,\n  ParseResult,\n  ImageData,\n  PriceData,\n} from './interfaces/mls-property.interface';\n\n@Injectable()\nexport class MLSParserService {\n  private readonly logger = new Logger(MLSParserService.name);\n  private browser: Browser | null = null;\n\n  constructor(private prisma: PrismaService) {}\n\n  async onModuleInit() {\n    // Initialize browser on Railway - Railway handles Puppeteer better than Vercel\n    await this.initBrowser();\n  }\n\n  async onModuleDestroy() {\n    if (this.browser) {\n      await this.browser.close();\n    }\n  }\n\n  // Temporary test method to verify browser initialization\n  async testBrowserConnection(): Promise<{\n    success: boolean;\n    message: string;\n    platform: string;\n  }> {\n    try {\n      if (!this.browser) {\n        return {\n          success: false,\n          message: 'Browser not initialized',\n          platform: process.platform,\n        };\n      }\n\n      const page = await this.browser.newPage();\n      await page.goto('https://www.google.com', {\n        waitUntil: 'networkidle2',\n        timeout: 10000,\n      });\n      const title = await page.title();\n      await page.close();\n\n      return {\n        success: true,\n        message: `Browser test successful. Page title: ${title}`,\n        platform: process.platform,\n      };\n    } catch (error) {\n      this.logger.error('Browser test failed:', error.message);\n      return {\n        success: false,\n        message: `Browser test failed: ${error.message}`,\n        platform: process.platform,\n      };\n    }\n  }\n\n  private async initBrowser(): Promise<void> {\n    try {\n      const isWindows = process.platform === 'win32';\n\n      // Different configurations for local vs production\n      this.browser = await puppeteer.launch({\n        headless: true, // Keep headless for both platforms\n        args: isWindows\n          ? [\n              // Windows-compatible configuration\n              '--no-sandbox',\n              '--disable-setuid-sandbox',\n              '--disable-gpu',\n              '--no-first-run',\n              '--disable-background-networking',\n              '--disable-background-timer-throttling',\n              '--disable-renderer-backgrounding',\n              '--disable-backgrounding-occluded-windows',\n            ]\n          : [\n              // Linux/production configuration - minimal for Railway\n              '--no-sandbox',\n              '--disable-setuid-sandbox',\n              '--disable-dev-shm-usage',\n              '--disable-gpu',\n              '--no-first-run',\n            ],\n        ignoreDefaultArgs: ['--disable-extensions'],\n        timeout: 30000,\n      });\n      this.logger.log(\n        `Browser initialized successfully for MLS parsing (${isWindows ? 'Windows' : 'Linux'} mode)`,\n      );\n    } catch (error) {\n      this.logger.error('Failed to initialize browser:', error);\n      // Don't throw error - allow API to continue without MLS parsing\n      this.browser = null;\n    }\n  }\n\n  // Single URL parsing method\n  async parseSingleMLS(mlsUrl: string): Promise<ParseResult> {\n    try {\n      this.logger.log(`Parsing MLS URL: ${mlsUrl}`);\n\n      // Check if browser is available\n      if (!this.browser) {\n        return {\n          success: false,\n          error:\n            'MLS parsing temporarily unavailable - browser not initialized',\n          mlsUrl,\n        };\n      }\n\n      // Validate URL format\n      if (!this.isValidMLSUrl(mlsUrl)) {\n        return {\n          success: false,\n          error:\n            'Invalid MLS URL format. Only FlexMLS URLs are currently supported.',\n          mlsUrl,\n        };\n      }\n\n      const parsedData = await this.parseFlexMLSEnhanced(mlsUrl);\n\n      return {\n        success: true,\n        data: parsedData,\n        mlsUrl,\n      };\n    } catch (error) {\n      this.logger.error(`Failed to parse MLS URL ${mlsUrl}:`, error);\n      return {\n        success: false,\n        error: error.message || 'Unknown parsing error',\n        mlsUrl,\n      };\n    }\n  }\n\n  // Quick parsing method for immediate UI feedback\n  async parseQuickMLS(mlsUrl: string): Promise<ParseResult> {\n    try {\n      this.logger.log(`Quick parsing MLS URL: ${mlsUrl}`);\n\n      // Validate URL format\n      if (!this.isValidMLSUrl(mlsUrl)) {\n        return {\n          success: false,\n          error:\n            'Invalid MLS URL format. Only FlexMLS URLs are currently supported.',\n          mlsUrl,\n        };\n      }\n\n      const quickData = await this.parseFlexMLSQuick(mlsUrl);\n\n      return {\n        success: true,\n        data: quickData,\n        mlsUrl,\n        isQuickParse: true,\n      };\n    } catch (error) {\n      this.logger.error(`Failed to quick parse MLS URL ${mlsUrl}:`, error);\n      return {\n        success: false,\n        error: error.message || 'Unknown parsing error',\n        mlsUrl,\n      };\n    }\n  }\n\n  // Batch URL parsing method\n  async parseBatchMLS(mlsUrls: string[]): Promise<ParseResult[]> {\n    this.logger.log(`Parsing batch of ${mlsUrls.length} MLS URLs`);\n\n    const results: ParseResult[] = [];\n\n    for (const mlsUrl of mlsUrls) {\n      const result = await this.parseSingleMLS(mlsUrl);\n      results.push(result);\n\n      // Add small delay between requests to be respectful\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    return results;\n  }\n\n  // Your enhanced FlexMLS parser (integrated from your existing code)\n  // Quick parsing method - gets basic info fast\n  private async parseFlexMLSQuick(\n    shareUrl: string,\n  ): Promise<ParsedMLSProperty> {\n    if (!this.browser) {\n      await this.initBrowser();\n    }\n\n    // Check if browser is still connected, reinitialize if needed\n    try {\n      const version = await this.browser!.version();\n    } catch (error) {\n      this.logger.warn('Browser disconnected, reinitializing...');\n      this.browser = null;\n      await this.initBrowser();\n    }\n\n    const page = await this.browser!.newPage();\n\n    try {\n      await page.setUserAgent(\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n      );\n      await page.setViewport({ width: 1920, height: 1080 });\n\n      await page.goto(shareUrl, {\n        waitUntil: 'domcontentloaded',\n        timeout: 30000,\n      });\n\n      // Quick wait for basic content\n      await page.waitForSelector('body', { timeout: 10000 });\n      await new Promise((resolve) => setTimeout(resolve, 2000)); // Shorter wait\n\n      const quickData = await this.extractQuickData(page);\n      const urlData = this.parseFlexMLSUrl(shareUrl);\n\n      return {\n        ...urlData,\n        ...quickData,\n        scrapedAt: new Date(),\n        sourceUrl: shareUrl,\n      } as ParsedMLSProperty;\n    } finally {\n      await page.close();\n    }\n  }\n\n  private async parseFlexMLSEnhanced(\n    shareUrl: string,\n  ): Promise<ParsedMLSProperty> {\n    if (!this.browser) {\n      await this.initBrowser();\n    }\n\n    // Check if browser is still connected, reinitialize if needed\n    try {\n      const version = await this.browser!.version();\n    } catch (error) {\n      this.logger.warn('Browser disconnected, reinitializing...');\n      this.browser = null;\n      await this.initBrowser();\n    }\n\n    const page = await this.browser!.newPage();\n\n    try {\n      this.logger.log(`🚀 Starting to parse URL: ${shareUrl}`);\n\n      await page.setUserAgent(\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n      );\n      await page.setViewport({ width: 1920, height: 1080 });\n\n      this.logger.log(`📡 Navigating to URL...`);\n      const response = await page.goto(shareUrl, {\n        waitUntil: 'domcontentloaded', // Faster than networkidle0\n        timeout: 30000, // Increased timeout\n      });\n\n      // Log final URL after any redirects\n      const finalUrl = page.url();\n      this.logger.log(`🔗 Final URL after navigation: ${finalUrl}`);\n      this.logger.log(`📊 Response status: ${response?.status() || 'unknown'}`);\n\n      // Check for JSON on original URL before redirect\n      if (finalUrl !== shareUrl) {\n        this.logger.log(`🔄 Trying original URL for JSON data...`);\n        await page.goto(shareUrl, {\n          waitUntil: 'domcontentloaded',\n          timeout: 30000,\n        });\n\n        await new Promise((resolve) => setTimeout(resolve, 2000));\n\n        // Check JSON on original URL\n        const originalJsonCheck = await page.evaluate(() => {\n          const element = document.querySelector('#tagged_listing_media');\n          let jsonStructure: any = null;\n\n          if (element && element.textContent) {\n            try {\n              const jsonData = JSON.parse(element.textContent);\n              jsonStructure = {\n                topLevelKeys: Object.keys(jsonData),\n                combinedKeys: jsonData.combined\n                  ? Object.keys(jsonData.combined)\n                  : null,\n                totalItems: jsonData.combined?.All\n                  ? jsonData.combined.All.length\n                  : 0,\n                hasVideos: jsonData.combined?.Videos\n                  ? jsonData.combined.Videos.length\n                  : 0,\n                hasFloorPlans: jsonData.combined?.FloorPlans\n                  ? jsonData.combined.FloorPlans.length\n                  : 0,\n                hasDocuments: jsonData.combined?.Documents\n                  ? jsonData.combined.Documents.length\n                  : 0,\n                otherSections: Object.keys(jsonData).filter(\n                  (k) => k !== 'combined',\n                ),\n              };\n            } catch (e) {\n              jsonStructure = { error: 'Failed to parse JSON' };\n            }\n          }\n\n          return {\n            exists: !!element,\n            hasContent: !!(element && element.textContent),\n            contentLength: element ? element.textContent?.length || 0 : 0,\n            structure: jsonStructure,\n          };\n        });\n\n        this.logger.log(`📋 Original URL JSON check:`);\n        this.logger.log(`   Element exists: ${originalJsonCheck.exists}`);\n        this.logger.log(`   Has content: ${originalJsonCheck.hasContent}`);\n        this.logger.log(\n          `   Content length: ${originalJsonCheck.contentLength}`,\n        );\n\n        if (originalJsonCheck.structure) {\n          this.logger.log(`📊 JSON Structure on Original URL:`);\n          this.logger.log(\n            `   Top level keys: ${JSON.stringify(originalJsonCheck.structure.topLevelKeys)}`,\n          );\n          this.logger.log(\n            `   Combined keys: ${JSON.stringify(originalJsonCheck.structure.combinedKeys)}`,\n          );\n          this.logger.log(\n            `   Total media items: ${originalJsonCheck.structure.totalItems}`,\n          );\n          this.logger.log(\n            `   Videos: ${originalJsonCheck.structure.hasVideos}`,\n          );\n          this.logger.log(\n            `   Floor plans: ${originalJsonCheck.structure.hasFloorPlans}`,\n          );\n          this.logger.log(\n            `   Documents: ${originalJsonCheck.structure.hasDocuments}`,\n          );\n          this.logger.log(\n            `   Other sections: ${JSON.stringify(originalJsonCheck.structure.otherSections)}`,\n          );\n        }\n\n        // If JSON found on original, stay there and skip gallery interaction\n        if (originalJsonCheck.exists && originalJsonCheck.hasContent) {\n          this.logger.log(\n            `✅ JSON found on original URL, extracting data directly without gallery interaction`,\n          );\n\n          // Extract data directly from JSON without gallery navigation\n          const extractedData = await this.extractEnhancedData(page);\n          const urlData = this.parseFlexMLSUrl(shareUrl);\n\n          return {\n            ...urlData,\n            ...extractedData,\n            scrapedAt: new Date(),\n            sourceUrl: shareUrl,\n          } as ParsedMLSProperty;\n        } else {\n          // No JSON on original, go back to redirect for gallery interaction\n          await page.goto(finalUrl, {\n            waitUntil: 'domcontentloaded',\n            timeout: 30000,\n          });\n        }\n      }\n\n      await page.waitForSelector('body', { timeout: 15000 });\n      await new Promise((resolve) => setTimeout(resolve, 3000)); // Longer wait for JS to load\n\n      // Try different approaches to access the full gallery\n      try {\n        this.logger.log(\n          `🖼️ Looking for gallery controls or photo navigation...`,\n        );\n\n        // First try to find gallery/slideshow controls\n        const gallerySelectors = [\n          '[class*=\"gallery\"]',\n          '[class*=\"slideshow\"]',\n          '[class*=\"carousel\"]',\n          '[class*=\"photo\"]',\n          '.rsContainer', // Based on your HTML showing 'rs' prefixed classes\n          '.rsNav',\n          '.rsThumbsContainer',\n        ];\n\n        let galleryFound = false;\n        for (const selector of gallerySelectors) {\n          const elements = await page.$$(selector);\n          if (elements.length > 0) {\n            this.logger.log(\n              `✅ Found gallery container: ${selector} (${elements.length} elements)`,\n            );\n            galleryFound = true;\n          }\n        }\n\n        // Try clicking on photo to open gallery\n        const photoSelectors = [\n          'img[src*=\"sparkplatform.com\"]',\n          'img[src*=\"flexmls\"]',\n          '.property-photos img',\n          '.listing-photos img',\n          'img[src*=\"photo\"]',\n        ];\n\n        let photoClicked = false;\n        for (const selector of photoSelectors) {\n          try {\n            await page.waitForSelector(selector, { timeout: 2000 });\n            this.logger.log(`✅ Found photo with selector: ${selector}`);\n            await page.click(selector);\n\n            // Wait longer for gallery to fully load\n            await new Promise((resolve) => setTimeout(resolve, 4000));\n            this.logger.log(\n              `🖼️ Clicked photo - waiting for gallery to load...`,\n            );\n            photoClicked = true;\n\n            // Try to find navigation arrows or thumbnail controls and interact with them\n            const navSelectors = [\n              '.rsArrowRight',\n              '.rsArrowLeft',\n              '[class*=\"next\"]',\n              '[class*=\"prev\"]',\n              '.rsThumb',\n            ];\n\n            for (const navSelector of navSelectors) {\n              const navElements = await page.$$(navSelector);\n              if (navElements.length > 0) {\n                this.logger.log(\n                  `🔍 Found ${navElements.length} navigation elements: ${navSelector}`,\n                );\n\n                // If it's an arrow, try clicking it to advance through gallery\n                if (\n                  navSelector.includes('Arrow') ||\n                  navSelector.includes('next')\n                ) {\n                  try {\n                    await page.click(navSelector);\n                    await new Promise((resolve) => setTimeout(resolve, 1000));\n                    this.logger.log(`➡️ Clicked navigation: ${navSelector}`);\n                  } catch (e) {\n                    this.logger.log(\n                      `⚠️ Could not click navigation: ${navSelector}`,\n                    );\n                  }\n                }\n              }\n            }\n\n            // Try to trigger thumbnail loading by scrolling through the thumbnail container\n            try {\n              const thumbsContainer = await page.$('.rsThumbsContainer');\n              if (thumbsContainer) {\n                this.logger.log(\n                  `📱 Found thumbnail container, trying to scroll and trigger loading...`,\n                );\n\n                // Scroll through the thumbnails container to trigger lazy loading\n                await page.evaluate(() => {\n                  const container =\n                    document.querySelector('.rsThumbsContainer');\n                  if (container) {\n                    container.scrollLeft = 0;\n                    container.scrollLeft = 500;\n                    container.scrollLeft = 1000;\n                    container.scrollLeft = 1500;\n                    container.scrollLeft = 2000;\n                  }\n                });\n\n                // Wait longer for lazy loading\n                await new Promise((resolve) => setTimeout(resolve, 3000));\n                this.logger.log(\n                  `🔄 Scrolled thumbnails container and waited for loading`,\n                );\n              }\n            } catch (e) {\n              this.logger.log(`ℹ️ Could not scroll thumbnail container`);\n            }\n\n            break;\n          } catch (e) {\n            continue;\n          }\n        }\n\n        if (!photoClicked && !galleryFound) {\n          this.logger.log(\n            `ℹ️ No gallery or clickable photo found - parsing current view`,\n          );\n        }\n      } catch (error) {\n        this.logger.log(\n          `ℹ️ Error accessing gallery - continuing with parsing: ${error.message}`,\n        );\n      }\n\n      this.logger.log(`🔍 Starting data extraction...`);\n\n      // Check for JSON data element and explore its structure\n      const jsonElementExists = await page.evaluate(() => {\n        const element = document.querySelector('#tagged_listing_media');\n        let jsonStructure: any = null;\n\n        if (element && element.textContent) {\n          try {\n            const jsonData = JSON.parse(element.textContent);\n            jsonStructure = {\n              topLevelKeys: Object.keys(jsonData),\n              combinedKeys: jsonData.combined\n                ? Object.keys(jsonData.combined)\n                : null,\n              totalItems: jsonData.combined?.All\n                ? jsonData.combined.All.length\n                : 0,\n              hasVideos: jsonData.combined?.Videos\n                ? jsonData.combined.Videos.length\n                : 0,\n              hasFloorPlans: jsonData.combined?.FloorPlans\n                ? jsonData.combined.FloorPlans.length\n                : 0,\n              hasDocuments: jsonData.combined?.Documents\n                ? jsonData.combined.Documents.length\n                : 0,\n              otherSections: Object.keys(jsonData).filter(\n                (k) => k !== 'combined',\n              ),\n            };\n          } catch (e) {\n            jsonStructure = { error: 'Failed to parse JSON' };\n          }\n        }\n\n        return {\n          exists: !!element,\n          hasContent: !!(element && element.textContent),\n          contentLength: element ? element.textContent?.length || 0 : 0,\n          innerHTML: element ? element.innerHTML.substring(0, 200) : null,\n          structure: jsonStructure,\n        };\n      });\n\n      this.logger.log(`📋 JSON element check:`);\n      this.logger.log(`   Element exists: ${jsonElementExists.exists}`);\n      this.logger.log(`   Has content: ${jsonElementExists.hasContent}`);\n      this.logger.log(`   Content length: ${jsonElementExists.contentLength}`);\n\n      if (jsonElementExists.structure) {\n        this.logger.log(`📊 JSON Structure Analysis:`);\n        this.logger.log(\n          `   Top level keys: ${JSON.stringify(jsonElementExists.structure.topLevelKeys)}`,\n        );\n        this.logger.log(\n          `   Combined keys: ${JSON.stringify(jsonElementExists.structure.combinedKeys)}`,\n        );\n        this.logger.log(\n          `   Total media items: ${jsonElementExists.structure.totalItems}`,\n        );\n        this.logger.log(`   Videos: ${jsonElementExists.structure.hasVideos}`);\n        this.logger.log(\n          `   Floor plans: ${jsonElementExists.structure.hasFloorPlans}`,\n        );\n        this.logger.log(\n          `   Documents: ${jsonElementExists.structure.hasDocuments}`,\n        );\n        this.logger.log(\n          `   Other sections: ${JSON.stringify(jsonElementExists.structure.otherSections)}`,\n        );\n      }\n\n      if (jsonElementExists.innerHTML) {\n        this.logger.log(\n          `   Content preview: ${jsonElementExists.innerHTML}...`,\n        );\n      }\n\n      // Debug: Let's see what HTML elements are actually on the page\n      const pageDebugInfo = await page.evaluate(() => {\n        const allImages = document.querySelectorAll('img');\n        const allImagesInfo = Array.from(allImages).map((img) => ({\n          src:\n            img.src ||\n            img.getAttribute('data-src') ||\n            img.getAttribute('data-lazy-src'),\n          alt: img.alt,\n          className: img.className,\n          width: img.width,\n          height: img.height,\n        }));\n\n        // Check for background images more thoroughly\n        const allElements = document.querySelectorAll('*');\n        const divWithBgImages = Array.from(allElements)\n          .filter((el) => {\n            const style = window.getComputedStyle(el);\n            return (\n              style.backgroundImage &&\n              style.backgroundImage !== 'none' &&\n              !style.backgroundImage.includes('data:image')\n            );\n          })\n          .map((el) => ({\n            backgroundImage: window.getComputedStyle(el).backgroundImage,\n            className: el.className,\n            tagName: el.tagName,\n          }));\n\n        // Specifically look for gallery thumbnail classes\n        const galleryThumbs = document.querySelectorAll(\n          '.rsTmb, .rsThumb, .rsNavItem, [class*=\"thumb\"], [class*=\"photo\"]',\n        );\n        const thumbInfo = Array.from(galleryThumbs).map((el) => ({\n          className: el.className,\n          backgroundImage: window.getComputedStyle(el).backgroundImage,\n          tagName: el.tagName,\n          hasStyle: el.getAttribute('style'),\n        }));\n\n        return {\n          totalImages: allImages.length,\n          imageDetails: allImagesInfo.slice(0, 10), // First 10 for debugging\n          backgroundImages: divWithBgImages.slice(0, 5),\n          galleryThumbs: thumbInfo,\n        };\n      });\n\n      this.logger.log(`🔍 Page Debug Info:`);\n      this.logger.log(\n        `   Total <img> elements found: ${pageDebugInfo.totalImages}`,\n      );\n      this.logger.log(\n        `   Background images found: ${pageDebugInfo.backgroundImages.length}`,\n      );\n\n      if (pageDebugInfo.imageDetails.length > 0) {\n        this.logger.log(`📸 First few image elements:`);\n        pageDebugInfo.imageDetails.forEach((img, idx) => {\n          this.logger.log(\n            `   ${idx + 1}. src: ${img.src || 'none'} | alt: ${img.alt || 'none'} | class: ${img.className || 'none'}`,\n          );\n        });\n      }\n\n      if (pageDebugInfo.backgroundImages.length > 0) {\n        this.logger.log(`🖼️ Background images:`);\n        pageDebugInfo.backgroundImages.forEach((bg, idx) => {\n          this.logger.log(\n            `   ${idx + 1}. ${bg.backgroundImage} | class: ${bg.className || 'none'} | tag: ${bg.tagName}`,\n          );\n        });\n      }\n\n      if (pageDebugInfo.galleryThumbs.length > 0) {\n        this.logger.log(`📷 Gallery thumbnails found:`);\n        pageDebugInfo.galleryThumbs.forEach((thumb, idx) => {\n          this.logger.log(\n            `   ${idx + 1}. class: ${thumb.className || 'none'} | bg: ${thumb.backgroundImage} | style: ${thumb.hasStyle || 'none'}`,\n          );\n        });\n      }\n\n      const extractedData = await this.extractEnhancedData(page);\n      this.logger.log(\n        `✅ Data extraction completed. Images found: ${extractedData.images?.length || 0}`,\n      );\n\n      // Log each image URL for debugging duplicates\n      if (extractedData.images?.length) {\n        this.logger.log(`📸 Image URLs found:`);\n        extractedData.images.forEach((img, idx) => {\n          this.logger.log(`   ${idx + 1}. ${img.url.substring(0, 150)}...`);\n        });\n      }\n\n      const urlData = this.parseFlexMLSUrl(shareUrl);\n\n      return {\n        ...urlData,\n        ...extractedData,\n        scrapedAt: new Date(),\n        sourceUrl: shareUrl,\n      } as ParsedMLSProperty;\n    } finally {\n      await page.close();\n    }\n  }\n\n  // Data extraction method (your existing logic)\n  // Quick data extraction - gets only essential info for immediate display\n  private async extractQuickData(\n    page: Page,\n  ): Promise<Partial<ParsedMLSProperty>> {\n    return await page.evaluate(() => {\n      // Get first image quickly\n      const getFirstImage = (): any[] => {\n        const imageSelectors = [\n          '[data-testid=\"hero-image\"] img',\n          '.hero-image img',\n          '.property-images img:first-child',\n          '.listing-photos img:first-child',\n          'img[src*=\"mls\"]',\n        ];\n\n        for (const selector of imageSelectors) {\n          const img = document.querySelector(selector) as HTMLImageElement;\n          if (img?.src) {\n            return [\n              {\n                url: img.src,\n                alt: img.alt || '',\n                size: 'medium' as const,\n              },\n            ];\n          }\n        }\n        return [];\n      };\n\n      // Get basic property details quickly\n      const getBasicDetails = () => {\n        const details: any = {};\n\n        // Try to get beds/baths/sqft from common selectors\n        const bedSelectors = [\n          '[data-testid=\"beds\"]',\n          '.beds',\n          '.bed-count',\n          '.property-beds',\n          '[class*=\"bed\"]',\n          '.bedroom-count',\n          '.property-details .beds',\n          '.listing-details .beds',\n        ];\n        const bathSelectors = [\n          '[data-testid=\"baths\"]',\n          '.baths',\n          '.bath-count',\n          '.property-baths',\n          '[class*=\"bath\"]',\n          '.bathroom-count',\n          '.property-details .baths',\n          '.listing-details .baths',\n        ];\n        const sqftSelectors = [\n          '[data-testid=\"sqft\"]',\n          '.sqft',\n          '.square-feet',\n          '.property-sqft',\n          '[class*=\"sqft\"]',\n          '.square-footage',\n          '.property-details .sqft',\n          '.listing-details .sqft',\n        ];\n\n        for (const selector of bedSelectors) {\n          const element = document.querySelector(selector);\n          if (element?.textContent) {\n            details.beds = element.textContent.trim();\n            break;\n          }\n        }\n\n        for (const selector of bathSelectors) {\n          const element = document.querySelector(selector);\n          if (element?.textContent) {\n            details.baths = element.textContent.trim();\n            break;\n          }\n        }\n\n        for (const selector of sqftSelectors) {\n          const element = document.querySelector(selector);\n          if (element?.textContent) {\n            details.sqft = element.textContent.trim();\n            break;\n          }\n        }\n\n        return details;\n      };\n\n      // Get basic price info quickly\n      const getBasicPrice = () => {\n        const priceSelectors = [\n          '[data-testid=\"listing-price\"]',\n          '.listing-price',\n          '.price',\n          '.property-price',\n        ];\n\n        for (const selector of priceSelectors) {\n          const element = document.querySelector(selector);\n          if (element?.textContent) {\n            const priceText = element.textContent.trim();\n            const numericPrice = parseInt(priceText.replace(/[^0-9]/g, ''));\n\n            if (numericPrice > 0) {\n              return {\n                listPrice: priceText,\n                priceNumeric: numericPrice,\n              };\n            }\n          }\n        }\n        return null;\n      };\n\n      return {\n        images: getFirstImage(),\n        propertyDetails: getBasicDetails(),\n        pricing: getBasicPrice(),\n      };\n    });\n  }\n\n  private async extractEnhancedData(\n    page: Page,\n  ): Promise<Partial<ParsedMLSProperty>> {\n    return await page.evaluate(() => {\n      // Price extraction\n      const extractPrice = (): PriceData | null => {\n        const priceSelectors = [\n          '[data-testid=\"listing-price\"]',\n          '[data-testid=\"price\"]',\n          '.listing-price',\n          '.price',\n          '.property-price',\n          '.list-price',\n          '.current-price',\n          'span[class*=\"price\"]',\n          'div[class*=\"price\"]',\n          'h1[class*=\"price\"]',\n          'h2[class*=\"price\"]',\n          '.price-container',\n          '.pricing',\n        ];\n\n        let priceText = '';\n        for (const selector of priceSelectors) {\n          try {\n            const elements = document.querySelectorAll(selector);\n            for (const element of elements) {\n              const text = element.textContent?.trim() || '';\n              if (text.match(/\\$[\\d,]+/)) {\n                priceText = text;\n                break;\n              }\n            }\n            if (priceText) break;\n          } catch (e) {\n            continue;\n          }\n        }\n\n        if (!priceText) {\n          const allText = document.body.innerText;\n          const priceMatch = allText.match(/\\$[\\d,]+/);\n          if (priceMatch) {\n            priceText = priceMatch[0];\n          }\n        }\n\n        if (!priceText) return null;\n\n        const numericMatch = priceText.match(/[\\d,]+/);\n        const priceNumeric = numericMatch\n          ? parseInt(numericMatch[0].replace(/,/g, ''), 10)\n          : 0;\n\n        return {\n          listPrice: priceText,\n          priceNumeric,\n        };\n      };\n\n      // Extract images from FlexMLS JSON data structure\n      const extractImages = (): ImageData[] => {\n        const images: ImageData[] = [];\n        const seenUrls = new Set<string>();\n        const seenImageIds = new Set<string>();\n\n        // First try to extract from the hidden JSON data\n        const jsonDataElement = document.querySelector('#tagged_listing_media');\n        console.log('JSON element found:', !!jsonDataElement);\n        console.log(\n          'JSON element has content:',\n          !!(jsonDataElement && jsonDataElement.textContent),\n        );\n\n        if (jsonDataElement && jsonDataElement.textContent) {\n          console.log(\n            'JSON content length:',\n            jsonDataElement.textContent.length,\n          );\n          try {\n            const jsonData = JSON.parse(jsonDataElement.textContent);\n\n            // Log the JSON structure for exploration\n            console.log('=== JSON DATA STRUCTURE ===');\n            console.log('Top level keys:', Object.keys(jsonData));\n\n            if (jsonData.combined) {\n              console.log('Combined keys:', Object.keys(jsonData.combined));\n              if (jsonData.combined.All) {\n                console.log('All array length:', jsonData.combined.All.length);\n\n                // Sample the first item to see its structure\n                if (jsonData.combined.All.length > 0) {\n                  const firstItem = jsonData.combined.All[0];\n                  console.log('First item keys:', Object.keys(firstItem));\n                  console.log(\n                    'First item sample:',\n                    JSON.stringify(firstItem, null, 2).substring(0, 500) +\n                      '...',\n                  );\n                }\n              }\n            }\n\n            // Look for other data sections\n            Object.keys(jsonData).forEach((key) => {\n              if (key !== 'combined') {\n                console.log(\n                  `Other data section \"${key}\":`,\n                  typeof jsonData[key],\n                  Array.isArray(jsonData[key])\n                    ? `(${jsonData[key].length} items)`\n                    : '',\n                );\n              }\n            });\n\n            if (jsonData.combined && jsonData.combined.All) {\n              console.log(\n                'Processing',\n                jsonData.combined.All.length,\n                'media items',\n              );\n              jsonData.combined.All.forEach((item: any) => {\n                if (item.html) {\n                  // Extract both high-res and thumbnail URLs from the HTML\n                  const imgMatch = item.html.match(/src=\"([^\"]+)\"/);\n                  const bgMatch = item.html.match(\n                    /background-image:\\s*url\\('([^']+)'\\)/,\n                  );\n                  const altMatch = item.html.match(/alt=\"([^\"]+)\"/);\n\n                  // Only keep high-resolution images, skip thumbnails\n                  if (imgMatch && imgMatch[1]) {\n                    const src = imgMatch[1];\n\n                    // Filter: Only keep high-res images (with resize path and dimensions)\n                    const isHighRes =\n                      src.includes('cdn.resize.sparkplatform.com') &&\n                      src.match(/\\/\\d+x\\d+\\//); // Has dimensions like /1280x1024/\n\n                    if (isHighRes) {\n                      const imageId =\n                        src.match(/\\/(\\d{26}-[a-z]\\.jpg)/i)?.[1] || src;\n\n                      if (!seenUrls.has(src) && !seenImageIds.has(imageId)) {\n                        images.push({\n                          url: src,\n                          alt: altMatch ? altMatch[1] : undefined,\n                          title: undefined,\n                          width: undefined,\n                          height: undefined,\n                          size: 'large' as const,\n                        });\n                        seenUrls.add(src);\n                        seenImageIds.add(imageId);\n                      }\n                    }\n                  }\n\n                  // Skip thumbnail background images - we only want high-res\n                }\n              });\n            }\n          } catch (e) {\n            console.log(\n              'Failed to parse JSON data:',\n              e.message,\n              'falling back to DOM extraction',\n            );\n          }\n        } else {\n          console.log(\n            'JSON element not found or empty, checking for alternative selectors...',\n          );\n\n          // Try alternative selectors for the JSON data\n          const altSelectors = [\n            '[id*=\"media\"]',\n            '[id*=\"listing\"]',\n            '[id*=\"tagged\"]',\n            'script[type=\"application/json\"]',\n            'div[hidden]',\n          ];\n\n          for (const selector of altSelectors) {\n            const elements = document.querySelectorAll(selector);\n            console.log(\n              `Found ${elements.length} elements with selector: ${selector}`,\n            );\n            if (elements.length > 0) {\n              Array.from(elements).forEach((el, idx) => {\n                console.log(\n                  `  ${idx + 1}. id: ${el.id || 'none'}, classes: ${el.className || 'none'}`,\n                );\n              });\n            }\n          }\n        }\n\n        // If we got images from JSON, return them\n        if (images.length > 0) {\n          console.log(\n            `Successfully extracted ${images.length} high-resolution images from JSON`,\n          );\n          return images;\n        }\n\n        // Fallback: COMPREHENSIVE background image extraction from DOM\n        const allElements = document.querySelectorAll('*'); // Check every element\n\n        allElements.forEach((el) => {\n          const bgImage = window.getComputedStyle(el).backgroundImage;\n          if (bgImage && bgImage !== 'none') {\n            // Extract URL from background-image: url('...')\n            const urlMatch = bgImage.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n            if (urlMatch && urlMatch[1]) {\n              const src = urlMatch[1];\n\n              // Skip obvious non-photo backgrounds\n              const srcLower = src.toLowerCase();\n              if (\n                srcLower.includes('data:image') ||\n                srcLower.includes('gradient') ||\n                srcLower.includes('logo') ||\n                srcLower.includes('icon') ||\n                srcLower.includes('button') ||\n                srcLower.endsWith('.svg')\n              ) {\n                return;\n              }\n\n              // Extract image ID for deduplication\n              const imageId =\n                src.match(/\\/(\\d{26}\\.jpg)/i)?.[1] ||\n                src.match(/\\/([^/]+\\.(jpg|jpeg|png|webp))/i)?.[1] ||\n                src;\n\n              if (!seenUrls.has(src) && !seenImageIds.has(imageId)) {\n                images.push({\n                  url: src,\n                  alt:\n                    el.getAttribute('alt') ||\n                    el.getAttribute('aria-label') ||\n                    el.getAttribute('title') ||\n                    undefined,\n                  title: el.getAttribute('title') || undefined,\n                  width: undefined,\n                  height: undefined,\n                  size: 'large' as const,\n                });\n                seenUrls.add(src);\n                seenImageIds.add(imageId);\n              }\n            }\n          }\n\n          // Also check for video elements and video thumbnails\n          if (el.tagName === 'VIDEO') {\n            const poster = el.getAttribute('poster');\n            const src =\n              el.getAttribute('src') ||\n              el.querySelector('source')?.getAttribute('src');\n\n            if (poster && !seenUrls.has(poster)) {\n              images.push({\n                url: poster,\n                alt: 'Video thumbnail',\n                title: 'Video poster frame',\n                width: undefined,\n                height: undefined,\n                size: 'large' as const,\n              });\n              seenUrls.add(poster);\n            }\n\n            if (src && !seenUrls.has(src)) {\n              images.push({\n                url: src,\n                alt: 'Video file',\n                title: 'Property video',\n                width: undefined,\n                height: undefined,\n                size: 'large' as const,\n              });\n              seenUrls.add(src);\n            }\n          }\n        });\n\n        // Multiple selectors for regular image tags\n        const imageSelectors = [\n          // FlexMLS specific selectors\n          'img[src*=\"flexmls\"]',\n          'img[data-src*=\"flexmls\"]',\n\n          // Gallery and photo containers\n          '.gallery img',\n          '.photos img',\n          '.property-photos img',\n          '.listing-photos img',\n          '.image-gallery img',\n          '.photo-gallery img',\n\n          // Generic property images\n          '.property-image img',\n          'img[src*=\"photo\"]',\n          'img[src*=\"image\"]',\n          'img[src*=\"listing\"]',\n\n          // Backup - any image with http/https\n          'img[src*=\"http\"]',\n        ];\n\n        // Try each selector and collect all unique images\n        for (const selector of imageSelectors) {\n          try {\n            const imageElements = document.querySelectorAll(selector);\n\n            for (const img of Array.from(imageElements)) {\n              const htmlImg = img as HTMLImageElement;\n              const src =\n                htmlImg.src ||\n                htmlImg.getAttribute('data-src') ||\n                htmlImg.getAttribute('data-lazy-src');\n\n              if (!src) continue;\n\n              // Skip URL duplicates\n              if (seenUrls.has(src)) continue;\n\n              // Extract image ID from Spark CDN URLs to prevent resolution duplicates\n              const extractImageId = (url: string): string => {\n                const match = url.match(/\\/(\\d{26}-[a-z]\\.jpg)/i);\n                return match ? match[1] : url;\n              };\n\n              const imageId = extractImageId(src);\n              const currentResolution =\n                src.match(/\\/(\\d+x\\d+)\\//)?.[1] || '0x0';\n\n              // Skip if we've seen this image ID before, unless this is a higher resolution\n              if (seenImageIds.has(imageId)) {\n                const existingIndex = images.findIndex(\n                  (img) => extractImageId(img.url) === imageId,\n                );\n                if (existingIndex !== -1) {\n                  const existingResolution =\n                    images[existingIndex].url.match(/\\/(\\d+x\\d+)\\//)?.[1] ||\n                    '0x0';\n                  const [currentW, currentH] = currentResolution\n                    .split('x')\n                    .map(Number);\n                  const [existingW, existingH] = existingResolution\n                    .split('x')\n                    .map(Number);\n\n                  if (currentW * currentH > existingW * existingH) {\n                    images.splice(existingIndex, 1);\n                    seenUrls.delete(images[existingIndex]?.url || '');\n                  } else {\n                    continue;\n                  }\n                }\n              }\n\n              // Enhanced filtering - exclude obvious non-photos\n              const srcLower = src.toLowerCase();\n              const altText = (htmlImg.alt || '').toLowerCase();\n\n              if (\n                srcLower.includes('logo') ||\n                srcLower.includes('icon') ||\n                srcLower.includes('button') ||\n                srcLower.includes('banner') ||\n                srcLower.includes('avatar') ||\n                srcLower.includes('maps.googleapis.com') ||\n                srcLower.includes('maps.google.com') ||\n                srcLower.includes('googleusercontent.com') ||\n                srcLower.includes('gstatic.com') ||\n                srcLower.includes('tile') ||\n                srcLower.includes('streetview') ||\n                (htmlImg.width > 0 && htmlImg.width < 200) ||\n                (htmlImg.height > 0 && htmlImg.height < 150)\n              ) {\n                continue;\n              }\n\n              const isSparkCDN =\n                srcLower.includes('cdn.resize.sparkplatform.com') ||\n                srcLower.includes('cdn.assets.flexmls.com');\n              const isPropertyPhoto =\n                altText.includes('photo') &&\n                (altText.includes(' photo ') || /photo\\s+[a-z]/.test(altText));\n\n              if (isSparkCDN && isPropertyPhoto) {\n                images.unshift({\n                  url: src,\n                  alt: htmlImg.alt || undefined,\n                  title: htmlImg.title || undefined,\n                  width: htmlImg.naturalWidth || htmlImg.width || undefined,\n                  height: htmlImg.naturalHeight || htmlImg.height || undefined,\n                  size: 'large' as const,\n                });\n              } else {\n                images.push({\n                  url: src,\n                  alt: htmlImg.alt || undefined,\n                  title: htmlImg.title || undefined,\n                  width: htmlImg.naturalWidth || htmlImg.width || undefined,\n                  height: htmlImg.naturalHeight || htmlImg.height || undefined,\n                  size: 'large' as const,\n                });\n              }\n\n              seenUrls.add(src);\n              seenImageIds.add(imageId);\n            }\n          } catch (e) {\n            continue;\n          }\n        }\n\n        // Filter to only return Spark CDN images (property photos) if available\n        const sparkImages = images.filter(\n          (img) =>\n            img.url.toLowerCase().includes('cdn.resize.sparkplatform.com') ||\n            img.url.toLowerCase().includes('cdn.assets.flexmls.com'),\n        );\n\n        return sparkImages.length > 0 ? sparkImages : images;\n      };\n\n      // Property details extraction\n      const extractPropertyDetails = () => {\n        const findText = (patterns: string[]): string => {\n          for (const pattern of patterns) {\n            const regex = new RegExp(pattern, 'i');\n            const match = document.body.innerText.match(regex);\n            if (match) return match[0].trim();\n          }\n          return '';\n        };\n\n        // Extract property description - look for common description patterns\n        const findDescription = (): string => {\n          const bodyText = document.body.innerText;\n          const descriptionPatterns = [\n            /description[:\\s]+(.*?)(?=\\n\\n|\\n[A-Z]|\\n\\s*$)/i,\n            /remarks[:\\s]+(.*?)(?=\\n\\n|\\n[A-Z]|\\n\\s*$)/i,\n            /about this property[:\\s]+(.*?)(?=\\n\\n|\\n[A-Z]|\\n\\s*$)/i,\n          ];\n\n          for (const pattern of descriptionPatterns) {\n            const match = bodyText.match(pattern);\n            if (match && match[1] && match[1].trim().length > 20) {\n              return match[1].trim().substring(0, 500); // Limit to 500 chars\n            }\n          }\n\n          // Fallback: look for longer text blocks that might be descriptions\n          const paragraphs = bodyText\n            .split('\\n')\n            .filter((p) => p.trim().length > 50);\n          const possibleDescription = paragraphs.find(\n            (p) =>\n              p.includes('bedroom') ||\n              p.includes('kitchen') ||\n              p.includes('living') ||\n              p.includes('home') ||\n              p.includes('property') ||\n              p.includes('house'),\n          );\n\n          return possibleDescription\n            ? possibleDescription.substring(0, 500)\n            : '';\n        };\n\n        return {\n          beds: findText([\n            '(\\\\d+)\\\\s*bed(?:room)?s?',\n            'bed(?:room)?s?\\\\s*:?\\\\s*(\\\\d+)',\n            '(\\\\d+)\\\\s*bd',\n            '(\\\\d+)\\\\s*br',\n            'beds?\\\\s*:?\\\\s*(\\\\d+)',\n            '(\\\\d+)\\\\s*bedroom',\n          ]),\n          baths: findText([\n            '(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*bath(?:room)?s?',\n            'bath(?:room)?s?\\\\s*:?\\\\s*(\\\\d+(?:\\\\.\\\\d+)?)',\n            '(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*ba',\n            'baths?\\\\s*:?\\\\s*(\\\\d+(?:\\\\.\\\\d+)?)',\n            '(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*bathroom',\n          ]),\n          sqft: findText([\n            '([\\\\d,]+)\\\\s*sq\\\\s*ft',\n            '([\\\\d,]+)\\\\s*square\\\\s*feet?',\n            'sq\\\\s*ft\\\\s*:?\\\\s*([\\\\d,]+)',\n            'sqft\\\\s*:?\\\\s*([\\\\d,]+)',\n            '([\\\\d,]+)\\\\s*sf',\n            'square\\\\s*feet?\\\\s*:?\\\\s*([\\\\d,]+)',\n          ]),\n          description: findDescription(),\n        };\n      };\n\n      // Listing info extraction\n      const extractListingInfo = () => {\n        const findText = (patterns: string[]): string => {\n          for (const pattern of patterns) {\n            const regex = new RegExp(pattern, 'i');\n            const match = document.body.innerText.match(regex);\n            if (match) return match[1] || match[0].trim();\n          }\n          return '';\n        };\n\n        return {\n          mlsNumber: findText([\n            'mls\\\\s*#?\\\\s*([\\\\w\\\\d]+)',\n            'listing\\\\s*#?\\\\s*([\\\\w\\\\d]+)',\n            '#\\\\s*([\\\\w\\\\d]{6,})',\n          ]),\n        };\n      };\n\n      const pricing = extractPrice();\n      const images = extractImages();\n      const propertyDetails = extractPropertyDetails();\n      const listingInfo = extractListingInfo();\n\n      return {\n        pricing,\n        images,\n        propertyDetails,\n        listingInfo,\n      };\n    });\n  }\n\n  // URL parsing method (your existing logic)\n  private parseFlexMLSUrl(url: string) {\n    try {\n      const urlObj = new URL(url);\n      const pathParts = urlObj.pathname.split('/');\n\n      if (pathParts.length < 4 || pathParts[1] !== 'share') {\n        throw new Error('Invalid FlexMLS URL format');\n      }\n\n      const shareId = pathParts[2];\n      const propertySlug = pathParts[3];\n      const parts = propertySlug.split('-');\n\n      if (parts.length < 4) {\n        throw new Error('Invalid property slug format');\n      }\n\n      const zipCode = parts[parts.length - 1];\n      const state = parts[parts.length - 2];\n      let city = parts[parts.length - 3];\n      const streetAddress = parts.slice(0, parts.length - 3).join(' ');\n\n      // Clean up city name - remove any zip code that might already be included\n      city = city.replace(/\\d{5}(-\\d{4})?$/, '').trim();\n\n      // Clean up any duplicate zip codes or city names in the full address\n      let fullAddress = `${streetAddress}, ${city}, ${state} ${zipCode}`;\n\n      // Remove duplicate city names - handle both consecutive and non-consecutive duplicates\n      if (city) {\n        const escapedCity = city.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // Escape special regex chars\n\n        // First, remove consecutive duplicates\n        const cityConsecutiveRegex = new RegExp(\n          `(${escapedCity}[,\\\\s]+)+${escapedCity}`,\n          'gi',\n        );\n        fullAddress = fullAddress.replace(cityConsecutiveRegex, city);\n\n        // Then, remove non-consecutive duplicates by checking if city appears twice\n        const cityOccurrences = (\n          fullAddress.match(new RegExp(escapedCity, 'gi')) || []\n        ).length;\n        if (cityOccurrences > 1) {\n          // Split address by commas and remove duplicate city entries\n          const addressParts = fullAddress\n            .split(',')\n            .map((part) => part.trim());\n          const uniqueParts: string[] = [];\n          let seenCity = false;\n\n          for (const part of addressParts) {\n            if (part.toLowerCase() === city.toLowerCase()) {\n              if (!seenCity) {\n                uniqueParts.push(part);\n                seenCity = true;\n              }\n            } else {\n              uniqueParts.push(part);\n            }\n          }\n          fullAddress = uniqueParts.join(', ');\n        }\n      }\n\n      // Remove duplicate zip codes - handle both consecutive and non-consecutive duplicates\n      if (zipCode) {\n        const escapedZip = zipCode.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n        // First, remove consecutive duplicates\n        const zipConsecutiveRegex = new RegExp(\n          `(${escapedZip}[,\\\\s]+)+${escapedZip}`,\n          'g',\n        );\n        fullAddress = fullAddress.replace(zipConsecutiveRegex, zipCode);\n\n        // Then, remove non-consecutive duplicates\n        const zipOccurrences = (\n          fullAddress.match(new RegExp(`\\\\b${escapedZip}\\\\b`, 'g')) || []\n        ).length;\n        if (zipOccurrences > 1) {\n          // Remove all zip codes and add only one at the end\n          const zipRemovalRegex = new RegExp(`\\\\b${escapedZip}\\\\b`, 'g');\n          let tempAddress = fullAddress.replace(zipRemovalRegex, '').trim();\n\n          // Clean up extra spaces/commas and append single zip\n          tempAddress = tempAddress.replace(/,\\s*$/, ''); // Remove trailing comma\n          fullAddress = `${tempAddress} ${zipCode}`;\n        }\n      }\n\n      // Remove duplicate state names\n      if (state) {\n        const escapedState = state.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        const stateOccurrences = (\n          fullAddress.match(new RegExp(`\\\\b${escapedState}\\\\b`, 'gi')) || []\n        ).length;\n        if (stateOccurrences > 1) {\n          // Remove all states except the last one\n          const stateRegex = new RegExp(`\\\\b${escapedState}\\\\b`, 'gi');\n          const matches = [\n            ...fullAddress.matchAll(new RegExp(`\\\\b${escapedState}\\\\b`, 'gi')),\n          ];\n\n          if (matches.length > 1) {\n            // Remove all but the last occurrence\n            for (let i = 0; i < matches.length - 1; i++) {\n              const match = matches[i];\n              fullAddress =\n                fullAddress.substring(0, match.index) +\n                fullAddress.substring(match.index + match[0].length);\n\n              // Adjust indices for subsequent matches\n              for (let j = i + 1; j < matches.length; j++) {\n                matches[j].index -= match[0].length;\n              }\n            }\n          }\n        }\n      }\n\n      // Clean up any extra commas, spaces, and normalize formatting\n      fullAddress = fullAddress\n        .replace(/,\\s*,/g, ',')\n        .replace(/\\s*,\\s*/g, ', ')\n        .replace(/\\s+/g, ' ')\n        .trim();\n\n      return {\n        shareId,\n        address: {\n          street: streetAddress,\n          city,\n          state,\n          zipCode,\n          full: fullAddress,\n        },\n      };\n    } catch (error) {\n      throw new Error(`Failed to parse FlexMLS URL: ${error.message}`);\n    }\n  }\n\n  // Validation methods\n  private isValidMLSUrl(url: string): boolean {\n    try {\n      const urlObj = new URL(url);\n      return (\n        urlObj.hostname.includes('flexmls.com') &&\n        urlObj.pathname.includes('/share/')\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  // Enhanced duplicate detection\n  async checkEnhancedDuplicate(\n    agentId: string,\n    clientId: string,\n    parsedProperty: ParsedMLSProperty,\n  ): Promise<{\n    isDuplicate: boolean;\n    reason?: string;\n    existingProperty?: any;\n  }> {\n    // Check by MLS URL\n    const existingByUrl = await this.prisma.property.findFirst({\n      where: {\n        originalMlsUrl: parsedProperty.sourceUrl,\n        timeline: {\n          agentId,\n          clientId,\n          isActive: true,\n        },\n      },\n    });\n\n    if (existingByUrl) {\n      return {\n        isDuplicate: true,\n        reason: 'Same MLS URL already imported',\n        existingProperty: existingByUrl,\n      };\n    }\n\n    // Check by normalized address\n    const normalizedAddress = this.normalizeAddress(\n      parsedProperty.address.full,\n    );\n    const existingByAddress = await this.prisma.property.findFirst({\n      where: {\n        addressNormalized: normalizedAddress,\n        timeline: {\n          agentId,\n          clientId,\n          isActive: true,\n        },\n      },\n    });\n\n    if (existingByAddress) {\n      return {\n        isDuplicate: true,\n        reason: 'Similar address already exists',\n        existingProperty: existingByAddress,\n      };\n    }\n\n    return { isDuplicate: false };\n  }\n\n  private normalizeAddress(address: string): string {\n    return address\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  private getPriceRange(price: number): string {\n    if (price < 200000) return 'under_200k';\n    if (price < 300000) return '200k_300k';\n    if (price < 500000) return '300k_500k';\n    if (price < 750000) return '500k_750k';\n    if (price < 1000000) return '750k_1m';\n    return 'over_1m';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\prisma\\prisma.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\prisma\\prisma.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\share\\dto\\client-login.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\share\\dto\\client-session.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\share\\guards\\client-session.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":14,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":15,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":16,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .headers on an `any` value.","line":16,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":16,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":22,"column":67,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":22,"endColumn":79}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ShareService } from '../share.service';\n\n@Injectable()\nexport class ClientSessionGuard implements CanActivate {\n  constructor(private shareService: ShareService) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const sessionToken =\n      request.headers['x-session-token'] || request.body.sessionToken;\n\n    if (!sessionToken) {\n      throw new UnauthorizedException('Session token required');\n    }\n\n    const isValid = await this.shareService.validateClientSession(sessionToken);\n\n    if (!isValid) {\n      throw new UnauthorizedException('Invalid or expired session');\n    }\n\n    return true;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\share\\share.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NotFoundException' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":87,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":87,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":87,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":88,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":88,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":95,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":95,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":95,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":96,"column":44,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":96,"endColumn":51}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Body,\n  Query,\n  Request,\n  UseGuards,\n  NotFoundException,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Public } from '../common/decorators/public.decorator';\nimport { ShareService } from './share.service';\nimport { ClientLoginDto } from './dto/client-login.dto';\n\n@Controller('api/v1/share')\nexport class ShareController {\n  constructor(private readonly shareService: ShareService) {}\n\n  // Client authentication endpoint\n  @Public()\n  @Post(':shareToken/authenticate')\n  async authenticateClient(\n    @Param('shareToken') shareToken: string,\n    @Body() clientLoginDto: ClientLoginDto,\n    @Request() req,\n  ) {\n    return this.shareService.authenticateClient(\n      shareToken,\n      clientLoginDto,\n      req,\n    );\n  }\n\n  // Get timeline data for client\n  @Public()\n  @Get(':shareToken')\n  async getClientTimeline(\n    @Param('shareToken') shareToken: string,\n    @Query('sessionToken') sessionToken?: string,\n  ) {\n    return this.shareService.getClientTimeline(shareToken, sessionToken);\n  }\n\n  // Submit property feedback (public endpoint for clients)\n  @Public()\n  @Post(':shareToken/properties/:propertyId/feedback')\n  async submitPropertyFeedback(\n    @Param('shareToken') shareToken: string,\n    @Param('propertyId') propertyId: string,\n    @Body()\n    feedbackData: {\n      type: 'LOVE_IT' | 'LIKE_IT' | 'DISLIKE_IT';\n      notes?: string;\n      clientName: string;\n      clientEmail: string;\n    },\n    @Request() req,\n  ) {\n    // Transform the data to match service expectations\n    const enumMapping = {\n      LOVE_IT: 'love',\n      LIKE_IT: 'like',\n      DISLIKE_IT: 'dislike',\n    } as const;\n\n    const transformedFeedbackData = {\n      feedback: enumMapping[feedbackData.type] || 'like',\n      notes: feedbackData.notes,\n      clientName: feedbackData.clientName,\n      clientEmail: feedbackData.clientEmail,\n    };\n\n    return this.shareService.submitPropertyFeedback(\n      shareToken,\n      propertyId,\n      transformedFeedbackData,\n      req,\n    );\n  }\n\n  // Revoke timeline access (Agent only)\n  @UseGuards(JwtAuthGuard)\n  @Post(':shareToken/revoke')\n  async revokeAccess(@Request() req, @Param('shareToken') shareToken: string) {\n    const agentId = req.user.id;\n    return this.shareService.revokeAccess(agentId, shareToken);\n  }\n\n  // Get sharing statistics (Agent only)\n  @UseGuards(JwtAuthGuard)\n  @Get(':shareToken/stats')\n  async getShareStats(@Request() req, @Param('shareToken') shareToken: string) {\n    const agentId = req.user.id;\n    return this.shareService.getShareStats(agentId, shareToken);\n  }\n\n  // Validate client session\n  @Public()\n  @Post('validate-session')\n  async validateClientSession(@Body() body: { sessionToken: string }) {\n    const isValid = await this.shareService.validateClientSession(\n      body.sessionToken,\n    );\n    return { valid: isValid };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\share\\share.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\share\\share.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BadRequestException' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Request | undefined`.","line":64,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":64,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":105,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sessionToken on an `any` value.","line":105,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Request | undefined`.","line":108,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":108,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sessionToken on an `any` value.","line":112,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":113,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clientName on an `any` value.","line":113,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":195,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":199,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":217,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":227,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":221,"column":19,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":221,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Request | undefined`.","line":297,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":297,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timeline' is defined but never used.","line":472,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":472,"endColumn":34}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { ClientLoginDto } from './dto/client-login.dto';\nimport { ClientSessionDto } from './dto/client-session.dto';\n\n@Injectable()\nexport class ShareService {\n  constructor(\n    private prisma: PrismaService,\n    private analyticsService: AnalyticsService,\n  ) {}\n\n  // Client authentication with firstName + last 4 phone digits\n  async authenticateClient(\n    shareToken: string,\n    clientLoginDto: ClientLoginDto,\n    request?: any,\n  ): Promise<ClientSessionDto> {\n    // Find timeline by share token\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: {\n        client: true,\n        agent: {\n          include: {\n            profile: true,\n          },\n        },\n      },\n    });\n\n    if (!timeline || !timeline.isActive) {\n      throw new NotFoundException('Timeline not found or no longer active');\n    }\n\n    // Validate client credentials\n    const client = timeline.client;\n    const isValidName = this.validateClientName(\n      clientLoginDto.clientName,\n      client.firstName,\n    );\n    const isValidPhone = this.validatePhoneLastFour(\n      clientLoginDto.phoneLastFour,\n      client.phone || undefined,\n    );\n\n    if (!isValidName || !isValidPhone) {\n      // Track failed login attempt\n      await this.analyticsService.trackEvent(\n        shareToken,\n        {\n          eventType: 'auth_failed',\n          metadata: {\n            attemptedName: clientLoginDto.clientName,\n            reason: !isValidName ? 'invalid_name' : 'invalid_phone',\n          },\n        },\n        request,\n      );\n\n      throw new UnauthorizedException('Invalid client credentials');\n    }\n\n    // Check for existing active session\n    const existingAuth = await this.prisma.clientAuth.findFirst({\n      where: {\n        timelineId: timeline.id,\n        clientName: clientLoginDto.clientName,\n        isActive: true,\n      },\n    });\n\n    let finalAuth;\n\n    if (existingAuth) {\n      // Update existing session\n      finalAuth = await this.prisma.clientAuth.update({\n        where: { id: existingAuth.id },\n        data: { lastAccess: new Date() },\n      });\n    } else {\n      // Create new session\n      finalAuth = await this.prisma.clientAuth.create({\n        data: {\n          clientName: clientLoginDto.clientName,\n          phoneLastFour: clientLoginDto.phoneLastFour,\n          timelineId: timeline.id,\n        },\n      });\n    }\n\n    // Track successful login\n    await this.analyticsService.trackEvent(\n      shareToken,\n      {\n        eventType: 'client_login',\n        metadata: {\n          clientName: clientLoginDto.clientName,\n          sessionId: finalAuth.sessionToken,\n        },\n      },\n      request,\n    );\n\n    return {\n      sessionToken: finalAuth.sessionToken,\n      clientName: finalAuth.clientName,\n      timelineId: timeline.id,\n      shareToken: timeline.shareToken,\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    };\n  }\n\n  // Get timeline data for authenticated client\n  async getClientTimeline(shareToken: string, sessionToken?: string) {\n    // Find timeline\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: {\n        client: true,\n        agent: {\n          include: {\n            profile: true,\n          },\n        },\n        properties: {\n          where: { isQueued: false }, // Only show sent properties\n          include: {\n            feedback: true,\n          },\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n\n    if (!timeline || !timeline.isActive) {\n      throw new NotFoundException('Timeline not found or no longer active');\n    }\n\n    // If session token provided, validate it\n    let authenticatedClient: any = null;\n    if (sessionToken) {\n      const authRecord = await this.prisma.clientAuth.findFirst({\n        where: {\n          sessionToken,\n          timelineId: timeline.id,\n          isActive: true,\n        },\n      });\n\n      if (authRecord) {\n        // Update last access\n        await this.prisma.clientAuth.update({\n          where: { id: authRecord.id },\n          data: { lastAccess: new Date() },\n        });\n        authenticatedClient = authRecord;\n      }\n    }\n\n    // Format response\n    return {\n      timeline: {\n        id: timeline.id,\n        title: timeline.title,\n        description: timeline.description,\n        shareToken: timeline.shareToken,\n        totalViews: timeline.totalViews,\n        lastViewed: timeline.lastViewed,\n      },\n      client: {\n        firstName: timeline.client.firstName,\n        lastName: timeline.client.lastName,\n        email: timeline.client.email,\n      },\n      agent: {\n        firstName: timeline.agent.profile?.firstName,\n        lastName: timeline.agent.profile?.lastName,\n        name: timeline.agent.profile\n          ? `${timeline.agent.profile.firstName} ${timeline.agent.profile.lastName}`\n          : 'Your Agent',\n        company: timeline.agent.profile?.company,\n        phone: timeline.agent.profile?.phone,\n        email: timeline.agent.email,\n        avatar: timeline.agent.profile?.avatar,\n        logo: timeline.agent.profile?.logo,\n        brandColor: timeline.agent.profile?.brandColor,\n        yearsExperience: timeline.agent.profile?.yearsExperience,\n        specialties: timeline.agent.profile?.specialties\n          ? typeof timeline.agent.profile.specialties === 'string'\n            ? JSON.parse(timeline.agent.profile.specialties)\n            : timeline.agent.profile.specialties\n          : [],\n        bio: timeline.agent.profile?.bio,\n        license: timeline.agent.profile?.licenseNumber,\n        website: timeline.agent.profile?.website,\n      },\n      properties: timeline.properties.map((property) => ({\n        id: property.id,\n        mlsId: property.mlsId,\n        address: property.address,\n        city: property.city,\n        state: property.state,\n        zipCode: property.zipCode,\n        price: property.price,\n        bedrooms: property.bedrooms,\n        bathrooms: property.bathrooms,\n        squareFootage: property.squareFootage,\n        propertyType: property.propertyType,\n        description: property.description,\n        imageUrls: property.imageUrls\n          ? typeof property.imageUrls === 'string'\n            ? (() => {\n                try {\n                  return JSON.parse(property.imageUrls);\n                } catch {\n                  return [property.imageUrls]; // fallback for non-JSON strings\n                }\n              })()\n            : property.imageUrls\n          : [],\n        listingUrl: property.listingUrl,\n        isViewed: property.isViewed,\n        viewedAt: property.viewedAt,\n        createdAt: property.createdAt,\n        feedback: property.feedback.map((fb) => ({\n          id: fb.id,\n          feedback: fb.feedback,\n          notes: fb.notes,\n          createdAt: fb.createdAt,\n        })),\n      })),\n      isAuthenticated: !!authenticatedClient,\n      authRequired: this.isAuthRequired(timeline),\n    };\n  }\n\n  // Submit property feedback\n  async submitPropertyFeedback(\n    shareToken: string,\n    propertyId: string,\n    feedbackData: {\n      feedback: 'love' | 'like' | 'dislike';\n      notes?: string;\n      clientName: string;\n      clientEmail: string;\n    },\n    request?: any,\n  ) {\n    // Verify timeline and property exist\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: {\n        properties: {\n          where: { id: propertyId },\n        },\n      },\n    });\n\n    if (!timeline || timeline.properties.length === 0) {\n      throw new NotFoundException('Property not found in timeline');\n    }\n\n    const property = timeline.properties[0];\n\n    // Create feedback record\n    const feedback = await this.prisma.feedback.create({\n      data: {\n        feedback: feedbackData.feedback,\n        notes: feedbackData.notes,\n        clientName: feedbackData.clientName,\n        clientEmail: feedbackData.clientEmail,\n        propertyId: property.id,\n        clientId: timeline.clientId,\n        respondedAt: new Date(),\n      },\n    });\n\n    // Track feedback submission\n    await this.analyticsService.trackEvent(\n      shareToken,\n      {\n        eventType: 'feedback_submit',\n        propertyId: property.id,\n        metadata: {\n          feedbackType: feedbackData.feedback, // ✅ CORRECT - use 'feedback' field\n          hasNotes: !!feedbackData.notes,\n          clientName: feedbackData.clientName,\n        },\n      },\n      request,\n    );\n\n    return feedback;\n  }\n\n  // Revoke timeline access (Agent only)\n  async revokeAccess(\n    agentId: string,\n    shareToken: string,\n  ): Promise<{ message: string }> {\n    // Verify agent owns this timeline\n    const timeline = await this.prisma.timeline.findFirst({\n      where: {\n        shareToken,\n        agentId,\n      },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    // Deactivate timeline and all client sessions\n    await this.prisma.$transaction([\n      this.prisma.timeline.update({\n        where: { id: timeline.id },\n        data: { isActive: false },\n      }),\n      this.prisma.clientAuth.updateMany({\n        where: { timelineId: timeline.id },\n        data: { isActive: false },\n      }),\n    ]);\n\n    return { message: 'Timeline access revoked successfully' };\n  }\n\n  // Get sharing statistics (Agent only)\n  async getShareStats(agentId: string, shareToken: string) {\n    // Verify agent owns this timeline\n    const timeline = await this.prisma.timeline.findFirst({\n      where: {\n        shareToken,\n        agentId,\n      },\n      include: {\n        _count: {\n          select: {\n            clientAuth: true,\n            analytics: true,\n          },\n        },\n      },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    // Get recent activity (last 7 days)\n    const lastWeek = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    const recentActivity = await this.prisma.clientAnalytics.findMany({\n      where: {\n        timelineId: timeline.id,\n        timestamp: { gte: lastWeek },\n      },\n      orderBy: { timestamp: 'desc' },\n      take: 20,\n    });\n\n    // Get feedback summary\n    const feedbackSummary = await this.prisma.feedback.groupBy({\n      by: ['feedback'],\n      where: {\n        property: {\n          timelineId: timeline.id,\n        },\n      },\n      _count: { feedback: true },\n    });\n\n    return {\n      timeline: {\n        id: timeline.id,\n        title: timeline.title,\n        shareToken: timeline.shareToken,\n        totalViews: timeline.totalViews,\n        lastViewed: timeline.lastViewed,\n        isActive: timeline.isActive,\n      },\n      stats: {\n        totalSessions: timeline._count.clientAuth,\n        totalEvents: timeline._count.analytics,\n        recentActivity: recentActivity.length,\n        feedbackSummary: {\n          love:\n            feedbackSummary.find((f) => f.feedback === 'love')?._count\n              .feedback || 0,\n          like:\n            feedbackSummary.find((f) => f.feedback === 'like')?._count\n              .feedback || 0,\n          dislike:\n            feedbackSummary.find((f) => f.feedback === 'dislike')?._count\n              .feedback || 0,\n        },\n      },\n      recentActivity: recentActivity.map((activity) => ({\n        eventType: activity.eventType,\n        timestamp: activity.timestamp,\n        metadata: activity.metadata,\n      })),\n    };\n  }\n\n  // Validate client session\n  async validateClientSession(sessionToken: string): Promise<boolean> {\n    const clientAuth = await this.prisma.clientAuth.findUnique({\n      where: { sessionToken },\n    });\n\n    if (!clientAuth || !clientAuth.isActive) {\n      return false;\n    }\n\n    // Check if session is still valid (30 days)\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    if (clientAuth.lastAccess < thirtyDaysAgo) {\n      // Deactivate expired session\n      await this.prisma.clientAuth.update({\n        where: { id: clientAuth.id },\n        data: { isActive: false },\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  // Helper methods\n  private validateClientName(\n    inputName: string,\n    actualFirstName: string,\n  ): boolean {\n    const cleanInput = inputName\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z]/g, '');\n    const cleanActual = actualFirstName\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z]/g, '');\n\n    // Allow exact match or partial match (minimum 3 characters)\n    return (\n      cleanInput === cleanActual ||\n      (cleanInput.length >= 3 && cleanActual.startsWith(cleanInput))\n    );\n  }\n\n  private validatePhoneLastFour(\n    inputDigits: string,\n    actualPhone?: string,\n  ): boolean {\n    if (!actualPhone) {\n      // If no phone number stored, be more lenient\n      return inputDigits.length === 4 && /^\\d{4}$/.test(inputDigits);\n    }\n\n    const phoneDigits = actualPhone.replace(/[^\\d]/g, '');\n    const lastFour = phoneDigits.slice(-4);\n\n    return inputDigits === lastFour;\n  }\n\n  private isAuthRequired(timeline: any): boolean {\n    // For now, always require auth for security\n    // Could be made configurable per agent in the future\n    return true;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\spark\\dto\\spark-listing.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\spark\\spark.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Req' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":6},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'testConnection' has no 'await' expression.","line":28,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":28,"endColumn":23,"suggestions":[{"messageId":"removeAsync","fix":{"range":[794,800],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initiateMLSConnection' has no 'await' expression.","line":76,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":76,"endColumn":30,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1911,1917],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":79,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":146,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":151,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expires_in on an `any` value.","line":154,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":163,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":163,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":163,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":164,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":164,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .access_token on an `any` value.","line":164,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":165,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":165,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .refresh_token on an `any` value.","line":165,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":171,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":171,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .scope on an `any` value.","line":171,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":172,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":172,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token_type on an `any` value.","line":172,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":176,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .access_token on an `any` value.","line":176,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":177,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":177,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .refresh_token on an `any` value.","line":177,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":184,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":184,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .scope on an `any` value.","line":184,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":185,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":185,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token_type on an `any` value.","line":185,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | boolean`.","line":197,"column":71,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":197,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":197,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":18,"nodeType":"Property","messageId":"anyAssignment","endLine":207,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":207,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":238,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":238,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":238,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":283,"column":15,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":283,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":283,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":291,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":291,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":292,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":311,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":311,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":311,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":311,"endColumn":29}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Query,\n  Post,\n  UseGuards,\n  Req,\n  Redirect,\n  Body,\n} from '@nestjs/common';\nimport { SparkService } from './spark.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { Public } from '../common/decorators/public.decorator';\nimport { CurrentUser } from '../auth/current-user.decorator';\nimport { TimelinesService } from '../timelines/timelines.service';\nimport { PropertyResponseDto } from '../timelines/dto/property-response.dto';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Controller('api/v1/spark')\nexport class SparkController {\n  constructor(\n    private readonly sparkService: SparkService,\n    private readonly timelinesService: TimelinesService,\n    private readonly prisma: PrismaService,\n  ) {}\n\n  @Get('test')\n  async testConnection() {\n    return {\n      success: true,\n      message: 'Basic endpoint working',\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Get('test-spark')\n  async testSparkConnection() {\n    const isConnected = await this.sparkService.testConnection();\n    return {\n      success: isConnected,\n      message: isConnected\n        ? 'Spark API connection successful'\n        : 'Spark API connection failed',\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Public()\n  @Get('listings')\n  async getListings(@Query('limit') limit?: string) {\n    const listings = await this.sparkService.getListings(\n      limit ? parseInt(limit) : 10,\n    );\n    return {\n      success: true,\n      data: listings,\n      count: listings.length,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Public()\n  @Get('contacts')\n  async getContacts() {\n    const contacts = await this.sparkService.getContacts();\n    return {\n      success: true,\n      data: contacts,\n      count: contacts.length,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Get('auth/connect')\n  @UseGuards(JwtAuthGuard)\n  async initiateMLSConnection(@CurrentUser() user: any) {\n    const clientId = process.env.SPARK_CLIENT_ID;\n    const redirectUri = `${process.env.API_BASE_URL}/api/v1/spark/auth/callback`;\n    const state = `user_${user.id}_${Date.now()}`;\n\n    if (!clientId || clientId === 'your_spark_client_id') {\n      return {\n        success: false,\n        error:\n          'Spark Platform credentials not configured. Please set SPARK_CLIENT_ID and SPARK_CLIENT_SECRET in your .env file.',\n        message:\n          'To get Spark credentials: 1. Sign up at https://sparkplatform.com/developers/ 2. Create an OAuth app 3. Update your .env file',\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    const authUrl = this.sparkService.generateAuthUrl(\n      clientId,\n      redirectUri,\n      state,\n    );\n\n    return {\n      success: true,\n      authUrl,\n      state,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Get('auth/callback')\n  @Public()\n  @Redirect()\n  async handleOAuthCallback(\n    @Query('code') code: string,\n    @Query('state') state: string,\n    @Query('error') error?: string,\n  ) {\n    const frontendUrl = process.env.WEB_BASE_URL || 'http://localhost:3000';\n\n    if (error) {\n      // Redirect to frontend with error\n      return {\n        url: `${frontendUrl}/dashboard?mls_error=${encodeURIComponent(error)}`,\n      };\n    }\n\n    if (!code || !state) {\n      return {\n        url: `${frontendUrl}/dashboard?mls_error=${encodeURIComponent('Missing authorization code')}`,\n      };\n    }\n\n    try {\n      // Extract userId from state (format: user_<userId>_<timestamp>)\n      const stateMatch = state.match(/^user_([^_]+)_\\d+$/);\n      if (!stateMatch) {\n        throw new Error('Invalid state parameter');\n      }\n      const userId = stateMatch[1];\n\n      const clientId = process.env.SPARK_CLIENT_ID;\n      const clientSecret = process.env.SPARK_CLIENT_SECRET;\n      const redirectUri = `${process.env.API_BASE_URL}/api/v1/spark/auth/callback`;\n\n      if (!clientId || !clientSecret) {\n        throw new Error('Spark OAuth credentials not configured');\n      }\n\n      // Exchange code for tokens\n      const tokenData = await this.sparkService.exchangeCodeForToken(\n        code,\n        clientId,\n        clientSecret,\n        redirectUri,\n      );\n\n      // Calculate token expiry\n      const expiresAt = new Date(Date.now() + tokenData.expires_in * 1000);\n\n      // Store tokens securely in database (NEVER expose to browser)\n      await this.prisma.mLSConnection.upsert({\n        where: { userId },\n        create: {\n          userId,\n          mlsName: 'Spark Platform',\n          mlsRegion: 'General',\n          sparkUserId: tokenData.user_id || null,\n          accessToken: tokenData.access_token,\n          refreshToken: tokenData.refresh_token,\n          tokenExpiry: expiresAt,\n          isActive: true,\n          syncStatus: 'success',\n          connectionData: {\n            connectedAt: new Date().toISOString(),\n            scope: tokenData.scope,\n            tokenType: tokenData.token_type,\n          },\n        },\n        update: {\n          accessToken: tokenData.access_token,\n          refreshToken: tokenData.refresh_token,\n          tokenExpiry: expiresAt,\n          isActive: true,\n          syncStatus: 'success',\n          lastSync: new Date(),\n          connectionData: {\n            reconnectedAt: new Date().toISOString(),\n            scope: tokenData.scope,\n            tokenType: tokenData.token_type,\n          },\n        },\n      });\n\n      // Redirect to frontend with success message (NO TOKENS IN URL)\n      return {\n        url: `${frontendUrl}/dashboard?mls_success=true`,\n      };\n    } catch (error) {\n      // Redirect to frontend with error\n      return {\n        url: `${frontendUrl}/dashboard?mls_error=${encodeURIComponent(error.message)}`,\n      };\n    }\n  }\n\n  @Get('connection/status')\n  @UseGuards(JwtAuthGuard)\n  async getConnectionStatus(@CurrentUser() user: any) {\n    try {\n      const connection = await this.prisma.mLSConnection.findUnique({\n        where: { userId: user.id },\n      });\n\n      if (!connection) {\n        return {\n          success: true,\n          connected: false,\n          mlsName: null,\n          mlsRegion: null,\n          lastSync: null,\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      // Check if token is still valid\n      const isTokenExpired =\n        connection.tokenExpiry && connection.tokenExpiry < new Date();\n\n      return {\n        success: true,\n        connected: connection.isActive && !isTokenExpired,\n        mlsName: connection.mlsName,\n        mlsRegion: connection.mlsRegion,\n        lastSync: connection.lastSync,\n        syncStatus: connection.syncStatus,\n        tokenExpired: isTokenExpired,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  @Public()\n  @Get('test-integration')\n  async testPropertyIntegration(@Query('limit') limit?: string) {\n    const convertedProperties =\n      await this.sparkService.syncPropertiesToTimeline(\n        'test-timeline',\n        limit ? parseInt(limit) : 2,\n      );\n\n    return {\n      success: true,\n      message: 'Spark properties converted to PropertySync timeline format',\n      data: convertedProperties,\n      count: convertedProperties.length,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Post('sync-to-timeline')\n  @UseGuards(JwtAuthGuard)\n  async syncSparkPropertiesToTimeline(\n    @CurrentUser() user: any,\n    @Body() body: { timelineId: string; limit?: number; sparkToken?: string },\n  ) {\n    try {\n      // Get converted Spark properties\n      const convertedProperties =\n        await this.sparkService.syncPropertiesToTimeline(\n          body.timelineId,\n          body.limit || 5,\n          body.sparkToken,\n        );\n\n      // Add each property to the timeline using the existing service\n      const addedProperties: PropertyResponseDto[] = [];\n      for (const propertyData of convertedProperties) {\n        try {\n          const addedProperty =\n            await this.timelinesService.addPropertyToTimeline(\n              user.id,\n              body.timelineId,\n              propertyData,\n            );\n          addedProperties.push(addedProperty);\n        } catch (error) {\n          // Continue with next property if one fails\n          console.warn(\n            `Failed to add property ${propertyData.address}:`,\n            error.message,\n          );\n        }\n      }\n\n      return {\n        success: true,\n        message: `Successfully synced ${addedProperties.length} properties from Spark API to timeline`,\n        data: {\n          timelineId: body.timelineId,\n          addedProperties,\n          totalAttempted: convertedProperties.length,\n          totalAdded: addedProperties.length,\n        },\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\spark\\spark.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\spark\\spark.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":35,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":36,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":36,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":39,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":40,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":52,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":65,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":75,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":130,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":165,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":174,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":174,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .StandardFields on an `any` value.","line":174,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .StreetNumber on an `any` value.","line":178,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .StreetName on an `any` value.","line":179,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .StreetSuffix on an `any` value.","line":180,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .StreetDirSuffix on an `any` value.","line":181,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":187,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":187,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .UnparsedFirstLineAddress on an `any` value.","line":187,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":188,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":188,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .City on an `any` value.","line":188,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":189,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":189,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .StateOrProvince on an `any` value.","line":189,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":190,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":190,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .PostalCode on an `any` value.","line":190,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":191,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ListPrice on an `any` value.","line":191,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":194,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":194,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .BedsTotal on an `any` value.","line":194,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":195,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":195,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .BathsTotal on an `any` value.","line":195,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":196,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":196,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .BuildingAreaTotal on an `any` value.","line":196,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":197,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":197,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .PropertyType on an `any` value.","line":197,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":200,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":202,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .PublicRemarks on an `any` value.","line":201,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .BedsTotal on an `any` value.","line":202,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .BathsTotal on an `any` value.","line":202,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .City on an `any` value.","line":202,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Id on an `any` value.","line":203,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":206,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":206,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ListingId on an `any` value.","line":206,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":207,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ListingNumber on an `any` value.","line":207,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":208,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":208,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .MlsStatus on an `any` value.","line":208,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":209,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":209,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .YearBuilt on an `any` value.","line":209,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":209,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":212,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":212,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ListAgentName on an `any` value.","line":212,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":213,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":213,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ListOfficeName on an `any` value.","line":213,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":216,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":216,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .OriginalEntryTimestamp on an `any` value.","line":216,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":217,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":217,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ModificationTimestamp on an `any` value.","line":217,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":228,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":228,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Id on an `any` value.","line":228,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":229,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":229,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ResourceUri on an `any` value.","line":229,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":244,"column":9,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":244,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":250,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":77}],"suppressedMessages":[],"errorCount":61,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SparkListingDto, SparkApiResponse } from './dto/spark-listing.dto';\n\n@Injectable()\nexport class SparkService {\n  private readonly logger = new Logger(SparkService.name);\n  private readonly baseUrl = 'https://sparkapi.com/v1';\n  private readonly demoToken = '638ls189dg6fs7ojyj9nkm5py';\n\n  constructor(private configService: ConfigService) {}\n\n  private async makeSparkRequest<T>(\n    endpoint: string,\n    token?: string,\n  ): Promise<SparkApiResponse<T>> {\n    const url = `${this.baseUrl}${endpoint}`;\n    const accessToken = token || this.demoToken;\n\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `OAuth ${accessToken}`,\n          'X-SparkApi-User-Agent': 'PropertySync/1.0',\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Spark API error: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      this.logger.error(\n        `Spark API request failed: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      const response =\n        await this.makeSparkRequest<SparkListingDto>('/listings?_limit=1');\n      return response.D.Success;\n    } catch (error) {\n      this.logger.error('Spark API connection test failed', error.stack);\n      return false;\n    }\n  }\n\n  async getListings(limit = 10, token?: string): Promise<SparkListingDto[]> {\n    try {\n      const response = await this.makeSparkRequest<SparkListingDto>(\n        `/listings?_limit=${limit}`,\n        token,\n      );\n      return response.D.Results;\n    } catch (error) {\n      this.logger.error('Failed to fetch listings from Spark API', error.stack);\n      throw error;\n    }\n  }\n\n  async getContacts(token?: string): Promise<any[]> {\n    try {\n      const response = await this.makeSparkRequest<any>('/contacts', token);\n      return response.D.Results;\n    } catch (error) {\n      this.logger.error('Failed to fetch contacts from Spark API', error.stack);\n      throw error;\n    }\n  }\n\n  // OAuth/OpenID Connect methods\n  generateAuthUrl(\n    clientId: string,\n    redirectUri: string,\n    state: string,\n  ): string {\n    const authBaseUrl = 'https://sparkapi.com/v1/oauth2';\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      state: state,\n      scope: 'openid profile api-1',\n    });\n\n    return `${authBaseUrl}?${params.toString()}`;\n  }\n\n  async exchangeCodeForToken(\n    code: string,\n    clientId: string,\n    clientSecret: string,\n    redirectUri: string,\n  ): Promise<any> {\n    const tokenUrl = 'https://sparkapi.com/v1/oauth2/token';\n\n    try {\n      const response = await fetch(tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'X-SparkApi-User-Agent': 'PropertySync/1.0',\n        },\n        body: new URLSearchParams({\n          grant_type: 'authorization_code',\n          code,\n          client_id: clientId,\n          client_secret: clientSecret,\n          redirect_uri: redirectUri,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Token exchange failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Failed to exchange code for token', error.stack);\n      throw error;\n    }\n  }\n\n  async refreshAccessToken(\n    refreshToken: string,\n    clientId: string,\n    clientSecret: string,\n  ): Promise<any> {\n    const tokenUrl = 'https://sparkapi.com/v1/oauth2/token';\n\n    try {\n      const response = await fetch(tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'X-SparkApi-User-Agent': 'PropertySync/1.0',\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken,\n          client_id: clientId,\n          client_secret: clientSecret,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Token refresh failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Failed to refresh access token', error.stack);\n      throw error;\n    }\n  }\n\n  /**\n   * Convert Spark API property data to PropertySync timeline format\n   */\n  convertSparkPropertyToTimelineFormat(sparkProperty: any): any {\n    const standardFields = sparkProperty.StandardFields;\n\n    // Build address string\n    const addressParts = [\n      standardFields.StreetNumber,\n      standardFields.StreetName,\n      standardFields.StreetSuffix,\n      standardFields.StreetDirSuffix,\n    ].filter(Boolean);\n    const streetAddress = addressParts.join(' ');\n\n    return {\n      // Core property data\n      address: streetAddress || standardFields.UnparsedFirstLineAddress,\n      city: standardFields.City,\n      state: standardFields.StateOrProvince,\n      zipCode: standardFields.PostalCode,\n      price: standardFields.ListPrice,\n\n      // Property details\n      bedrooms: standardFields.BedsTotal,\n      bathrooms: standardFields.BathsTotal,\n      squareFootage: standardFields.BuildingAreaTotal,\n      propertyType: standardFields.PropertyType,\n\n      // Additional info\n      description:\n        standardFields.PublicRemarks ||\n        `${standardFields.BedsTotal}BR/${standardFields.BathsTotal}BA home in ${standardFields.City}`,\n      listingUrl: `https://sparkapi.com/listing/${sparkProperty.Id}`,\n\n      // MLS specific data\n      mlsId: standardFields.ListingId,\n      mlsNumber: standardFields.ListingNumber,\n      mlsStatus: standardFields.MlsStatus,\n      yearBuilt: standardFields.YearBuilt,\n\n      // Agent information\n      listingAgent: standardFields.ListAgentName,\n      listingOffice: standardFields.ListOfficeName,\n\n      // Dates\n      listDate: standardFields.OriginalEntryTimestamp,\n      modifiedDate: standardFields.ModificationTimestamp,\n\n      // Default values for PropertySync system\n      imageUrl: '/api/placeholder/400/300', // Default placeholder\n      imageUrls: ['/api/placeholder/400/300'],\n      isHighlighted: false,\n      isViewed: false,\n      loadingProgress: 100,\n      isFullyParsed: true,\n\n      // Spark API specific\n      sparkId: sparkProperty.Id,\n      resourceUri: sparkProperty.ResourceUri,\n    };\n  }\n\n  /**\n   * Sync Spark properties to a PropertySync timeline\n   */\n  async syncPropertiesToTimeline(\n    timelineId: string,\n    limit = 10,\n    token?: string,\n  ): Promise<any[]> {\n    try {\n      const sparkProperties = await this.getListings(limit, token);\n      const convertedProperties = sparkProperties.map((property) =>\n        this.convertSparkPropertyToTimelineFormat(property),\n      );\n\n      // Return the converted properties for integration with timeline service\n      return convertedProperties;\n    } catch (error) {\n      this.logger.error('Failed to sync properties to timeline', error.stack);\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\timelines\\dto\\create-property.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\timelines\\dto\\property-feedback.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\timelines\\dto\\property-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\timelines\\dto\\update-timeline.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\timelines\\timelines.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NotFoundException' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":40,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":42,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":42,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":68,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":68,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":70,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":70,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":87,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":88,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":89,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":89,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":96,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":96,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":107,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":107,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":107,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":108,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":108,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":126,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":126,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":126,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":128,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":128,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":138,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":138,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":138,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":139,"column":46,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":139,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":146,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":146,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":146,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":147,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":147,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":154,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":154,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":154,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":155,"column":51,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":155,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":218,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":218,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":218,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":220,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":220,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":234,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":234,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":234,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":234,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":236,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":236,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":249,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":249,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":249,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":250,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":250,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":261,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":261,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":261,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":263,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":263,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":276,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":276,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":276,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":277,"column":56,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":277,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":292,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":292,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":292,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":294,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":294,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":308,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":308,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":308,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":308,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":310,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":310,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":323,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":323,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":323,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":324,"column":55,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":324,"endColumn":62}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Delete,\n  Body,\n  Param,\n  Query,\n  UseGuards,\n  Request,\n  NotFoundException,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Public } from '../common/decorators/public.decorator';\nimport { TimelinesService } from './timelines.service';\nimport { PropertyFeedbackDto } from './dto/property-feedback.dto';\n\n@Controller('api/v1/timelines')\nexport class TimelinesController {\n  constructor(private readonly timelinesService: TimelinesService) {}\n\n  // CRITICAL FIX: Move all specific routes BEFORE parameterized routes\n\n  // Check MLS duplicate - MOVED TO TOP\n  @UseGuards(JwtAuthGuard)\n  @Get('check-duplicate')\n  async checkMLSDuplicate(\n    @Request() req,\n    @Query('clientId') clientId: string,\n    @Query('mlsLink') mlsLink: string,\n  ) {\n    if (!clientId || !mlsLink) {\n      return {\n        error: 'Missing clientId or mlsLink parameter',\n      };\n    }\n\n    try {\n      const agentId = req.user.id;\n      const isDuplicate = await this.timelinesService.checkMLSDuplicate(\n        agentId,\n        clientId,\n        mlsLink,\n      );\n      return { isDuplicate };\n    } catch (error) {\n      console.error('MLS duplicate check error:', error);\n      return {\n        error: 'Failed to check for duplicates',\n      };\n    }\n  }\n\n  // Create batch and parse MLS URLs\n  @UseGuards(JwtAuthGuard)\n  // NEW: Instant batch creation - properties appear immediately\n  @Post('batch/create-instant')\n  async createInstantBatch(\n    @Request() req,\n    @Body()\n    batchData: {\n      clientId: string;\n      timelineId: string;\n      mlsUrls: string[];\n    },\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.createInstantBatch(\n      agentId,\n      batchData.clientId,\n      batchData.timelineId,\n      batchData.mlsUrls,\n    );\n  }\n\n  @Post('batch/create-and-parse')\n  async createAndParseBatch(\n    @Request() req,\n    @Body()\n    batchData: {\n      clientId: string;\n      timelineId: string;\n      mlsUrls: string[];\n    },\n  ) {\n    console.log('req.user:', req.user);\n    console.log('req.user.id:', req.user?.id);\n    const agentId = req.user?.id;\n\n    if (!agentId) {\n      throw new Error('User ID not found in request');\n    }\n\n    return this.timelinesService.createAndParseBatch(\n      agentId,\n      batchData.clientId,\n      batchData.timelineId,\n      batchData.mlsUrls,\n    );\n  }\n\n  // Get batch status\n  @UseGuards(JwtAuthGuard)\n  @Get('batch/:batchId/status')\n  async getBatchStatus(@Request() req, @Param('batchId') batchId: string) {\n    const agentId = req.user.id;\n    return this.timelinesService.getBatchStatus(agentId, batchId);\n  }\n\n  // Import selected properties from batch\n  @UseGuards(JwtAuthGuard)\n  @Post('batch/:batchId/import')\n  async importBatchProperties(\n    @Request() req,\n    @Param('batchId') batchId: string,\n    @Body()\n    importData: {\n      properties: {\n        batchPropertyId: string;\n        customDescription?: string;\n        agentNotes?: string;\n      }[];\n    },\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.importBatchProperties(\n      agentId,\n      batchId,\n      importData.properties,\n    );\n  }\n\n  // Delete batch\n  @UseGuards(JwtAuthGuard)\n  @Delete('batch/:batchId')\n  async deleteBatch(@Request() req, @Param('batchId') batchId: string) {\n    const agentId = req.user.id;\n    return this.timelinesService.deleteBatch(agentId, batchId);\n  }\n\n  // Get agent's batches\n  @UseGuards(JwtAuthGuard)\n  @Get('batches')\n  async getAgentBatches(@Request() req) {\n    const agentId = req.user.id;\n    return this.timelinesService.getAgentBatches(agentId);\n  }\n\n  // Get agent timeline for specific client - MOVED UP\n  @UseGuards(JwtAuthGuard)\n  @Get('agent/:clientId')\n  async getAgentTimeline(@Request() req, @Param('clientId') clientId: string) {\n    const agentId = req.user.id;\n    return this.timelinesService.getAgentTimeline(agentId, clientId);\n  }\n\n  // NOW the parameterized routes that can catch anything:\n\n  // Get timeline by share token (for clients)\n  @Public()\n  @Get(':shareToken')\n  async getTimelineByShareToken(\n    @Param('shareToken') shareToken: string,\n    @Query('client') clientCode?: string,\n  ) {\n    return this.timelinesService.getTimelineByShareToken(\n      shareToken,\n      clientCode,\n    );\n  }\n\n  // Validate client access\n  @Public()\n  @Get(':shareToken/validate-client')\n  async validateClientAccess(\n    @Param('shareToken') shareToken: string,\n    @Query('client') clientCode: string,\n  ) {\n    return this.timelinesService.validateClientAccess(shareToken, clientCode);\n  }\n\n  // Get client notifications (public)\n  @Public()\n  @Get(':shareToken/notifications')\n  async getClientNotifications(\n    @Param('shareToken') shareToken: string,\n    @Query('client') clientCode?: string,\n  ) {\n    return this.timelinesService.getClientNotifications(shareToken, clientCode);\n  }\n\n  // Submit property feedback (public)\n  @Public()\n  @Post(':shareToken/properties/:propertyId/feedback')\n  async submitPropertyFeedback(\n    @Param('shareToken') shareToken: string,\n    @Param('propertyId') propertyId: string,\n    @Body() feedbackDto: PropertyFeedbackDto,\n    @Query('client') clientCode?: string,\n  ) {\n    return this.timelinesService.submitPropertyFeedback(\n      shareToken,\n      propertyId,\n      feedbackDto,\n      clientCode,\n    );\n  }\n\n  // Add property to timeline\n  @UseGuards(JwtAuthGuard)\n  @Post(':timelineId/properties')\n  async addProperty(\n    @Request() req,\n    @Param('timelineId') timelineId: string,\n    @Body() propertyData: any,\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.addPropertyToTimeline(\n      agentId,\n      timelineId,\n      propertyData,\n    );\n  }\n\n  // Update property\n  @UseGuards(JwtAuthGuard)\n  @Patch('properties/:propertyId')\n  async updateProperty(\n    @Request() req,\n    @Param('propertyId') propertyId: string,\n    @Body() updateData: any,\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.updateProperty(\n      agentId,\n      propertyId,\n      updateData,\n    );\n  }\n\n  // Delete property\n  @UseGuards(JwtAuthGuard)\n  @Delete('properties/:propertyId')\n  async deleteProperty(\n    @Request() req,\n    @Param('propertyId') propertyId: string,\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.deleteProperty(agentId, propertyId);\n  }\n\n  // Delete specific photo from property\n  @UseGuards(JwtAuthGuard)\n  @Delete('properties/:propertyId/photos')\n  async deletePropertyPhoto(\n    @Request() req,\n    @Param('propertyId') propertyId: string,\n    @Body() deleteData: { photoUrl: string },\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.deletePropertyPhoto(\n      agentId,\n      propertyId,\n      deleteData.photoUrl,\n    );\n  }\n\n  // Get email state\n  @UseGuards(JwtAuthGuard)\n  @Get(':timelineId/email-state')\n  async getTimelineEmailState(\n    @Request() req,\n    @Param('timelineId') timelineId: string,\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.getTimelineEmailState(agentId, timelineId);\n  }\n\n  // Send timeline email\n  @UseGuards(JwtAuthGuard)\n  @Post(':timelineId/send-email')\n  async sendTimelineEmail(\n    @Request() req,\n    @Param('timelineId') timelineId: string,\n    @Body()\n    emailOptions?: {\n      templateStyle?: 'modern' | 'classical';\n      emailType?: 'initial' | 'reminder';\n    },\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.sendTimelineEmail(\n      agentId,\n      timelineId,\n      emailOptions,\n    );\n  }\n\n  // Send property notification\n  @UseGuards(JwtAuthGuard)\n  @Post(':timelineId/send-property-notification')\n  async sendPropertyNotification(\n    @Request() req,\n    @Param('timelineId') timelineId: string,\n    @Body() notificationData: { propertyId: string },\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.sendPropertyNotification(\n      agentId,\n      timelineId,\n      notificationData.propertyId,\n    );\n  }\n\n  // Revoke timeline access\n  @UseGuards(JwtAuthGuard)\n  @Post(':timelineId/revoke-access')\n  async revokeTimelineAccess(\n    @Request() req,\n    @Param('timelineId') timelineId: string,\n  ) {\n    const agentId = req.user.id;\n    return this.timelinesService.revokeTimelineAccess(agentId, timelineId);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\timelines\\timelines.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\timelines\\timelines.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":100,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":205,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":205,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":205,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":206,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":206,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .price on an `any` value.","line":206,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":207,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":207,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .imageUrl on an `any` value.","line":208,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":209,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":209,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mlsLink on an `any` value.","line":209,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":209,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":229,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":236,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversationId on an `any` value.","line":246,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":273,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":273,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":333,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":333,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":338,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":338,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updatedProperty' is assigned a value but never used.","line":344,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":344,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":573,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":573,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":573,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":573,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":577,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":577,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":839,"column":9,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":839,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":839,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":839,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":860,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":860,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":860,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":860,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":910,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":910,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":941,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":941,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":941,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":941,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":942,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":942,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pricing on an `any` value.","line":942,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":942,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":943,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":943,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pricing on an `any` value.","line":943,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":943,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":944,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":944,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":944,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":944,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":945,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":945,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":945,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":945,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":946,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":946,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyDetails on an `any` value.","line":946,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":946,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":947,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":947,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .images on an `any` value.","line":947,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":947,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":948,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":950,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":948,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":950,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":948,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":949,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .images on an `any` value.","line":948,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":948,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":950,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":950,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":950,"column":34,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":950,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .url on an `any` value.","line":950,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":950,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":995,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":995,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":1007,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1007,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1016,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1016,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":1016,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1016,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1018,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":1018,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":1018,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1018,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":1019,"column":7,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":1019,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":1019,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1019,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1023,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":1023,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .shareToken on an `any` value.","line":1023,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1023,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1028,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1028,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":1028,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1028,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":1030,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1030,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":1030,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1030,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `any` value.","line":1032,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1032,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `any` value.","line":1032,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1032,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1036,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1036,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .client on an `any` value.","line":1036,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1036,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `string[]`.","line":1037,"column":7,"nodeType":"Property","messageId":"unsafeAssignment","endLine":1037,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":1037,"column":56,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":1037,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":1037,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1037,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .address on an `any` value.","line":1094,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1094,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .city on an `any` value.","line":1095,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1095,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .state on an `any` value.","line":1096,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1096,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .zipCode on an `any` value.","line":1097,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1097,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1101,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1104,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .imageUrls on an `any` value.","line":1102,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1102,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .imageUrls on an `any` value.","line":1102,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1102,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .imageUrls on an `any` value.","line":1103,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1103,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .imageUrl on an `any` value.","line":1104,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1104,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1106,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1109,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .feedback on an `any` value.","line":1107,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1107,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .feedback on an `any` value.","line":1107,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1107,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .feedback on an `any` value.","line":1108,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1108,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1111,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1114,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversations on an `any` value.","line":1112,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1112,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversations on an `any` value.","line":1112,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1112,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .conversations on an `any` value.","line":1113,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1113,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1117,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1117,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1117,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1117,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1120,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1120,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .price on an `any` value.","line":1120,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1120,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1121,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1121,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":1121,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1121,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1122,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1122,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1123,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1123,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .listingUrl on an `any` value.","line":1123,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1123,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1124,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1124,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1124,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1124,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":1124,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1124,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1125,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1125,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .feedback on an `any` value.","line":1125,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1125,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1126,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1126,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `any` value.","line":1126,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1126,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1128,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1128,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .city on an `any` value.","line":1128,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1128,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1129,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1129,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .state on an `any` value.","line":1129,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1129,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1130,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1130,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .zipCode on an `any` value.","line":1130,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1130,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1131,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1131,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .bedrooms on an `any` value.","line":1131,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1131,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1132,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1132,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .bathrooms on an `any` value.","line":1132,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1132,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1133,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1133,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .squareFootage on an `any` value.","line":1133,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1133,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1134,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1134,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .propertyType on an `any` value.","line":1134,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1134,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1135,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1135,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .imageUrls on an `any` value.","line":1135,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1135,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1136,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1136,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .listingUrl on an `any` value.","line":1136,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1136,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1137,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1137,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isHighlighted on an `any` value.","line":1137,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1137,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1138,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1138,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .position on an `any` value.","line":1138,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1138,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1139,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1139,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isViewed on an `any` value.","line":1139,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1139,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1140,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1140,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1140,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1140,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .viewedAt on an `any` value.","line":1140,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1140,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1141,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1141,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1141,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1141,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":1141,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1141,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1142,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1142,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .loadingProgress on an `any` value.","line":1142,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1142,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isFullyParsed on an `any` value.","line":1143,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1143,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1144,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1144,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1144,"column":18,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1144,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updatedAt on an `any` value.","line":1144,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1144,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1147,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":1147,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1147,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1147,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1148,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":1148,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .feedback on an `any` value.","line":1148,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1148,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1149,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":1149,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `any` value.","line":1149,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1149,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1150,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":1150,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1150,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1150,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":1150,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1153,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":1153,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1153,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1153,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1209,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1209,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":1216,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":1216,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1216,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1216,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1216,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1216,"endColumn":41},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1216,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1216,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .randomBytes on an `any` value.","line":1216,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1216,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toString on an `any` value.","line":1216,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1216,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clientCode' is defined but never used.","line":1220,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":1220,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":1300,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":1300,"endColumn":26}],"suppressedMessages":[],"errorCount":152,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { EmailService } from '../email/email.service';\nimport { MLSParserService } from '../mls-parser/mls-parser.service';\nimport { BatchManagementService } from '../mls-parser/batch-management.service';\nimport { UsersService } from '../users/users.service';\nimport { AppConfigService } from '../config/app.config';\nimport { PropertyResponseDto } from './dto/property-response.dto';\nimport { PropertyFeedbackDto } from './dto/property-feedback.dto';\nimport { MessagingService } from '../messaging/messaging.service';\n\n@Injectable()\nexport class TimelinesService {\n  constructor(\n    private prisma: PrismaService,\n    private emailService: EmailService,\n    private mlsParser: MLSParserService,\n    private batchService: BatchManagementService,\n    private usersService: UsersService,\n    private appConfig: AppConfigService,\n    private messagingService: MessagingService,\n  ) {}\n\n  // Keep all existing methods unchanged until sendTimelineEmail\n  async getTimelineByShareToken(shareToken: string, clientCode?: string) {\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: {\n        client: true,\n        agent: {\n          include: { profile: true },\n        },\n        properties: {\n          orderBy: { position: 'asc' },\n          include: {\n            feedback: {\n              orderBy: { createdAt: 'desc' },\n              take: 1,\n            },\n            conversations: {\n              take: 1,\n              orderBy: { createdAt: 'desc' },\n            },\n          },\n        },\n      },\n    });\n\n    if (!timeline || !timeline.isActive) {\n      throw new NotFoundException('Timeline not found or inactive');\n    }\n\n    if (clientCode) {\n      const expectedClientCode = this.generateClientLoginCode(\n        timeline.client.firstName,\n        timeline.client.phone || undefined,\n      );\n\n      if (clientCode.toLowerCase() !== expectedClientCode.toLowerCase()) {\n        throw new UnauthorizedException('Invalid client access code');\n      }\n\n      await this.trackTimelineView(timeline.id);\n    }\n\n    return {\n      id: timeline.id,\n      title: timeline.title,\n      description: timeline.description,\n      shareToken: timeline.shareToken,\n      isPublic: timeline.isActive,\n      totalViews: timeline.totalViews,\n      lastViewed: timeline.lastViewed?.toISOString(),\n      createdAt: timeline.createdAt.toISOString(),\n      updatedAt: timeline.updatedAt.toISOString(),\n\n      client: {\n        id: timeline.client.id,\n        firstName: timeline.client.firstName,\n        lastName: timeline.client.lastName,\n        name: `${timeline.client.firstName} ${timeline.client.lastName}`.trim(),\n      },\n\n      agent: {\n        firstName: timeline.agent.profile?.firstName,\n        lastName: timeline.agent.profile?.lastName,\n        company: timeline.agent.profile?.company,\n        brandColor: timeline.agent.profile?.brandColor,\n        avatar: timeline.agent.profile?.avatar,\n        yearsExperience: timeline.agent.profile?.yearsExperience,\n        specialties: timeline.agent.profile?.specialties\n          ? typeof timeline.agent.profile.specialties === 'string'\n            ? JSON.parse(timeline.agent.profile.specialties)\n            : timeline.agent.profile.specialties\n          : [],\n        bio: timeline.agent.profile?.bio,\n        license: timeline.agent.profile?.licenseNumber,\n        website: timeline.agent.profile?.website,\n      },\n\n      properties: timeline.properties.map((property) =>\n        this.formatPropertyResponse(property, timeline.client.id),\n      ),\n    };\n  }\n\n  async validateClientAccess(shareToken: string, clientCode: string) {\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: { client: true },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    const expectedClientCode = this.generateClientLoginCode(\n      timeline.client.firstName,\n      timeline.client.phone || undefined,\n    );\n\n    const isValid =\n      clientCode.toLowerCase() === expectedClientCode.toLowerCase();\n\n    return {\n      valid: isValid,\n      clientName: isValid\n        ? `${timeline.client.firstName} ${timeline.client.lastName}`\n        : null,\n    };\n  }\n\n  async getAgentTimeline(agentId: string, clientId: string) {\n    const timeline = await this.prisma.timeline.findFirst({\n      where: {\n        agentId,\n        clientId,\n        isActive: true,\n      },\n      include: {\n        properties: {\n          orderBy: { position: 'asc' },\n          include: {\n            feedback: {\n              orderBy: { createdAt: 'desc' },\n              take: 1,\n            },\n          },\n        },\n      },\n    });\n\n    if (!timeline) {\n      return {\n        id: null,\n        clientId,\n        properties: [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        shareToken: null,\n        isPublic: false,\n      };\n    }\n\n    return {\n      id: timeline.id,\n      clientId: timeline.clientId,\n      properties: timeline.properties.map((property) =>\n        this.formatPropertyResponse(property, clientId),\n      ),\n      createdAt: timeline.createdAt.toISOString(),\n      updatedAt: timeline.updatedAt.toISOString(),\n      shareToken: timeline.shareToken,\n      isPublic: timeline.isActive,\n    };\n  }\n\n  // FIXED: Property creation with corrected notification call\n  async addPropertyToTimeline(\n    agentId: string,\n    timelineId: string,\n    propertyData: any,\n  ) {\n    // Check plan limits before adding property\n    const canAdd = await this.usersService.checkCanAddProperties(agentId, 1);\n    if (!canAdd.canAdd) {\n      throw new BadRequestException(canAdd.reason);\n    }\n\n    const timeline = await this.prisma.timeline.findFirst({\n      where: { id: timelineId, agentId },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    const newProperty = await this.prisma.property.create({\n      data: {\n        address: propertyData.address,\n        price: propertyData.price,\n        description: propertyData.description,\n        imageUrls: JSON.stringify([propertyData.imageUrl]),\n        listingUrl: propertyData.mlsLink || null,\n        timelineId,\n        position: (await this.getLastPropertyPosition(timelineId)) + 1,\n      },\n    });\n\n    // Create conversation for this property automatically\n    let conversationId: string | null = null;\n    try {\n      const conversation = await this.messagingService.createOrGetConversation({\n        agentId,\n        clientId: timeline.clientId,\n        timelineId,\n        propertyId: newProperty.id,\n      });\n      conversationId = conversation.id;\n      console.log(\n        `Created conversation ${conversationId} for property ${newProperty.id}`,\n      );\n    } catch (error) {\n      console.warn('Conversation creation failed:', error.message);\n    }\n\n    // FIXED: Correct method call with proper parameters\n    try {\n      await this.sendPropertyNotification(agentId, timelineId, newProperty.id);\n    } catch (error) {\n      console.warn('Property notification failed:', error.message);\n    }\n\n    const formattedProperty = this.formatPropertyResponse(\n      newProperty,\n      timeline.clientId,\n    );\n\n    // Add conversationId to the response\n    if (conversationId) {\n      (formattedProperty as any).conversationId = conversationId;\n    }\n\n    return formattedProperty;\n  }\n\n  async updateProperty(agentId: string, propertyId: string, updateData: any) {\n    const property = await this.prisma.property.findFirst({\n      where: {\n        id: propertyId,\n        timeline: { agentId },\n      },\n      include: {\n        timeline: true,\n        feedback: {\n          orderBy: { createdAt: 'desc' },\n          take: 1,\n        },\n      },\n    });\n\n    if (!property) {\n      throw new NotFoundException('Property not found');\n    }\n\n    const updatedProperty = await this.prisma.property.update({\n      where: { id: propertyId },\n      data: updateData,\n      include: {\n        feedback: {\n          orderBy: { createdAt: 'desc' },\n          take: 1,\n        },\n      },\n    });\n\n    return this.formatPropertyResponse(\n      updatedProperty,\n      property.timeline.clientId,\n    );\n  }\n\n  async deleteProperty(agentId: string, propertyId: string) {\n    const property = await this.prisma.property.findFirst({\n      where: {\n        id: propertyId,\n        timeline: { agentId },\n      },\n      include: { timeline: true },\n    });\n\n    if (!property) {\n      throw new NotFoundException('Property not found');\n    }\n\n    await this.prisma.property.delete({\n      where: { id: propertyId },\n    });\n\n    return {\n      message: 'Property deleted successfully',\n      propertyId,\n      address: property.address,\n    };\n  }\n\n  async deletePropertyPhoto(\n    agentId: string,\n    propertyId: string,\n    photoUrl: string,\n  ) {\n    // Verify the agent owns this property\n    const property = await this.prisma.property.findFirst({\n      where: {\n        id: propertyId,\n        timeline: { agentId },\n      },\n      include: { timeline: true },\n    });\n\n    if (!property) {\n      throw new NotFoundException('Property not found');\n    }\n\n    // Remove the photo URL from the imageUrls array\n    let currentImages: string[] = [];\n    try {\n      currentImages = property.imageUrls ? JSON.parse(property.imageUrls) : [];\n      // Ensure it's an array\n      if (!Array.isArray(currentImages)) {\n        currentImages = [];\n      }\n    } catch (error) {\n      currentImages = [];\n    }\n    const updatedImages = currentImages.filter((url) => url !== photoUrl);\n\n    // Update the property with the new image array\n    const updatedProperty = await this.prisma.property.update({\n      where: { id: propertyId },\n      data: {\n        imageUrls: JSON.stringify(updatedImages),\n        updatedAt: new Date(),\n      },\n    });\n\n    return {\n      message: 'Photo deleted successfully',\n      propertyId,\n      deletedPhotoUrl: photoUrl,\n      remainingPhotos: updatedImages.length,\n    };\n  }\n\n  async submitPropertyFeedback(\n    shareToken: string,\n    propertyId: string,\n    feedbackDto: PropertyFeedbackDto,\n    clientCode?: string,\n  ) {\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: { client: true },\n    });\n\n    if (!timeline || !timeline.isActive) {\n      throw new NotFoundException('Timeline not found or inactive');\n    }\n\n    if (clientCode) {\n      const expectedClientCode = this.generateClientLoginCode(\n        timeline.client.firstName,\n        timeline.client.phone || undefined,\n      );\n\n      if (clientCode.toLowerCase() !== expectedClientCode.toLowerCase()) {\n        throw new UnauthorizedException('Invalid client access code');\n      }\n    }\n\n    const property = await this.prisma.property.findFirst({\n      where: {\n        id: propertyId,\n        timelineId: timeline.id,\n      },\n    });\n\n    if (!property) {\n      throw new NotFoundException('Property not found in this timeline');\n    }\n\n    const feedback = await this.prisma.feedback.upsert({\n      where: {\n        propertyId_clientId: {\n          propertyId,\n          clientId: timeline.clientId,\n        },\n      },\n      update: {\n        feedback: feedbackDto.feedback,\n        notes: feedbackDto.notes,\n        updatedAt: new Date(),\n      },\n      create: {\n        propertyId,\n        clientId: timeline.clientId,\n        feedback: feedbackDto.feedback,\n        notes: feedbackDto.notes,\n        clientName: `${timeline.client.firstName} ${timeline.client.lastName}`,\n        clientEmail: timeline.client.email,\n      },\n    });\n\n    await this.updateClientEngagement(timeline.clientId, feedbackDto.feedback);\n    await this.trackAnalyticsEvent(timeline.clientId, 'property_feedback', {\n      propertyId,\n      feedback: feedbackDto.feedback,\n      hasNotes: !!feedbackDto.notes,\n    });\n\n    return {\n      message: 'Feedback submitted successfully',\n      feedback: {\n        id: feedback.id,\n        feedback: feedback.feedback,\n        notes: feedback.notes,\n        createdAt: feedback.createdAt.toISOString(),\n      },\n    };\n  }\n\n  // ENHANCED: Send Timeline Email with email type detection and tracking\n  async sendTimelineEmail(\n    agentId: string,\n    timelineId: string,\n    emailOptions?: {\n      templateStyle?: 'modern' | 'classical';\n      emailType?: 'initial' | 'reminder';\n    },\n  ) {\n    const timeline = await this.prisma.timeline.findFirst({\n      where: {\n        id: timelineId,\n        agentId,\n      },\n      include: {\n        client: true,\n        agent: {\n          include: { profile: true },\n        },\n        properties: true,\n      },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    // ENHANCED: Validate properties exist before sending email\n    if (timeline.properties.length === 0) {\n      throw new Error('Cannot send email: Timeline has no properties');\n    }\n\n    // ENHANCED: Determine email type (initial or reminder)\n    const emailType =\n      emailOptions?.emailType ||\n      (timeline.initialEmailSent ? 'reminder' : 'initial');\n    const newPropertyCount =\n      timeline.properties.length - timeline.lastEmailPropertyCount;\n\n    const agentProfile = timeline.agent.profile;\n    const templateStyle: 'modern' | 'classical' =\n      (emailOptions?.templateStyle ||\n        agentProfile?.emailTemplateStyle ||\n        'modern') as 'modern' | 'classical';\n\n    // DEBUG: Log template selection\n    console.log('🎨 Email Template Selection Debug:', {\n      emailOptionsTemplate: emailOptions?.templateStyle,\n      agentProfileTemplate: agentProfile?.emailTemplateStyle,\n      finalTemplate: templateStyle,\n      agentId: agentId,\n      timelineId: timelineId,\n    });\n\n    const clientLoginCode = this.generateClientLoginCode(\n      timeline.client.firstName,\n      timeline.client.phone || undefined,\n    );\n\n    const shareUrl = this.appConfig.getTimelineShareUrl(\n      timeline.shareToken,\n      clientLoginCode,\n    );\n\n    try {\n      // Call EmailService which handles Resend + Nodemailer fallback automatically\n      const emailResult = await this.emailService.sendTimelineEmail({\n        clientEmail: timeline.client.email,\n        clientName:\n          `${timeline.client.firstName} ${timeline.client.lastName}`.trim(),\n        clientPhone: timeline.client.phone || undefined,\n        agentName:\n          `${agentProfile?.firstName || ''} ${agentProfile?.lastName || ''}`.trim() ||\n          'Your Agent',\n        agentCompany: agentProfile?.company || 'Realtor',\n        agentEmail: timeline.agent.email || undefined,\n        agentPhone: timeline.agent.profile?.phone || undefined,\n        timelineUrl: shareUrl,\n        propertyCount: timeline.properties.length,\n        spouseEmail: timeline.client.spouseEmail || undefined,\n        agentPhoto: agentProfile?.logo || undefined,\n        companyLogo: agentProfile?.companyLogo || undefined,\n        brandColor: agentProfile?.brandColor || '#3b82f6',\n        templateStyle: templateStyle,\n        emailType: emailType,\n      });\n\n      // Check final result (after Resend attempt + potential Nodemailer fallback)\n      if (!emailResult.success) {\n        throw new Error(\n          `Failed to send timeline email: ${emailResult.error || 'Unknown error'}`,\n        );\n      }\n\n      // ENHANCED: Update email tracking fields\n      await this.prisma.timeline.update({\n        where: { id: timelineId },\n        data: {\n          initialEmailSent: true,\n          lastEmailSent: new Date(),\n          lastEmailPropertyCount: timeline.properties.length,\n        },\n      });\n\n      // Track successful email send with enhanced analytics\n      await this.trackAnalyticsEvent(timeline.clientId, 'timeline_email_sent', {\n        timelineId,\n        propertyCount: timeline.properties.length,\n        emailType,\n        newPropertyCount:\n          emailType === 'reminder'\n            ? newPropertyCount\n            : timeline.properties.length,\n        hasSpouseEmail: !!timeline.client.spouseEmail,\n        provider: emailResult.provider, // 'resend' or 'nodemailer'\n        templateStyle,\n      });\n\n      return {\n        message: `${emailType === 'initial' ? 'Initial timeline' : 'Reminder'} email sent successfully`,\n        emailType,\n        sentTo: timeline.client.email,\n        spouseSentTo: timeline.client.spouseEmail,\n        propertyCount: timeline.properties.length,\n        newPropertyCount:\n          emailType === 'reminder'\n            ? newPropertyCount\n            : timeline.properties.length,\n        shareUrl,\n        provider: emailResult.provider,\n        messageId: emailResult.messageId,\n      };\n    } catch (error) {\n      console.error('Timeline email send failed:', {\n        timelineId,\n        clientEmail: timeline.client.email,\n        error: error.message,\n      });\n\n      // Re-throw with more context\n      throw new Error(`Timeline email delivery failed: ${error.message}`);\n    }\n  }\n\n  // NEW: Get timeline email state for UI\n  async getTimelineEmailState(agentId: string, timelineId: string) {\n    const timeline = await this.prisma.timeline.findFirst({\n      where: { id: timelineId, agentId },\n      include: {\n        properties: {\n          orderBy: { createdAt: 'desc' },\n          take: 1,\n        },\n      },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    // Get total property count (we need all properties for count, not just the latest)\n    const totalProperties = await this.prisma.property.count({\n      where: { timelineId },\n    });\n\n    const propertyCount = totalProperties;\n    const newPropertyCount = propertyCount - timeline.lastEmailPropertyCount;\n\n    // Get the most recent property addition date\n    const latestProperty = timeline.properties[0];\n    const lastPropertyAddedDate = latestProperty?.createdAt;\n\n    // Enhanced logic: Only suggest email if client hasn't viewed timeline since new properties were added\n    const clientHasSeenNewProperties =\n      timeline.lastViewed &&\n      lastPropertyAddedDate &&\n      timeline.lastViewed >= lastPropertyAddedDate;\n\n    return {\n      canSendInitial: propertyCount > 0 && !timeline.initialEmailSent,\n      canSendReminder:\n        timeline.initialEmailSent &&\n        newPropertyCount > 0 &&\n        !clientHasSeenNewProperties,\n      propertyCount,\n      newPropertyCount,\n      lastEmailDate: timeline.lastEmailSent,\n      lastEmailPropertyCount: timeline.lastEmailPropertyCount,\n      initialEmailSent: timeline.initialEmailSent,\n      lastViewed: timeline.lastViewed,\n      clientHasSeenNewProperties,\n    };\n  }\n\n  // FIXED: Property notification with correct method signature\n  async sendPropertyNotification(\n    agentId: string,\n    timelineId: string,\n    propertyId: string,\n  ) {\n    const timeline = await this.prisma.timeline.findFirst({\n      where: { id: timelineId, agentId },\n      include: {\n        client: true,\n        agent: { include: { profile: true } },\n        properties: { where: { id: propertyId } },\n      },\n    });\n\n    if (!timeline || timeline.properties.length === 0) {\n      throw new NotFoundException('Timeline or property not found');\n    }\n\n    const property = timeline.properties[0];\n    const agentProfile = timeline.agent.profile;\n    const clientLoginCode = this.generateClientLoginCode(\n      timeline.client.firstName,\n      timeline.client.phone || undefined,\n    );\n    const shareUrl = this.appConfig.getTimelineShareUrl(\n      timeline.shareToken,\n      clientLoginCode,\n    );\n\n    const emailResult = await this.emailService.sendPropertyNotification({\n      clientEmail: timeline.client.email,\n      clientName:\n        `${timeline.client.firstName} ${timeline.client.lastName}`.trim(),\n      agentName:\n        `${agentProfile?.firstName || ''} ${agentProfile?.lastName || ''}`.trim() ||\n        'Your Agent',\n      propertyAddress: property.address,\n      propertyPrice: property.price,\n      propertyDescription:\n        property.description || 'New property added to your timeline',\n      propertyImageUrl: property.imageUrls[0] || '/api/placeholder/400/300',\n      timelineUrl: shareUrl,\n      spouseEmail: timeline.client.spouseEmail || undefined,\n    });\n\n    if (!emailResult.success) {\n      throw new Error('Failed to send property notification');\n    }\n\n    return {\n      message: 'Property notification sent successfully',\n      sentTo: timeline.client.email,\n      spouseSentTo: timeline.client.spouseEmail,\n      propertyAddress: property.address,\n      emailProvider: emailResult.provider,\n      messageId: emailResult.messageId,\n    };\n  }\n\n  async revokeTimelineAccess(agentId: string, timelineId: string) {\n    const timeline = await this.prisma.timeline.findFirst({\n      where: {\n        id: timelineId,\n        agentId,\n      },\n    });\n\n    if (!timeline) {\n      throw new NotFoundException('Timeline not found');\n    }\n\n    const newShareToken = await this.prisma.timeline.update({\n      where: { id: timelineId },\n      data: {\n        shareToken: this.generateNewShareToken(),\n      },\n    });\n\n    return {\n      message: 'Timeline access revoked successfully',\n      newShareToken: newShareToken.shareToken,\n    };\n  }\n\n  // Enhanced MLS duplicate checking (replaces your current method)\n  async checkMLSDuplicate(\n    agentId: string,\n    clientId: string,\n    mlsLink: string,\n  ): Promise<boolean> {\n    if (!mlsLink) return false;\n\n    // Check by exact URL match\n    const existingByUrl = await this.prisma.property.findFirst({\n      where: {\n        OR: [\n          { listingUrl: mlsLink.trim() },\n          { originalMlsUrl: mlsLink.trim() },\n        ],\n        timeline: {\n          agentId,\n          clientId,\n          isActive: true,\n        },\n      },\n    });\n\n    if (existingByUrl) return true;\n\n    // Enhanced check: try to parse the URL and check by normalized address\n    try {\n      if (mlsLink.includes('flexmls.com')) {\n        const parseResult = await this.mlsParser.parseSingleMLS(mlsLink);\n\n        if (parseResult.success) {\n          if (parseResult.data) {\n            const duplicateCheck = await this.mlsParser.checkEnhancedDuplicate(\n              agentId,\n              clientId,\n              parseResult.data,\n            );\n            return duplicateCheck.isDuplicate;\n          }\n        }\n      }\n    } catch (error) {\n      console.warn(\n        'Enhanced duplicate check failed, falling back to URL check:',\n        error,\n      );\n    }\n\n    return false;\n  }\n\n  // Create batch and start parsing MLS URLs\n  // NEW: Create instant batch - properties appear immediately, parse in background\n  async createInstantBatch(\n    agentId: string,\n    clientId: string,\n    timelineId: string,\n    mlsUrls: string[],\n  ) {\n    try {\n      let timeline;\n\n      // If no timeline ID provided or empty, find or create one\n      if (!timelineId || timelineId.trim() === '') {\n        timeline = await this.prisma.timeline.findFirst({\n          where: {\n            agentId,\n            clientId,\n            isActive: true,\n          },\n          include: {\n            client: true,\n            agent: { include: { profile: true } },\n          },\n        });\n\n        // Create timeline if none exists\n        if (!timeline) {\n          const client = await this.prisma.client.findFirst({\n            where: { id: clientId, agentId },\n          });\n\n          if (!client) {\n            throw new NotFoundException('Client not found or access denied');\n          }\n\n          timeline = await this.prisma.timeline.create({\n            data: {\n              agentId,\n              clientId,\n              title: `Properties for ${client.firstName} ${client.lastName}`,\n              description: 'Property timeline created automatically',\n              isActive: true,\n              shareToken: this.generateNewShareToken(),\n            },\n            include: {\n              client: true,\n              agent: { include: { profile: true } },\n            },\n          });\n        }\n      } else {\n        // Validate provided timeline belongs to agent\n        timeline = await this.prisma.timeline.findFirst({\n          where: {\n            id: timelineId,\n            client: { agentId },\n          },\n          include: {\n            client: true,\n            agent: { include: { profile: true } },\n          },\n        });\n\n        if (!timeline) {\n          throw new NotFoundException('Timeline not found or access denied');\n        }\n      }\n\n      // Create batch\n      const batch = await this.batchService.createPropertyBatch(\n        agentId,\n        clientId,\n        timeline.id,\n      );\n\n      // Add URLs to batch\n      await this.batchService.addMLSUrlsToBatch(batch.id, mlsUrls);\n\n      // Create properties instantly and start background parsing\n      const result = await this.batchService.createInstantBatch(batch.id);\n\n      return {\n        success: true,\n        message: 'Properties created instantly, parsing in background',\n        batchId: batch.id,\n        properties: result.properties,\n        instantCreationCompleted: true,\n        backgroundParsingStarted: true,\n      };\n    } catch (error) {\n      console.error('Instant batch creation error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to create instant batch',\n      };\n    }\n  }\n\n  async createAndParseBatch(\n    agentId: string,\n    clientId: string,\n    timelineId: string,\n    mlsUrls: string[],\n  ) {\n    try {\n      // Validate timeline belongs to agent\n      const timeline = await this.prisma.timeline.findFirst({\n        where: {\n          id: timelineId,\n          agentId,\n          clientId,\n          isActive: true,\n        },\n      });\n\n      if (!timeline) {\n        throw new Error('Timeline not found or access denied');\n      }\n\n      // Create batch\n      const batch = await this.batchService.createPropertyBatch(\n        agentId,\n        clientId,\n        timelineId,\n      );\n\n      // Add URLs to batch\n      await this.batchService.addMLSUrlsToBatch(batch.id, mlsUrls);\n\n      // Start parsing in background\n      this.batchService.parseBatchProperties(batch.id).catch((error) => {\n        console.error(\n          `Background parsing failed for batch ${batch.id}:`,\n          error,\n        );\n      });\n\n      return {\n        batchId: batch.id,\n        message: 'Batch created and parsing started',\n        totalUrls: mlsUrls.length,\n      };\n    } catch (error) {\n      throw new Error(`Failed to create batch: ${error.message}`);\n    }\n  }\n\n  // Get batch status with parsed properties\n  async getBatchStatus(agentId: string, batchId: string) {\n    const batch = await this.prisma.propertyBatch.findFirst({\n      where: {\n        id: batchId,\n        agentId,\n      },\n      include: {\n        batchProperties: {\n          orderBy: { position: 'asc' },\n        },\n      },\n    });\n\n    if (!batch) {\n      throw new Error('Batch not found');\n    }\n\n    // Transform batch properties for frontend\n    const properties = batch.batchProperties.map((bp) => ({\n      id: bp.id,\n      mlsUrl: bp.mlsUrl,\n      parseStatus: bp.parseStatus,\n      parseError: bp.parseError,\n      position: bp.position,\n      parsedData: bp.parsedData\n        ? {\n            address: (bp.parsedData as any).address?.full,\n            price: (bp.parsedData as any).pricing?.listPrice,\n            priceNumeric: (bp.parsedData as any).pricing?.priceNumeric,\n            beds: (bp.parsedData as any).propertyDetails?.beds,\n            baths: (bp.parsedData as any).propertyDetails?.baths,\n            sqft: (bp.parsedData as any).propertyDetails?.sqft,\n            imageCount: (bp.parsedData as any).images?.length || 0,\n            images: (bp.parsedData as any).images\n              ?.slice(0, 3)\n              .map((img: any) => img.url), // First 3 images for preview\n          }\n        : null,\n    }));\n\n    return {\n      id: batch.id,\n      status: batch.status,\n      totalProperties: batch.totalProperties,\n      successCount: batch.successCount,\n      failureCount: batch.failureCount,\n      startedAt: batch.startedAt?.toISOString(),\n      completedAt: batch.completedAt?.toISOString(),\n      properties,\n    };\n  }\n\n  // Import selected properties from batch\n  async importBatchProperties(\n    agentId: string,\n    batchId: string,\n    propertySelections: {\n      batchPropertyId: string;\n      customDescription?: string;\n      agentNotes?: string;\n    }[],\n  ) {\n    try {\n      // Validate batch belongs to agent\n      const batch = await this.prisma.propertyBatch.findFirst({\n        where: { id: batchId, agentId },\n      });\n\n      if (!batch) {\n        throw new Error('Batch not found or access denied');\n      }\n\n      // Import properties\n      const importResults = await this.batchService.importParsedProperties(\n        batchId,\n        propertySelections,\n      );\n\n      // Send email notifications for successfully imported properties\n      const successfulImports = importResults.importResults.filter(\n        (r) => r.success,\n      );\n\n      // NOTE: Automatic email sending has been disabled for batch imports\n      // Agents must manually send emails via \"Share Timeline\" button\n      // This gives agents full control over when and what type of email to send to clients\n\n      return {\n        message: `Successfully imported ${successfulImports.length} properties`,\n        ...importResults,\n      };\n    } catch (error) {\n      throw new Error(`Failed to import properties: ${error.message}`);\n    }\n  }\n\n  // Send notification email for batch import\n  private async sendBatchImportNotification(\n    timeline: any,\n    importedProperties: any[],\n  ) {\n    const agentProfile = timeline.agent.profile;\n    const clientLoginCode = this.generateClientLoginCode(\n      timeline.client.firstName,\n      timeline.client.phone || undefined,\n    );\n\n    const shareUrl = this.appConfig.getTimelineShareUrl(\n      timeline.shareToken,\n      clientLoginCode,\n    );\n\n    const emailResult = await this.emailService.sendBatchImportNotification({\n      clientEmail: timeline.client.email,\n      clientName:\n        `${timeline.client.firstName} ${timeline.client.lastName}`.trim(),\n      agentName:\n        `${agentProfile?.firstName || ''} ${agentProfile?.lastName || ''}`.trim() ||\n        'Your Agent',\n      propertyCount: importedProperties.length,\n      timelineUrl: shareUrl,\n      spouseEmail: timeline.client.spouseEmail || undefined,\n      propertyAddresses: importedProperties.map((p) => p.address).slice(0, 5), // First 5 addresses\n    });\n\n    return emailResult;\n  }\n\n  // Delete batch (cleanup)\n  async deleteBatch(agentId: string, batchId: string) {\n    const batch = await this.prisma.propertyBatch.findFirst({\n      where: { id: batchId, agentId },\n    });\n\n    if (!batch) {\n      throw new Error('Batch not found');\n    }\n\n    await this.prisma.propertyBatch.delete({\n      where: { id: batchId },\n    });\n\n    return { message: 'Batch deleted successfully' };\n  }\n\n  // Get agent's recent batches\n  async getAgentBatches(agentId: string) {\n    const batches = await this.prisma.propertyBatch.findMany({\n      where: { agentId },\n      include: {\n        client: {\n          select: { firstName: true, lastName: true },\n        },\n        _count: {\n          select: { batchProperties: true },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n      take: 10,\n    });\n\n    return batches.map((batch) => ({\n      id: batch.id,\n      status: batch.status,\n      clientName: `${batch.client.firstName} ${batch.client.lastName}`,\n      totalProperties: batch.totalProperties,\n      successCount: batch.successCount,\n      failureCount: batch.failureCount,\n      createdAt: batch.createdAt.toISOString(),\n      completedAt: batch.completedAt?.toISOString(),\n    }));\n  }\n\n  // PRIVATE HELPER METHODS\n  private formatPropertyResponse(\n    property: any,\n    clientId: string,\n  ): PropertyResponseDto {\n    const addressParts = [\n      property.address,\n      property.city,\n      property.state,\n      property.zipCode,\n    ].filter(Boolean);\n    const combinedAddress = addressParts.join(', ');\n\n    const primaryImage =\n      Array.isArray(property.imageUrls) && property.imageUrls.length > 0\n        ? property.imageUrls[0]\n        : property.imageUrl || '/api/placeholder/400/300';\n\n    const latestFeedback =\n      property.feedback && property.feedback.length > 0\n        ? property.feedback[0]\n        : null;\n\n    const latestConversation =\n      property.conversations && property.conversations.length > 0\n        ? property.conversations[0]\n        : null;\n\n    return {\n      id: property.id,\n      clientId: clientId,\n      address: combinedAddress,\n      price: property.price,\n      description: property.description,\n      imageUrl: primaryImage,\n      mlsLink: property.listingUrl || undefined,\n      addedAt: property.createdAt.toISOString(),\n      clientFeedback: latestFeedback?.feedback || undefined,\n      notes: latestFeedback?.notes || undefined,\n      isActive: true,\n      city: property.city || undefined,\n      state: property.state || undefined,\n      zipCode: property.zipCode || undefined,\n      bedrooms: property.bedrooms || undefined,\n      bathrooms: property.bathrooms || undefined,\n      squareFootage: property.squareFootage || undefined,\n      propertyType: property.propertyType || undefined,\n      imageUrls: property.imageUrls || [primaryImage],\n      listingUrl: property.listingUrl || undefined,\n      isHighlighted: property.isHighlighted,\n      position: property.position,\n      isViewed: property.isViewed,\n      viewedAt: property.viewedAt?.toISOString(),\n      createdAt: property.createdAt.toISOString(),\n      loadingProgress: property.loadingProgress || 100,\n      isFullyParsed: property.isFullyParsed !== false,\n      updatedAt: property.updatedAt.toISOString(),\n      feedback: latestFeedback\n        ? {\n            id: latestFeedback.id,\n            feedback: latestFeedback.feedback,\n            notes: latestFeedback.notes || undefined,\n            createdAt: latestFeedback.createdAt.toISOString(),\n          }\n        : undefined,\n      conversationId: latestConversation?.id || undefined,\n    } as PropertyResponseDto;\n  }\n\n  private async trackTimelineView(timelineId: string) {\n    await this.prisma.timeline.update({\n      where: { id: timelineId },\n      data: {\n        totalViews: { increment: 1 },\n        lastViewed: new Date(),\n      },\n    });\n  }\n\n  private generateClientLoginCode(firstName: string, phone?: string): string {\n    const cleanFirstName = firstName.replace(/[^a-zA-Z]/g, '').toLowerCase();\n\n    if (!phone) {\n      const randomDigits = Math.floor(1000 + Math.random() * 9000);\n      return `${cleanFirstName}${randomDigits}`;\n    }\n\n    const digits = phone.replace(/[^\\d]/g, '');\n    const lastFourDigits = digits.slice(-4) || '0000';\n\n    return `${cleanFirstName}${lastFourDigits}`;\n  }\n\n  private async updateClientEngagement(clientId: string, feedback: string) {\n    const engagementPoints = {\n      love: 10,\n      like: 5,\n      dislike: 1,\n    };\n\n    await this.prisma.client.update({\n      where: { id: clientId },\n      data: {\n        lastActivity: new Date(),\n        feedbackRate: {\n          increment:\n            engagementPoints[feedback as keyof typeof engagementPoints] || 0,\n        },\n      },\n    });\n  }\n\n  private async trackAnalyticsEvent(\n    clientId: string,\n    eventType: string,\n    metadata: any,\n  ) {\n    await this.prisma.trackEvent.create({\n      data: {\n        clientId,\n        eventType,\n        metadata,\n        timestamp: new Date(),\n      },\n    });\n  }\n\n  private generateNewShareToken(): string {\n    return require('crypto').randomBytes(16).toString('hex');\n  }\n\n  // Get client notifications for a timeline\n  async getClientNotifications(shareToken: string, clientCode?: string) {\n    // Verify timeline exists\n    const timeline = await this.prisma.timeline.findUnique({\n      where: { shareToken },\n      include: {\n        client: true,\n        agent: {\n          include: {\n            profile: true,\n          },\n        },\n      },\n    });\n\n    if (!timeline || !timeline.isActive) {\n      throw new NotFoundException('Timeline not found or inactive');\n    }\n\n    // Get agent name from profile\n    const agentName = timeline.agent.profile\n      ? `${timeline.agent.profile.firstName} ${timeline.agent.profile.lastName}`\n      : timeline.agent.email;\n\n    // Get properties to check for new/unfeedback properties\n    const properties = await this.prisma.property.findMany({\n      where: { timelineId: timeline.id },\n      include: {\n        feedback: true,\n      },\n      orderBy: { createdAt: 'desc' },\n    });\n\n    // Calculate properties added in last 24 hours without feedback\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    const newPropertiesWithoutFeedback = properties.filter(\n      (property) =>\n        new Date(property.createdAt) > twentyFourHoursAgo &&\n        (!property.feedback || property.feedback.length === 0),\n    );\n\n    const notifications: any[] = [];\n\n    // Only add new properties notification if there are actually new properties without feedback\n    if (newPropertiesWithoutFeedback.length > 0) {\n      // Format property addresses as \"number + first word\" (e.g., \"3215 Autumn\", \"3456 Main\")\n      const formatPropertyAddress = (address: string): string => {\n        const parts = address.trim().split(/\\s+/);\n        if (parts.length >= 2) {\n          return `${parts[0]} ${parts[1]}`;\n        }\n        return parts[0] || address;\n      };\n\n      const propertyAddresses = newPropertiesWithoutFeedback\n        .map((p) => formatPropertyAddress(p.address))\n        .slice(0, 3); // Show max 3 addresses\n\n      // Create client name from timeline.client\n      const clientName =\n        `${timeline.client.firstName} ${timeline.client.lastName}`.trim();\n\n      let message: string;\n      if (newPropertiesWithoutFeedback.length === 1) {\n        message = `New property: ${propertyAddresses[0]} added for ${clientName} by ${agentName}`;\n      } else if (newPropertiesWithoutFeedback.length <= 3) {\n        message = `New properties: ${propertyAddresses.join(', ')} added for ${clientName} by ${agentName}`;\n      } else {\n        const remainingCount = newPropertiesWithoutFeedback.length - 3;\n        message = `New properties: ${propertyAddresses.join(', ')} and ${remainingCount} more added for ${clientName} by ${agentName}`;\n      }\n\n      notifications.push({\n        id: 1,\n        message,\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n        isRead: false,\n        type: 'property',\n      });\n    }\n\n    return notifications;\n  }\n\n  private async getLastPropertyPosition(timelineId: string): Promise<number> {\n    const lastProperty = await this.prisma.property.findFirst({\n      where: { timelineId },\n      orderBy: { position: 'desc' },\n    });\n    return lastProperty?.position || 0;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\dto\\change-password.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\dto\\notification-preferences.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\dto\\update-preferences.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\dto\\update-profile.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsArray' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsUrl' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsBoolean' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidateIf' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":39,"column":30,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":39,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":56,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":56,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":76,"column":30,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":76,"endColumn":75}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  IsOptional,\n  IsString,\n  IsArray,\n  IsNumber,\n  IsObject,\n  IsUrl,\n  IsBoolean,\n  ValidateIf,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class UpdateProfileDto {\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @IsOptional()\n  @IsString()\n  company?: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  website?: string;\n\n  @IsOptional()\n  @IsString()\n  licenseNumber?: string;\n\n  @IsOptional()\n  @Transform(({ value }) => (value === '' || value === null ? null : value))\n  @IsString()\n  avatar?: string;\n\n  @IsOptional()\n  @IsString()\n  bio?: string;\n\n  @IsOptional()\n  @IsString()\n  timezone?: string;\n\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (Array.isArray(value)) {\n      return JSON.stringify(value);\n    }\n    return value;\n  })\n  @IsString()\n  specialties?: string;\n\n  @IsOptional()\n  @IsNumber()\n  yearsExperience?: number;\n\n  @IsOptional()\n  @IsObject()\n  notifications?: {\n    emailNewProperties?: boolean;\n    emailClientFeedback?: boolean;\n    emailWeeklyReport?: boolean;\n    smsUrgentOnly?: boolean;\n    smsClientActivity?: boolean;\n  };\n\n  @IsOptional()\n  @Transform(({ value }) => (value === '' || value === null ? null : value))\n  @IsString()\n  logo?: string;\n\n  @IsOptional()\n  @IsString()\n  brandColor?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\plan-limits.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\users.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":30,"column":41,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":30,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":40,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":40,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":50,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":50,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":57,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":57,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":58,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":58,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":58,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stack on an `any` value.","line":59,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":60,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":60,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":60,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":62,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":62,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":62,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":74,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":74,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":74,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":80,"column":58,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":80,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":80,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":100,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":100,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":100,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":106,"column":49,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":106,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":106,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":115,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":115,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":115,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":122,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":122,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":122,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":128,"column":49,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":128,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":128,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":56},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getAvailablePlans' has no 'await' expression.","line":132,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":132,"endColumn":26,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3827,3833],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":138,"column":46,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":138,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":138,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":143,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":143,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":143,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":58}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// apps/api/src/users/users.controller.ts - FIXED VERSION\n\nimport {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CurrentUser } from '../auth/current-user.decorator';\nimport { UsersService } from './users.service';\nimport { PlanLimitsService } from './plan-limits.service';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { UpdatePreferencesDto } from './dto/update-preferences.dto';\n\n@Controller('api/v1/users')\n@UseGuards(JwtAuthGuard)\nexport class UsersController {\n  constructor(\n    private usersService: UsersService,\n    private planLimitsService: PlanLimitsService,\n  ) {}\n\n  @Get('profile')\n  async getProfile(@CurrentUser() user: any) {\n    return this.usersService.getProfile(user.id);\n  }\n\n  @Patch('profile')\n  async updateProfile(\n    @CurrentUser() user: any,\n    @Body() updateProfileDto: UpdateProfileDto,\n  ) {\n    try {\n      console.log('🔧 Profile update request - FULL DATA:', {\n        userId: user?.id,\n        rawRequestBody: updateProfileDto,\n        dataKeys: Object.keys(updateProfileDto || {}),\n        specialtiesType: Array.isArray(updateProfileDto?.specialties)\n          ? 'array'\n          : typeof updateProfileDto?.specialties,\n        specialtiesValue: updateProfileDto?.specialties,\n      });\n\n      const result = await this.usersService.updateProfile(\n        user.id,\n        updateProfileDto,\n      );\n      console.log('✅ Profile update successful');\n      return result;\n    } catch (error) {\n      console.error('❌ Profile update failed - COMPLETE ERROR:', {\n        errorName: error.name,\n        errorMessage: error.message,\n        errorStack: error.stack,\n        userId: user?.id,\n        requestData: updateProfileDto,\n        isPrismaError: error.name?.includes('Prisma'),\n        fullError: error,\n      });\n      throw error;\n    }\n  }\n\n  @Post('change-password')\n  async changePassword(\n    @CurrentUser() user: any,\n    @Body() changePasswordDto: ChangePasswordDto,\n  ) {\n    return this.usersService.changePassword(user.id, changePasswordDto);\n  }\n\n  // EMAIL PREFERENCES ENDPOINTS\n  @Get('email-preferences')\n  async getEmailPreferences(@CurrentUser() user: any) {\n    const userProfile = await this.usersService.findById(user.id);\n    return {\n      preferredTemplate:\n        userProfile.profile?.preferredEmailTemplate || 'modern',\n      brandColor: userProfile.profile?.brandColor || '#3b82f6',\n      companyName: userProfile.profile?.company || '',\n      agentName:\n        `${userProfile.profile?.firstName || ''} ${userProfile.profile?.lastName || ''}`.trim(),\n    };\n  }\n\n  @Patch('email-preferences')\n  async updateEmailPreferences(\n    @CurrentUser() user: any,\n    @Body()\n    preferences: {\n      preferredTemplate?: 'modern' | 'classical';\n      brandColor?: string;\n    },\n  ) {\n    return this.usersService.updateEmailPreferences(user.id, preferences);\n  }\n\n  // GENERAL PREFERENCES ENDPOINTS (if you want to keep these separate)\n  @Get('preferences')\n  async getPreferences(@CurrentUser() user: any) {\n    return this.usersService.getUserPreferences(user.id);\n  }\n\n  @Patch('preferences')\n  async updatePreferences(\n    @CurrentUser() user: any,\n    @Body() updatePreferencesDto: UpdatePreferencesDto,\n  ) {\n    return this.usersService.updateUserPreferences(\n      user.id,\n      updatePreferencesDto,\n    );\n  }\n\n  @Post('preferences/reset')\n  async resetPreferences(@CurrentUser() user: any) {\n    return this.usersService.resetUserPreferences(user.id);\n  }\n\n  // PLAN AND LIMITS ENDPOINTS\n  @Get('plan/current')\n  async getCurrentPlan(@CurrentUser() user: any) {\n    return this.usersService.getCurrentPlanInfo(user.id);\n  }\n\n  @Get('plan/available')\n  async getAvailablePlans() {\n    return this.planLimitsService.getAllPlans();\n  }\n\n  @Get('plan/usage')\n  async getCurrentUsage(@CurrentUser() user: any) {\n    return this.usersService.getCurrentUsage(user.id);\n  }\n\n  @Get('plan/validate')\n  async validateCurrentUsage(@CurrentUser() user: any) {\n    return this.usersService.validateCurrentUsage(user.id);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\users.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\src\\users\\users.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'crypto' is defined but never used.","line":14,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .brandColor on an `any` value.","line":43,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .preferredEmailTemplate on an `any` value.","line":47,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":25},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":91,"column":22,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":91,"endColumn":36,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2741,2767],"text":"Object.prototype.hasOwnProperty.call(updateData, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":103,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":106,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":106,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":106,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":117,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":117,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .firstName on an `any` value.","line":117,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":118,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":118,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastName on an `any` value.","line":118,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":119,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":119,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .company on an `any` value.","line":119,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":120,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `any` value.","line":120,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":121,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":121,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .website on an `any` value.","line":121,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":122,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .licenseNumber on an `any` value.","line":122,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":123,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":123,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .bio on an `any` value.","line":123,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":124,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":124,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .yearsExperience on an `any` value.","line":124,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .specialties on an `any` value.","line":125,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":126,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":126,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .brandColor on an `any` value.","line":126,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":127,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":127,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .logo on an `any` value.","line":127,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":128,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":128,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar on an `any` value.","line":128,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":148,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":152,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":159,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":194,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":194,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":232,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":232,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":254,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is assigned a value but never used.","line":292,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":325,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":329,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .brandColor on an `any` value.","line":421,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":421,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .logo on an `any` value.","line":425,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":425,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .preferredEmailTemplate on an `any` value.","line":429,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":429,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .emailTemplateStyle on an `any` value.","line":430,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":430,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationEmail on an `any` value.","line":435,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationDesktop on an `any` value.","line":438,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":438,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationFeedback on an `any` value.","line":441,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":441,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationNewProperties on an `any` value.","line":444,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":444,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationClientViews on an `any` value.","line":449,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":449,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationClientLogin on an `any` value.","line":453,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":453,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationEmailOpens on an `any` value.","line":457,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":457,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notificationInactiveClients on an `any` value.","line":461,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":461,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":467,"column":21,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":467,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":470,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":470,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":471,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":476,"endColumn":10}],"suppressedMessages":[],"errorCount":54,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { PlanLimitsService } from './plan-limits.service';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { UpdatePreferencesDto } from './dto/update-preferences.dto';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport * as bcrypt from 'bcryptjs';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    private prisma: PrismaService,\n    private planLimitsService: PlanLimitsService,\n  ) {}\n\n  // FIXED: Email Preferences Method\n  async updateEmailPreferences(\n    userId: string,\n    preferences: {\n      preferredTemplate?: 'modern' | 'classical';\n      brandColor?: string;\n    },\n  ) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: { profile: true },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const updateData: any = {};\n\n    if (preferences.brandColor) {\n      updateData.brandColor = preferences.brandColor;\n    }\n\n    if (preferences.preferredTemplate) {\n      updateData.preferredEmailTemplate = preferences.preferredTemplate;\n    }\n\n    // Use upsert to handle cases where profile might not exist\n    const updatedProfile = await this.prisma.profile.upsert({\n      where: { userId },\n      update: updateData,\n      create: {\n        userId,\n        firstName: '',\n        lastName: '',\n        preferredEmailTemplate: preferences.preferredTemplate || 'modern',\n        brandColor: preferences.brandColor || '#3b82f6',\n      },\n    });\n\n    return {\n      message: 'Email preferences updated successfully',\n      preferences: {\n        preferredTemplate: updatedProfile.preferredEmailTemplate || 'modern',\n        brandColor: updatedProfile.brandColor || '#3b82f6',\n        companyName: updatedProfile.company || '',\n        agentName:\n          `${updatedProfile.firstName || ''} ${updatedProfile.lastName || ''}`.trim(),\n      },\n    };\n  }\n\n  // FIXED: Single updateProfile method\n  async updateProfile(userId: string, updateData: UpdateProfileDto) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: { profile: true },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Handle field updates - undefined means clear the field (set to null)\n    const profileUpdateData: any = {};\n\n    // Always update fields that are present in updateData, including undefined (to clear them)\n    Object.keys(updateData).forEach((key) => {\n      if (updateData.hasOwnProperty(key)) {\n        // Convert undefined to null for optional fields that can be cleared\n        if (\n          key === 'company' ||\n          key === 'phone' ||\n          key === 'website' ||\n          key === 'licenseNumber' ||\n          key === 'bio' ||\n          key === 'avatar' ||\n          key === 'timezone' ||\n          key === 'logo'\n        ) {\n          profileUpdateData[key] = updateData[key] || null;\n        } else {\n          // For required fields and special cases, keep the value as-is\n          profileUpdateData[key] = updateData[key];\n        }\n      }\n    });\n\n    try {\n      const updatedProfile = await this.prisma.profile.upsert({\n        where: { userId },\n        update: profileUpdateData,\n        create: {\n          userId,\n          firstName: profileUpdateData.firstName || '',\n          lastName: profileUpdateData.lastName || '',\n          company: profileUpdateData.company || null,\n          phone: profileUpdateData.phone || null,\n          website: profileUpdateData.website || null,\n          licenseNumber: profileUpdateData.licenseNumber || null,\n          bio: profileUpdateData.bio || null,\n          yearsExperience: profileUpdateData.yearsExperience || null,\n          specialties: profileUpdateData.specialties || null,\n          brandColor: profileUpdateData.brandColor || '#3b82f6',\n          logo: profileUpdateData.logo || null,\n          avatar: profileUpdateData.avatar || null,\n          plan: 'FREE',\n        },\n      });\n\n      return {\n        id: user.id,\n        email: user.email,\n        emailVerified: user.emailVerified,\n        firstName: updatedProfile.firstName,\n        lastName: updatedProfile.lastName,\n        company: updatedProfile.company || '',\n        phone: updatedProfile.phone || '',\n        website: updatedProfile.website || '',\n        licenseNumber: updatedProfile.licenseNumber || '',\n        plan: updatedProfile.plan,\n        brandColor: updatedProfile.brandColor || '#3b82f6',\n        logo: updatedProfile.logo || '',\n        bio: updatedProfile.bio || '',\n        yearsExperience: updatedProfile.yearsExperience || 0,\n        specialties: updatedProfile.specialties\n          ? typeof updatedProfile.specialties === 'string'\n            ? JSON.parse(updatedProfile.specialties)\n            : updatedProfile.specialties\n          : [],\n        avatar: updatedProfile.avatar || '',\n        timezone: updatedProfile.timezone || 'America/New_York',\n        createdAt: user.createdAt,\n        updatedAt: updatedProfile.updatedAt,\n      };\n    } catch (error) {\n      console.error('Profile update failed:', error.message);\n      throw error;\n    }\n  }\n\n  // Keep all your existing methods below (no changes needed)\n  async create(registerDto: RegisterDto) {\n    const existingUser = await this.findByEmail(registerDto.email);\n    if (existingUser) {\n      throw new ConflictException('Email already exists');\n    }\n\n    const hashedPassword = await bcrypt.hash(registerDto.password, 12);\n\n    const user = await this.prisma.user.create({\n      data: {\n        email: registerDto.email,\n        password: hashedPassword,\n        emailVerified: false,\n        profile: {\n          create: {\n            firstName: registerDto.firstName,\n            lastName: registerDto.lastName,\n            company: registerDto.company,\n            phone: registerDto.phone,\n            licenseNumber: registerDto.licenseNumber,\n            plan: 'FREE',\n          },\n        },\n      },\n      include: {\n        profile: true,\n      },\n    });\n\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async createWithVerification(\n    registerDto: RegisterDto,\n    verificationData: { verificationToken: string; verificationExpiry: Date },\n  ) {\n    const existingUser = await this.findByEmail(registerDto.email);\n    if (existingUser) {\n      throw new ConflictException('Email already exists');\n    }\n\n    const hashedPassword = await bcrypt.hash(registerDto.password, 12);\n\n    const user = await this.prisma.user.create({\n      data: {\n        email: registerDto.email,\n        password: hashedPassword,\n        emailVerified: false,\n        verificationToken: verificationData.verificationToken,\n        verificationExpiry: verificationData.verificationExpiry,\n        profile: {\n          create: {\n            firstName: registerDto.firstName,\n            lastName: registerDto.lastName,\n            company: registerDto.company,\n            phone: registerDto.phone,\n            licenseNumber: registerDto.licenseNumber,\n            plan: 'FREE',\n          },\n        },\n      },\n      include: {\n        profile: true,\n      },\n    });\n\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async findByVerificationToken(token: string) {\n    return this.prisma.user.findUnique({\n      where: { verificationToken: token },\n      include: { profile: true },\n    });\n  }\n\n  async markEmailAsVerified(userId: string) {\n    const user = await this.prisma.user.update({\n      where: { id: userId },\n      data: {\n        emailVerified: true,\n        verificationToken: null,\n        verificationExpiry: null,\n      },\n      include: { profile: true },\n    });\n\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async updateVerificationToken(\n    userId: string,\n    verificationData: { verificationToken: string; verificationExpiry: Date },\n  ) {\n    return this.prisma.user.update({\n      where: { id: userId },\n      data: {\n        verificationToken: verificationData.verificationToken,\n        verificationExpiry: verificationData.verificationExpiry,\n      },\n    });\n  }\n\n  async findByEmail(email: string) {\n    return this.prisma.user.findUnique({\n      where: { email },\n      include: {\n        profile: true,\n      },\n    });\n  }\n\n  async findById(id: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id },\n      include: {\n        profile: true,\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async getProfile(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: {\n        profile: true,\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return {\n      id: user.id,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      firstName: user.profile?.firstName || '',\n      lastName: user.profile?.lastName || '',\n      company: user.profile?.company || '',\n      phone: user.profile?.phone || '',\n      website: user.profile?.website || '',\n      licenseNumber: user.profile?.licenseNumber || '',\n      plan: user.profile?.plan || 'FREE',\n      brandColor: user.profile?.brandColor || '#3b82f6',\n      logo: user.profile?.logo || '',\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n      bio: user.profile?.bio || '',\n      yearsExperience: user.profile?.yearsExperience || 0,\n      specialties: user.profile?.specialties\n        ? typeof user.profile.specialties === 'string'\n          ? JSON.parse(user.profile.specialties)\n          : user.profile.specialties\n        : [],\n      avatar: user.profile?.avatar || '',\n      timezone: user.profile?.timezone || '',\n    };\n  }\n\n  async getDetailedProfile(userId: string) {\n    return this.getProfile(userId);\n  }\n\n  async changePassword(userId: string, changePasswordDto: ChangePasswordDto) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const isCurrentPasswordValid = await bcrypt.compare(\n      changePasswordDto.currentPassword,\n      user.password,\n    );\n    if (!isCurrentPasswordValid) {\n      throw new BadRequestException('Current password is incorrect');\n    }\n\n    const hashedNewPassword = await bcrypt.hash(\n      changePasswordDto.newPassword,\n      12,\n    );\n\n    await this.prisma.user.update({\n      where: { id: userId },\n      data: {\n        password: hashedNewPassword,\n      },\n    });\n\n    return { message: 'Password updated successfully' };\n  }\n\n  async getUserPreferences(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: { profile: true },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return {\n      emailTemplateStyle:\n        user.profile?.emailTemplateStyle ||\n        user.profile?.preferredEmailTemplate ||\n        'modern',\n      notifications: {\n        email: user.profile?.notificationEmail ?? true,\n        desktop: user.profile?.notificationDesktop ?? true,\n        feedback: user.profile?.notificationFeedback ?? true,\n        newProperties: user.profile?.notificationNewProperties ?? true,\n        // Activity notifications\n        clientViews: user.profile?.notificationClientViews ?? true,\n        clientLogin: user.profile?.notificationClientLogin ?? false,\n        emailOpens: user.profile?.notificationEmailOpens ?? true,\n        inactiveClients: user.profile?.notificationInactiveClients ?? false,\n      },\n      theme: 'dark' as const,\n      soundEnabled: true,\n      timezone: user.profile?.timezone || 'America/New_York',\n      brandColor: user.profile?.brandColor || '#3b82f6',\n      logo: user.profile?.logo || '',\n    };\n  }\n\n  async updateUserPreferences(\n    userId: string,\n    preferences: UpdatePreferencesDto,\n  ) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: { profile: true },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const updateData: any = {};\n\n    if (preferences.brandColor !== undefined) {\n      updateData.brandColor = preferences.brandColor;\n    }\n\n    if (preferences.logo !== undefined) {\n      updateData.logo = preferences.logo;\n    }\n\n    if (preferences.emailTemplateStyle !== undefined) {\n      updateData.preferredEmailTemplate = preferences.emailTemplateStyle;\n      updateData.emailTemplateStyle = preferences.emailTemplateStyle;\n    }\n\n    if (preferences.notifications !== undefined) {\n      if (preferences.notifications.email !== undefined) {\n        updateData.notificationEmail = preferences.notifications.email;\n      }\n      if (preferences.notifications.desktop !== undefined) {\n        updateData.notificationDesktop = preferences.notifications.desktop;\n      }\n      if (preferences.notifications.feedback !== undefined) {\n        updateData.notificationFeedback = preferences.notifications.feedback;\n      }\n      if (preferences.notifications.newProperties !== undefined) {\n        updateData.notificationNewProperties =\n          preferences.notifications.newProperties;\n      }\n      // Activity notifications\n      if (preferences.notifications.clientViews !== undefined) {\n        updateData.notificationClientViews =\n          preferences.notifications.clientViews;\n      }\n      if (preferences.notifications.clientLogin !== undefined) {\n        updateData.notificationClientLogin =\n          preferences.notifications.clientLogin;\n      }\n      if (preferences.notifications.emailOpens !== undefined) {\n        updateData.notificationEmailOpens =\n          preferences.notifications.emailOpens;\n      }\n      if (preferences.notifications.inactiveClients !== undefined) {\n        updateData.notificationInactiveClients =\n          preferences.notifications.inactiveClients;\n      }\n    }\n\n    let updatedProfile = user.profile;\n    if (Object.keys(updateData).length > 0) {\n      updatedProfile = await this.prisma.profile.upsert({\n        where: { userId },\n        update: updateData,\n        create: {\n          userId,\n          firstName: '',\n          lastName: '',\n          ...updateData,\n        },\n      });\n    }\n\n    return {\n      emailTemplateStyle:\n        updatedProfile?.emailTemplateStyle ||\n        updatedProfile?.preferredEmailTemplate ||\n        'modern',\n      notifications: {\n        email: updatedProfile?.notificationEmail ?? true,\n        desktop: updatedProfile?.notificationDesktop ?? true,\n        feedback: updatedProfile?.notificationFeedback ?? true,\n        newProperties: updatedProfile?.notificationNewProperties ?? true,\n        // Activity notifications\n        clientViews: updatedProfile?.notificationClientViews ?? true,\n        clientLogin: updatedProfile?.notificationClientLogin ?? false,\n        emailOpens: updatedProfile?.notificationEmailOpens ?? true,\n        inactiveClients: updatedProfile?.notificationInactiveClients ?? false,\n      },\n      theme: preferences.theme || 'dark',\n      soundEnabled:\n        preferences.soundEnabled !== undefined\n          ? preferences.soundEnabled\n          : true,\n      timezone: preferences.timezone || 'America/New_York',\n      brandColor: updatedProfile?.brandColor || '#3b82f6',\n      logo: updatedProfile?.logo || '',\n    };\n  }\n\n  async resetUserPreferences(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: { profile: true },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const updatedProfile = await this.prisma.profile.upsert({\n      where: { userId },\n      update: {\n        brandColor: '#3b82f6',\n        logo: '',\n        preferredEmailTemplate: 'modern',\n      },\n      create: {\n        userId,\n        firstName: '',\n        lastName: '',\n        brandColor: '#3b82f6',\n        logo: '',\n        preferredEmailTemplate: 'modern',\n      },\n    });\n\n    return {\n      emailTemplateStyle: 'modern',\n      notifications: {\n        email: true,\n        desktop: true,\n        feedback: true,\n        newProperties: true,\n      },\n      theme: 'dark',\n      soundEnabled: true,\n      timezone: 'America/New_York',\n      brandColor: updatedProfile.brandColor,\n      logo: updatedProfile.logo,\n    };\n  }\n\n  async validatePassword(\n    password: string,\n    hashedPassword: string,\n  ): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  // PLAN AND LIMITS METHODS\n  async getCurrentPlanInfo(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: { profile: true },\n    });\n\n    if (!user || !user.profile) {\n      throw new NotFoundException('User profile not found');\n    }\n\n    const planLimits = this.planLimitsService.getLimitsForPlan(\n      user.profile.plan,\n    );\n\n    return {\n      currentPlan: user.profile.plan,\n      limits: planLimits,\n      subscriptionStatus: user.profile.subscriptionStatus,\n    };\n  }\n\n  async getCurrentUsage(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: {\n        clients: true,\n        timelines: {\n          include: {\n            properties: true,\n          },\n        },\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const totalProperties = user.timelines.reduce(\n      (sum, timeline) => sum + timeline.properties.length,\n      0,\n    );\n\n    return {\n      clients: user.clients.length,\n      properties: totalProperties,\n    };\n  }\n\n  async validateCurrentUsage(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: {\n        profile: true,\n        clients: true,\n        timelines: {\n          include: {\n            properties: true,\n          },\n        },\n      },\n    });\n\n    if (!user || !user.profile) {\n      throw new NotFoundException('User profile not found');\n    }\n\n    const totalProperties = user.timelines.reduce(\n      (sum, timeline) => sum + timeline.properties.length,\n      0,\n    );\n\n    // Use database limits instead of hardcoded plan limits\n    const clientExceeded = user.clients.length > user.profile.clientLimit;\n    const propertyExceeded = totalProperties > user.profile.propertyLimit;\n\n    const validation = {\n      isValid: !clientExceeded && !propertyExceeded,\n      clientExceeded,\n      propertyExceeded,\n      limits: {\n        clientLimit: user.profile.clientLimit,\n        propertyLimit: user.profile.propertyLimit,\n        name: this.planLimitsService.getLimitsForPlan(user.profile.plan).name,\n        price: this.planLimitsService.getLimitsForPlan(user.profile.plan).price,\n        description: this.planLimitsService.getLimitsForPlan(user.profile.plan)\n          .description,\n      },\n      usage: {\n        clients: user.clients.length,\n        properties: totalProperties,\n      },\n    };\n\n    return {\n      ...validation,\n      upgradeMessage: !validation.isValid\n        ? `You've reached your limits. Current: ${user.clients.length}/${user.profile.clientLimit} clients, ${totalProperties}/${user.profile.propertyLimit} properties.`\n        : null,\n    };\n  }\n\n  async checkCanAddClients(\n    userId: string,\n    clientCount = 1,\n  ): Promise<{ canAdd: boolean; reason?: string }> {\n    const validation = await this.validateCurrentUsage(userId);\n\n    // Check against database limits directly\n    const newClientTotal = validation.usage.clients + clientCount;\n    const canAdd = newClientTotal <= validation.limits.clientLimit;\n\n    return {\n      canAdd,\n      reason: !canAdd\n        ? `Adding ${clientCount} client(s) would exceed your limit of ${validation.limits.clientLimit} clients. Current: ${validation.usage.clients}/${validation.limits.clientLimit}`\n        : undefined,\n    };\n  }\n\n  async checkCanAddProperties(\n    userId: string,\n    propertyCount = 1,\n  ): Promise<{ canAdd: boolean; reason?: string }> {\n    const validation = await this.validateCurrentUsage(userId);\n\n    // Check against database limits directly\n    const newPropertyTotal = validation.usage.properties + propertyCount;\n    const canAdd = newPropertyTotal <= validation.limits.propertyLimit;\n\n    return {\n      canAdd,\n      reason: !canAdd\n        ? `Adding ${propertyCount} property(ies) would exceed your limit of ${validation.limits.propertyLimit} properties. Current: ${validation.usage.properties}/${validation.limits.propertyLimit}`\n        : undefined,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ziadf\\Documents\\Projects\\property_sync\\api\\test\\app.e2e-spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":20,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":23,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":23,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":22,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":20,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":21,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `error` typed value.","line":21,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expect on an `error` typed value.","line":22,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expect on an `error` typed value.","line":23,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":14}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { App } from 'supertest/types';\nimport { AppModule } from './../src/app.module';\n\ndescribe('AppController (e2e)', () => {\n  let app: INestApplication<App>;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n\n  it('/ (GET)', () => {\n    return request(app.getHttpServer())\n      .get('/')\n      .expect(200)\n      .expect('Hello World!');\n  });\n});\n","usedDeprecatedRules":[]}]
